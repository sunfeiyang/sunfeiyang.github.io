{"title":"java设计模式之桥接模式","num_read":90,"num_like":614,"num_collection":736,"num_comments":277,"slug":"resource-designpattern-structure-Bridge","date":"2020-10-09T16:00:00.000Z","img":"/img/header_img/Design/Bridge.png","_id":"clhrbp2b9005bo5lgck2oauix","project":"designPattern","site":{"data":{}},"updated":"2022-09-20T01:36:03.696Z","author":"Sunfy","comments":true,"path":"api/articles/resource-designpattern-structure-Bridge.json","webPath":"2020/10/10/resource-designpattern-structure-Bridge/","permalink":"https://sunfy9.gitee.io/2020/10/10/resource-designpattern-structure-Bridge/","excerpt":null,"covers":["../../../../img/Bridge/20201015-bridge.svg"],"keywords":"sunfy, hexo-theme-snail","content":"<p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</p>\n<p>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p>\n<p>我们通过下面的实例来演示桥接模式（Bridge Pattern）的用法。其中，可以使用相同的抽象类方法但是不同的桥接实现类，来画出不同颜色的圆。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><strong>意图：</strong>将抽象部分与实现部分分离，使它们都可以独立的变化。</p>\n<p><strong>主要解决：</strong>在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。</p>\n<p><strong>何时使用：</strong>实现系统可能有多个角度分类，每一种角度都可能变化。</p>\n<p><strong>如何解决：</strong>把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。</p>\n<p><strong>关键代码：</strong>抽象类依赖实现类。</p>\n<p><strong>应用实例：</strong> 1、猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择。 2、墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。</p>\n<p><strong>优点：</strong> 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。</p>\n<p><strong>缺点：</strong>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</p>\n<p><strong>使用场景：</strong> 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</p>\n<p><strong>注意事项：</strong>对于两个独立变化的维度，使用桥接模式再适合不过了。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现<sunfy-line></h2><p>我们有一个作为桥接实现的 <em>DrawAPI</em> 接口和实现了 <em>DrawAPI</em> 接口的实体类 <em>RedCircle</em>、<em>GreenCircle</em>。<em>Shape</em> 是一个抽象类，将使用 <em>DrawAPI</em> 的对象。<em>BridgePatternDemo</em> 类使用 <em>Shape</em> 类来画出不同颜色的圆。</p>\n<p><img src=\"../../../../img/Bridge/20201015-bridge.svg\" alt=\"桥接模式的 UML 图\"></p>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤 1\"></a>步骤 1</h3><p>创建桥接实现接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DrawAPI</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(<span class=\"keyword\">int</span> radius, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-2\"><a href=\"#步骤-2\" class=\"headerlink\" title=\"步骤 2\"></a>步骤 2</h3><p>创建实现了 <em>DrawAPI</em> 接口的实体桥接实现类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedCircle</span> <span class=\"keyword\">implements</span> <span class=\"title\">DrawAPI</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(<span class=\"keyword\">int</span> radius, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Drawing Circle[ color: red, radius: \"</span></span><br><span class=\"line\">         + radius +<span class=\"string\">\", x: \"</span> +x+<span class=\"string\">\", \"</span>+ y +<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreenCircle</span> <span class=\"keyword\">implements</span> <span class=\"title\">DrawAPI</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(<span class=\"keyword\">int</span> radius, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Drawing Circle[ color: green, radius: \"</span></span><br><span class=\"line\">         + radius +<span class=\"string\">\", x: \"</span> +x+<span class=\"string\">\", \"</span>+ y +<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-3\"><a href=\"#步骤-3\" class=\"headerlink\" title=\"步骤 3\"></a>步骤 3</h3><p>使用 <em>DrawAPI</em> 接口创建抽象类 <em>Shape</em>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> DrawAPI drawAPI;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Shape</span><span class=\"params\">(DrawAPI drawAPI)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.drawAPI = drawAPI;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-4\"><a href=\"#步骤-4\" class=\"headerlink\" title=\"步骤 4\"></a>步骤 4</h3><p>创建实现了 <em>Shape</em> 抽象类的实体类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> x, y, radius;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Circle</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> radius, DrawAPI drawAPI)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>(drawAPI);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.x = x;  </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.y = y;  </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      drawAPI.drawCircle(radius,x,y);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-5\"><a href=\"#步骤-5\" class=\"headerlink\" title=\"步骤 5\"></a>步骤 5</h3><p>使用 <em>Shape</em> 和 <em>DrawAPI</em> 类画出不同颜色的圆。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BridgePatternDemo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Shape redCircle = <span class=\"keyword\">new</span> Circle(<span class=\"number\">100</span>,<span class=\"number\">100</span>, <span class=\"number\">10</span>, <span class=\"keyword\">new</span> RedCircle());</span><br><span class=\"line\">      Shape greenCircle = <span class=\"keyword\">new</span> Circle(<span class=\"number\">100</span>,<span class=\"number\">100</span>, <span class=\"number\">10</span>, <span class=\"keyword\">new</span> GreenCircle());</span><br><span class=\"line\"> </span><br><span class=\"line\">      redCircle.draw();</span><br><span class=\"line\">      greenCircle.draw();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-6\"><a href=\"#步骤-6\" class=\"headerlink\" title=\"步骤 6\"></a>步骤 6</h3><p>执行程序，输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Drawing Circle[ color: red, radius: 10, x: 100, 100]</span><br><span class=\"line\">Drawing Circle[  color: green, radius: 10, x: 100, 100]</span><br></pre></td></tr></table></figure>\n<h2 id=\"模式优缺点\"><a href=\"#模式优缺点\" class=\"headerlink\" title=\"模式优缺点\"></a>模式优缺点</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>1、分离抽象接口及其实现部分。提高了比继承更好的解决方案。</li>\n<li>2、桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。</li>\n<li>3、实现细节对客户透明，可以对用户隐藏实现细节。</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>1、桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li>\n<li>2、桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性。</li>\n</ul>\n<h2 id=\"模式使用场景\"><a href=\"#模式使用场景\" class=\"headerlink\" title=\"模式使用场景\"></a>模式使用场景</h2><ul>\n<li>1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。</li>\n<li>2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</li>\n<li>3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</li>\n</ul>\n<h2 id=\"模式总结\"><a href=\"#模式总结\" class=\"headerlink\" title=\"模式总结\"></a>模式总结</h2><ul>\n<li>1、桥接模式实现了抽象化与实现化的脱耦。他们两个互相独立，不会影响到对方。</li>\n<li>2、对于两个独立变化的维度，使用桥接模式再适合不过了。</li>\n<li>3、对于”具体的抽象类”所做的改变，是不会影响到客户。</li>\n</ul>\n","more":"<p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</p>\n<p>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p>\n<p>我们通过下面的实例来演示桥接模式（Bridge Pattern）的用法。其中，可以使用相同的抽象类方法但是不同的桥接实现类，来画出不同颜色的圆。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><strong>意图：</strong>将抽象部分与实现部分分离，使它们都可以独立的变化。</p>\n<p><strong>主要解决：</strong>在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。</p>\n<p><strong>何时使用：</strong>实现系统可能有多个角度分类，每一种角度都可能变化。</p>\n<p><strong>如何解决：</strong>把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。</p>\n<p><strong>关键代码：</strong>抽象类依赖实现类。</p>\n<p><strong>应用实例：</strong> 1、猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择。 2、墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。</p>\n<p><strong>优点：</strong> 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。</p>\n<p><strong>缺点：</strong>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</p>\n<p><strong>使用场景：</strong> 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</p>\n<p><strong>注意事项：</strong>对于两个独立变化的维度，使用桥接模式再适合不过了。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现<sunfy-line></h2><p>我们有一个作为桥接实现的 <em>DrawAPI</em> 接口和实现了 <em>DrawAPI</em> 接口的实体类 <em>RedCircle</em>、<em>GreenCircle</em>。<em>Shape</em> 是一个抽象类，将使用 <em>DrawAPI</em> 的对象。<em>BridgePatternDemo</em> 类使用 <em>Shape</em> 类来画出不同颜色的圆。</p>\n<p><img src=\"../../../../img/Bridge/20201015-bridge.svg\" alt=\"桥接模式的 UML 图\"></p>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤 1\"></a>步骤 1</h3><p>创建桥接实现接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DrawAPI</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(<span class=\"keyword\">int</span> radius, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-2\"><a href=\"#步骤-2\" class=\"headerlink\" title=\"步骤 2\"></a>步骤 2</h3><p>创建实现了 <em>DrawAPI</em> 接口的实体桥接实现类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedCircle</span> <span class=\"keyword\">implements</span> <span class=\"title\">DrawAPI</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(<span class=\"keyword\">int</span> radius, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Drawing Circle[ color: red, radius: \"</span></span><br><span class=\"line\">         + radius +<span class=\"string\">\", x: \"</span> +x+<span class=\"string\">\", \"</span>+ y +<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreenCircle</span> <span class=\"keyword\">implements</span> <span class=\"title\">DrawAPI</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">(<span class=\"keyword\">int</span> radius, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Drawing Circle[ color: green, radius: \"</span></span><br><span class=\"line\">         + radius +<span class=\"string\">\", x: \"</span> +x+<span class=\"string\">\", \"</span>+ y +<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-3\"><a href=\"#步骤-3\" class=\"headerlink\" title=\"步骤 3\"></a>步骤 3</h3><p>使用 <em>DrawAPI</em> 接口创建抽象类 <em>Shape</em>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> DrawAPI drawAPI;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">Shape</span><span class=\"params\">(DrawAPI drawAPI)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.drawAPI = drawAPI;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-4\"><a href=\"#步骤-4\" class=\"headerlink\" title=\"步骤 4\"></a>步骤 4</h3><p>创建实现了 <em>Shape</em> 抽象类的实体类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> x, y, radius;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Circle</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> radius, DrawAPI drawAPI)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>(drawAPI);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.x = x;  </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.y = y;  </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      drawAPI.drawCircle(radius,x,y);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-5\"><a href=\"#步骤-5\" class=\"headerlink\" title=\"步骤 5\"></a>步骤 5</h3><p>使用 <em>Shape</em> 和 <em>DrawAPI</em> 类画出不同颜色的圆。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BridgePatternDemo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Shape redCircle = <span class=\"keyword\">new</span> Circle(<span class=\"number\">100</span>,<span class=\"number\">100</span>, <span class=\"number\">10</span>, <span class=\"keyword\">new</span> RedCircle());</span><br><span class=\"line\">      Shape greenCircle = <span class=\"keyword\">new</span> Circle(<span class=\"number\">100</span>,<span class=\"number\">100</span>, <span class=\"number\">10</span>, <span class=\"keyword\">new</span> GreenCircle());</span><br><span class=\"line\"> </span><br><span class=\"line\">      redCircle.draw();</span><br><span class=\"line\">      greenCircle.draw();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-6\"><a href=\"#步骤-6\" class=\"headerlink\" title=\"步骤 6\"></a>步骤 6</h3><p>执行程序，输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Drawing Circle[ color: red, radius: 10, x: 100, 100]</span><br><span class=\"line\">Drawing Circle[  color: green, radius: 10, x: 100, 100]</span><br></pre></td></tr></table></figure>\n<h2 id=\"模式优缺点\"><a href=\"#模式优缺点\" class=\"headerlink\" title=\"模式优缺点\"></a>模式优缺点</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>1、分离抽象接口及其实现部分。提高了比继承更好的解决方案。</li>\n<li>2、桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。</li>\n<li>3、实现细节对客户透明，可以对用户隐藏实现细节。</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>1、桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li>\n<li>2、桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性。</li>\n</ul>\n<h2 id=\"模式使用场景\"><a href=\"#模式使用场景\" class=\"headerlink\" title=\"模式使用场景\"></a>模式使用场景</h2><ul>\n<li>1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。</li>\n<li>2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</li>\n<li>3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</li>\n</ul>\n<h2 id=\"模式总结\"><a href=\"#模式总结\" class=\"headerlink\" title=\"模式总结\"></a>模式总结</h2><ul>\n<li>1、桥接模式实现了抽象化与实现化的脱耦。他们两个互相独立，不会影响到对方。</li>\n<li>2、对于两个独立变化的维度，使用桥接模式再适合不过了。</li>\n<li>3、对于”具体的抽象类”所做的改变，是不会影响到客户。</li>\n</ul>\n","next":{"title":"MySQL常见异常","path":"api/articles/resource-DB-MySQL-MySQl-error.json","image":"/img/header_img/DB/mysql.jpg","num_read":279,"num_like":682,"num_collection":195,"num_comments":152},"prev":{"title":"java设计模式之外观模式","path":"api/articles/resource-designpattern-structure-Facade.json","image":"/img/header_img/Design/Facade.png","num_read":1443,"num_like":450,"num_collection":622,"num_comments":47},"categories":[{"name":"设计模式","path":"api/categories/设计模式.json","pathContent":"api/categories/设计模式","description":"简单快捷、解决方案","cover":"https://sunfy9.gitee.io/project/photo/project/design.jpg"}],"tags":[]}