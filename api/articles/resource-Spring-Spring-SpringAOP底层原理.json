{"title":"SpringAOP底层原理","num_read":1648,"num_like":1082,"num_collection":361,"num_comments":36,"slug":"resource-Spring-Spring-SpringAOP底层原理","date":"2021-10-12T16:00:00.000Z","img":"/img/header_img/spring/aop.png","format":"max","_id":"cl8dzd09i000iprlg7a6t3hrf","project":"Spring","type":"hot","subtitle":"AOP底层原理解析","hot":"read","site":{"data":{}},"updated":"2022-09-20T02:19:08.333Z","author":"Sunfy","comments":true,"path":"api/articles/resource-Spring-Spring-SpringAOP底层原理.json","webPath":"2021/10/13/resource-Spring-Spring-SpringAOP底层原理/","permalink":"https://fy-blog.gitee.io/sunfy-framework/2021/10/13/resource-Spring-Spring-SpringAOP%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/","excerpt":null,"covers":["../../../../img/SpringAOP底层原理/image-20210812145750817-16348060527742.png","../../../../img/SpringAOP底层原理/image-20211021165948587.png"],"keywords":"sunfy, hexo-theme-snail","content":"<h1 id=\"理解Spring-AOP\"><a href=\"#理解Spring-AOP\" class=\"headerlink\" title=\"理解Spring AOP\"></a>理解Spring AOP</h1><p>提到AOP那我们自然会想到初学java时经常提到的OOP，OOP表示的是面向对象编程，是一种编程思想。AOP则是面向切面编程，同样也是一种编程思想。从Spring作为一个框架的角度来说，提供了一整套的面向切面编程的机制，让我们更容易进行开发，这套机制在Spring中就称为Spring AOP。</p>\n<p>知道了AOP是一种编程思想，那又是一种什么样的编程思想呢？</p>\n<p><strong>AOP</strong>：将程序中的交叉业务（日志、安全、事务等），封装成一个切面，然后注入到目标对象的具体逻辑中去。AOP可以对某个对象或某些对象的功能进行增强，具体来说，对某个对象的方法进行增强，可以在执行方法之余额外做一些事情，可以在方法前、方法后等。</p>\n<h1 id=\"Spring-AOP中的概念\"><a href=\"#Spring-AOP中的概念\" class=\"headerlink\" title=\"Spring AOP中的概念\"></a>Spring AOP中的概念</h1><ul>\n<li><strong>Aspect</strong>：切面，比如被@Aspect注解的类就是切面，可以在切面中去定义Pointcut、advice等等</li>\n<li><strong>Join point</strong>：连接点，表示一个程序在执行过程中的一个点，比如一个方法的运行，比如一个异常的处理。在Spring AOP中，一个连接点通常表示一个方法的执行。</li>\n<li><strong>Advice</strong>：通知，表示在一个特定连接点上所采取的动作。</li>\n<li><strong>Pointcut</strong>：切点，用来匹配一个或多个连接点，Advice与切点表达式时关联在一起的，Advice将会执行在和切点表达式所匹配的连接点上</li>\n<li><strong>Introduction</strong>：可以使用@DeclareParents来给所匹配的类添加一个接口，并指定一个默认实现</li>\n<li><strong>Target object</strong>：目标对象，被代理对象</li>\n<li><strong>AOP proxy</strong>：代理工厂，用来创建代理对象的。在Spring Framework中，要么是JDK动态代理，要么是CGLIB代理</li>\n<li><strong>Weaving</strong>：织入，表示创建代理对象的动作，这个动作Aspejctij发生在编译时期，Spring AOP在运行时</li>\n</ul>\n<h1 id=\"实现方式（动态代理）\"><a href=\"#实现方式（动态代理）\" class=\"headerlink\" title=\"实现方式（动态代理）\"></a>实现方式（动态代理）<sunfy-line></h1><p>站内文章：</p>\n<p>web访问：<a href=\"/2020/08/11/resource-designpattern-structure-proxy/\">java设计模式之动态代理实现与原理详细分析</a></p>\n<p>文章中介绍了什么是代理模式、常见的代理模式的类型、动态代理的原理、以及在Spring AOP中的应用</p>\n<p>我们先回顾下上述文章中说到的Spring AOP在源码中的体现</p>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><p>Spring AOP 解析切面源码入口 <code>@EnableAspectJAutoProxy</code> —&gt; <code>AspectJAutoProxyRegistrar</code> —&gt;<code>AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</code><br>通过上面的注册一个Bean定义 <code>AnnotationAwareAspectJAutoProxyCreator.class</code><br>查看注册的bean的结构，可以知道注册的是一个bean的后置处理器；此处就是ioc的一个扩展点。</p>\n<p><img src=\"../../../../img/SpringAOP底层原理/image-20210812145750817-16348060527742.png\" alt=\"image-20210812145750817\"></p>\n<p>接下来我们重点看几个重要的类</p>\n<h1 id=\"ProxyFactory\"><a href=\"#ProxyFactory\" class=\"headerlink\" title=\"ProxyFactory\"></a>ProxyFactory</h1><p>这个就是应用代理技术，Spring经过封装后，生成的代理工厂类，会由它来负责创建具体的代理类。</p>\n<p><img src=\"../../../../img/SpringAOP底层原理/image-20211021165948587.png\" alt=\"image-20211021165948587\"></p>\n<p>通过<code>ProxyFactory</code>，我们在使用过程中不需要去关注到底使用cglib，还是jdk动态代理，Spring实现的PorxyFactory会帮助我们去判断通过何种方式生成代理类</p>\n<ul>\n<li>如果被代理类实现了接口，那么底层就会自动使用jdk动态代理，生成对应接口类型的代理对象</li>\n<li>如果被代理类没有实现接口，那么就选择cglib技术</li>\n</ul>\n<h1 id=\"Advice\"><a href=\"#Advice\" class=\"headerlink\" title=\"Advice\"></a>Advice</h1><p>五个注解，表示代理逻辑以及执行时机</p>\n<ul>\n<li>@Before：接口MethodBeforeAdvice，继承了接口BeforeAdvice</li>\n<li>@AfterReturning：接口AfterReturningAdvice</li>\n<li>@AfterThrowing：接口ThrowsAdvice</li>\n<li>@After：接口AfterAdvice</li>\n<li>@Around：接口AfterAdvice</li>\n</ul>\n<p>Spring会把五个注解解析为对应的Advice类：</p>\n<ul>\n<li>@Before：AspectJMethodBeforeAdvice，实际上就是一个MethodBeforeAdvice</li>\n<li>@AfterReturning：AspectJAfterReturningAdvice，实际上就是一个AfterReturningAdvice</li>\n<li>@AfterThrowing：AspectJAfterThrowingAdvice，实际上就是一个MethodInterceptor</li>\n<li>@After：AspectJAfterAdvice，实际上就是一个MethodInterceptor</li>\n<li>@Around：AspectJAroundAdvice，实际上就是一个MethodInterceptor</li>\n</ul>\n","more":"<h1 id=\"理解Spring-AOP\"><a href=\"#理解Spring-AOP\" class=\"headerlink\" title=\"理解Spring AOP\"></a>理解Spring AOP</h1><p>提到AOP那我们自然会想到初学java时经常提到的OOP，OOP表示的是面向对象编程，是一种编程思想。AOP则是面向切面编程，同样也是一种编程思想。从Spring作为一个框架的角度来说，提供了一整套的面向切面编程的机制，让我们更容易进行开发，这套机制在Spring中就称为Spring AOP。</p>\n<p>知道了AOP是一种编程思想，那又是一种什么样的编程思想呢？</p>\n<p><strong>AOP</strong>：将程序中的交叉业务（日志、安全、事务等），封装成一个切面，然后注入到目标对象的具体逻辑中去。AOP可以对某个对象或某些对象的功能进行增强，具体来说，对某个对象的方法进行增强，可以在执行方法之余额外做一些事情，可以在方法前、方法后等。</p>\n<h1 id=\"Spring-AOP中的概念\"><a href=\"#Spring-AOP中的概念\" class=\"headerlink\" title=\"Spring AOP中的概念\"></a>Spring AOP中的概念</h1><ul>\n<li><strong>Aspect</strong>：切面，比如被@Aspect注解的类就是切面，可以在切面中去定义Pointcut、advice等等</li>\n<li><strong>Join point</strong>：连接点，表示一个程序在执行过程中的一个点，比如一个方法的运行，比如一个异常的处理。在Spring AOP中，一个连接点通常表示一个方法的执行。</li>\n<li><strong>Advice</strong>：通知，表示在一个特定连接点上所采取的动作。</li>\n<li><strong>Pointcut</strong>：切点，用来匹配一个或多个连接点，Advice与切点表达式时关联在一起的，Advice将会执行在和切点表达式所匹配的连接点上</li>\n<li><strong>Introduction</strong>：可以使用@DeclareParents来给所匹配的类添加一个接口，并指定一个默认实现</li>\n<li><strong>Target object</strong>：目标对象，被代理对象</li>\n<li><strong>AOP proxy</strong>：代理工厂，用来创建代理对象的。在Spring Framework中，要么是JDK动态代理，要么是CGLIB代理</li>\n<li><strong>Weaving</strong>：织入，表示创建代理对象的动作，这个动作Aspejctij发生在编译时期，Spring AOP在运行时</li>\n</ul>\n<h1 id=\"实现方式（动态代理）\"><a href=\"#实现方式（动态代理）\" class=\"headerlink\" title=\"实现方式（动态代理）\"></a>实现方式（动态代理）<sunfy-line></h1><p>站内文章：</p>\n<p>web访问：<a href=\"/2020/08/11/resource-designpattern-structure-proxy/\">java设计模式之动态代理实现与原理详细分析</a></p>\n<p>文章中介绍了什么是代理模式、常见的代理模式的类型、动态代理的原理、以及在Spring AOP中的应用</p>\n<p>我们先回顾下上述文章中说到的Spring AOP在源码中的体现</p>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><p>Spring AOP 解析切面源码入口 <code>@EnableAspectJAutoProxy</code> —&gt; <code>AspectJAutoProxyRegistrar</code> —&gt;<code>AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</code><br>通过上面的注册一个Bean定义 <code>AnnotationAwareAspectJAutoProxyCreator.class</code><br>查看注册的bean的结构，可以知道注册的是一个bean的后置处理器；此处就是ioc的一个扩展点。</p>\n<p><img src=\"../../../../img/SpringAOP底层原理/image-20210812145750817-16348060527742.png\" alt=\"image-20210812145750817\"></p>\n<p>接下来我们重点看几个重要的类</p>\n<h1 id=\"ProxyFactory\"><a href=\"#ProxyFactory\" class=\"headerlink\" title=\"ProxyFactory\"></a>ProxyFactory</h1><p>这个就是应用代理技术，Spring经过封装后，生成的代理工厂类，会由它来负责创建具体的代理类。</p>\n<p><img src=\"../../../../img/SpringAOP底层原理/image-20211021165948587.png\" alt=\"image-20211021165948587\"></p>\n<p>通过<code>ProxyFactory</code>，我们在使用过程中不需要去关注到底使用cglib，还是jdk动态代理，Spring实现的PorxyFactory会帮助我们去判断通过何种方式生成代理类</p>\n<ul>\n<li>如果被代理类实现了接口，那么底层就会自动使用jdk动态代理，生成对应接口类型的代理对象</li>\n<li>如果被代理类没有实现接口，那么就选择cglib技术</li>\n</ul>\n<h1 id=\"Advice\"><a href=\"#Advice\" class=\"headerlink\" title=\"Advice\"></a>Advice</h1><p>五个注解，表示代理逻辑以及执行时机</p>\n<ul>\n<li>@Before：接口MethodBeforeAdvice，继承了接口BeforeAdvice</li>\n<li>@AfterReturning：接口AfterReturningAdvice</li>\n<li>@AfterThrowing：接口ThrowsAdvice</li>\n<li>@After：接口AfterAdvice</li>\n<li>@Around：接口AfterAdvice</li>\n</ul>\n<p>Spring会把五个注解解析为对应的Advice类：</p>\n<ul>\n<li>@Before：AspectJMethodBeforeAdvice，实际上就是一个MethodBeforeAdvice</li>\n<li>@AfterReturning：AspectJAfterReturningAdvice，实际上就是一个AfterReturningAdvice</li>\n<li>@AfterThrowing：AspectJAfterThrowingAdvice，实际上就是一个MethodInterceptor</li>\n<li>@After：AspectJAfterAdvice，实际上就是一个MethodInterceptor</li>\n<li>@Around：AspectJAroundAdvice，实际上就是一个MethodInterceptor</li>\n</ul>\n","next":{"title":"SpringBoot自动装配原理","path":"api/articles/resource-Spring-SpringBoot-SpringBoot自动装配原理.json","image":"/img/header_img/spring/springBootAuto.png","num_read":42,"num_like":853,"num_collection":233,"num_comments":113},"prev":null,"categories":[{"name":"Spring全家桶","path":"api/categories/Spring全家桶.json","pathContent":"api/categories/Spring全家桶","description":"更快、更容易、更安全","cover":"https://sunfy9.gitee.io/project/photo/project/spring.png"}],"tags":[{"name":"Spring","path":"api/tags/Spring.json","pathContent":"api/tags/Spring","description":"更快、更容易、更安全","cover":"https://sunfy9.gitee.io/project/photo/project/spring.png"}]}