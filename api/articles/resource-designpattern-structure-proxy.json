{"title":"java设计模式之动态代理实现与原理详细分析","num_read":1351,"num_like":542,"num_collection":726,"num_comments":59,"slug":"resource-designpattern-structure-proxy","date":"2020-08-10T16:00:00.000Z","img":"/img/header_img/Design/Proxy.PNG","_id":"clhrbp2ba005ho5lgczftfvdk","project":"designPattern","site":{"data":{}},"updated":"2022-09-20T01:37:41.584Z","author":"Sunfy","comments":true,"path":"api/articles/resource-designpattern-structure-proxy.json","webPath":"2020/08/11/resource-designpattern-structure-proxy/","permalink":"https://sunfy9.gitee.io/2020/08/11/resource-designpattern-structure-proxy/","excerpt":null,"covers":["../../../../img/proxy/1085268-20170409105440082-1652546649.jpg","../../../../img/proxy/image-20210811151144091.png","../../../../img/proxy/image-20210811151505752.png","../../../../img/proxy/image-20210811154642175.png","../../../../img/proxy/985411-20180111010236347-2008865961.png","../../../../img/proxy/985411-20180111010415222-40358282.png","../../../../img/proxy/image-20210812145750817.png","../../../../img/proxy/image-20210812150906240.png","../../../../img/proxy/image-20210812151926259.png"],"keywords":"sunfy, hexo-theme-snail","content":"<p>关于Java中的动态代理，我们首先需要了解的是一种常用的设计模式—代理模式，而对于代理，根据创建代理类的时间点，又可以分为静态代理和动态代理。</p>\n<h1 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h1><p><strong>代理模式的定义：</strong>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。</p>\n<p>代理模式是常用的java设计模式，他的特征是代理类与委托类有同样的接口，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。代理类与委托类之间通常会存在关联关系，一个代理类的对象与一个委托类的对象关联，代理类的对象本身并不真正实现服务，而是通过调用委托类的对象的相关方法，来提供特定的服务。简单的说就是，我们在访问实际对象时，是通过代理对象来访问的，代理模式就是在访问实际对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途。</p>\n<h1 id=\"为什么要用代理模式？\"><a href=\"#为什么要用代理模式？\" class=\"headerlink\" title=\"为什么要用代理模式？\"></a>为什么要用代理模式？<sunfy-line></h1><ul>\n<li><strong>中介隔离作用：</strong>在某些情况下，一个客户类不想或者不能直接引用一个委托对象，而代理类对象可以在客户类和委托对象之间起到中介的作用，其特征是代理类和委托类实现相同的接口。</li>\n<li><strong>开闭原则，增加功能：</strong>代理类除了是客户类和委托类的中介之外，我们还可以通过给代理类增加额外的功能来扩展委托类的功能，这样做我们只需要修改代理类而不需要再修改委托类，符合代码设计的开闭原则。代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后对返回结果的处理等。代理类本身并不真正实现服务，而是同过调用委托类的相关方法，来提供特定的服务。真正的业务功能还是由委托类来实现，但是可以在业务功能执行的前后加入一些公共的服务。例如我们想给项目加入缓存、日志这些功能，我们就可以使用代理类来完成，而没必要打开已经封装好的委托类。</li>\n</ul>\n<p>代理模式结构图（图片来自《大话设计模式》）：</p>\n<p><img src=\"../../../../img/proxy/1085268-20170409105440082-1652546649.jpg\" alt=\"img\">                             </p>\n<h1 id=\"有哪几种代理模式？\"><a href=\"#有哪几种代理模式？\" class=\"headerlink\" title=\"有哪几种代理模式？\"></a>有哪几种代理模式？</h1><p>​    我们有多种不同的方式来实现代理。如果按照代理创建的时期来进行分类的话， 可以分为两种：静态代理、动态代理。静态代理是由程序员创建或特定工具自动生成源代码，在对其编译。在程序员运行之前，代理类.class文件就已经被创建了。动态代理是在程序运行时通过反射机制动态创建的。</p>\n<ul>\n<li><p>静态代理 </p>\n<ul>\n<li>弊端：需要为每一个被代理的类创建一个“代理类”，虽然这种方式可以实现，但是成本太高</li>\n</ul>\n</li>\n<li><p>动态代理（AOP的底层是用的动态）</p>\n</li>\n<li><ul>\n<li>jdk动态代理 ：必须保证被代理的类实现了接口，</li>\n<li>cglib动态代理 ：不需要接口，</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h1><h2 id=\"简单实现\"><a href=\"#简单实现\" class=\"headerlink\" title=\"简单实现\"></a>简单实现</h2><p>根据上面代理模式的类图，来写一个简单的静态代理的例子。我这儿举一个比较粗糙的例子，假如一个班的同学要向老师交班费，但是都是通过班长把自己的钱转交给老师。这里，班长就是代理学生上交班费，班长就是学生的代理。</p>\n<p> 首先，我们创建一个Person接口。这个接口就是学生（被代理类），和班长（代理类）的公共接口，他们都有上交班费的行为。这样，学生上交班费就可以让班长来代理执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建Person接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//上交班费</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">giveMoney</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Student类实现Person接口。Student可以具体实施上交班费的动作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">giveMoney</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       System.out.println(name + <span class=\"string\">\"上交班费50元\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>StudentsProxy类，这个类也实现了Person接口，但是还另外持有一个学生类对象，由于实现了Peson接口，同时持有一个学生对象，那么他可以代理学生类对象执行上交班费（执行giveMoney()方法）行为。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 学生代理类，也实现了Person接口，保存一个学生实体，这样既可以代理学生产生行为</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentsProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//被代理的学生</span></span><br><span class=\"line\">    Student stu;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StudentsProxy</span><span class=\"params\">(Person stu)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只代理学生对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stu.getClass() == Student<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.stu = (Student)stu;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//代理上交班费，调用被代理学生的上交班费行为</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">giveMoney</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        stu.giveMoney();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面测试一下，看如何使用代理模式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//被代理的学生张三，他的班费上交有代理对象monitor（班长）完成</span></span><br><span class=\"line\">        Person zhangsan = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//生成代理对象，并将张三传给代理对象</span></span><br><span class=\"line\">        Person monitor = <span class=\"keyword\">new</span> StudentsProxy(zhangsan);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//班长代理上交班费</span></span><br><span class=\"line\">        monitor.giveMoney();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><img src=\"../../../../img/proxy/image-20210811151144091.png\" alt=\"image-20210811151144091\"></p>\n<p>这里并没有直接通过张三（被代理对象）来执行上交班费的行为，而是通过班长（代理对象）来代理执行了。这就是代理模式。</p>\n<p>代理模式最主要的就是有<strong>一个公共接口（Person），一个具体的类（Student），一个代理类（StudentsProxy）</strong>,代理类持有具体类的实例，代为执行具体类实例方法。上面说到，代理模式就是在访问实际对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途。这里的间接性就是指不直接调用实际对象的方法，那么我们在代理过程中就可以加上一些其他用途。就这个例子来说，加入班长在帮张三上交班费之前想要先反映一下张三最近学习有很大进步，通过代理模式很轻松就能办到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentsProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//被代理的学生</span></span><br><span class=\"line\">    Student stu;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StudentsProxy</span><span class=\"params\">(Person stu)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只代理学生对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stu.getClass() == Student<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.stu = (Student)stu;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//代理上交班费，调用被代理学生的上交班费行为</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">giveMoney</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"张三最近学习有进步！\"</span>);</span><br><span class=\"line\">        stu.giveMoney();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><img src=\"../../../../img/proxy/image-20210811151505752.png\" alt=\"image-20210811151505752\"></p>\n<p>可以看到，只需要在代理类中帮张三上交班费之前，执行其他操作就可以了。这种操作，也是使用代理模式的一个很大的优点。最直白的就是在Spring中的面向切面编程（AOP），我们能在一个切点之前执行一些操作，在一个切点之后执行一些操作，这个切点就是一个个方法。这些方法所在类肯定就是被代理了，在代理过程中切入了一些其他操作。</p>\n<h1 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h1><p>代理类在程序运行时创建的代理方式被成为动态代理。 我们上面静态代理的例子中，代理类(studentProxy)是自己定义好的，在程序运行之前就已经编译完成。然而动态代理，代理类并不是在Java代码中定义的，而是在运行时根据我们在Java代码中的“指示”动态生成的。相比于静态代理， 动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类中的方法。 比如说，想要在每个代理的方法前都加上一个处理方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">giveMoney</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用被代理方法前加入处理方法</span></span><br><span class=\"line\">    beforeMethod();</span><br><span class=\"line\">    stu.giveMoney();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里只有一个giveMoney方法，就写一次beforeMethod方法，但是如果出了giveMonney还有很多其他的方法，那就需要写很多次beforeMethod方法，麻烦。那看看下面动态代理如何实现。</p>\n<h2 id=\"简单实现-1\"><a href=\"#简单实现-1\" class=\"headerlink\" title=\"简单实现\"></a>简单实现</h2><p>在java的<code>java.lang.reflect</code>包下提供了一个<code>Proxy</code>类和一个<code>InvocationHandler</code>接口，通过这个类和这个接口可以生成JDK动态代理类和动态代理对象。</p>\n<p>创建一个动态代理对象步骤，具体代码见后面：</p>\n<ul>\n<li>创建一个<code>InvocationHandler</code>对象</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个与代理对象相关联的InvocationHandler</span></span><br><span class=\"line\"> InvocationHandler stuHandler = <span class=\"keyword\">new</span> MyInvocationHandler&lt;Person&gt;(stu);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用<code>Proxy</code>类的<code>getProxyClass</code>静态方法生成一个动态代理类<code>stuProxyClass</code></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;?&gt; stuProxyClass = Proxy.getProxyClass(Person.class.getClassLoader(), new Class&lt;?&gt;[] &#123;Person.class&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>获得<code>stuProxyClass</code> 中一个带<code>InvocationHandler</code>参数的构造器constructor</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Constructor&lt;?&gt; constructor = PersonProxy.getConstructor(InvocationHandler<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过构造器<code>constructor</code>来创建一个动态实例<code>stuProxy</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person stuProxy = (Person) cons.newInstance(stuHandler);</span><br></pre></td></tr></table></figure>\n<p>就此，一个动态代理对象就创建完毕，当然，上面四个步骤可以通过<code>Proxy</code>类的<code>newProxyInstances</code>方法来简化：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个与代理对象相关联的InvocationHandler</span></span><br><span class=\"line\">InvocationHandler stuHandler = <span class=\"keyword\">new</span> MyInvocationHandler&lt;Person&gt;(stu);</span><br><span class=\"line\"><span class=\"comment\">//创建一个代理对象stuProxy，代理对象的每个执行方法都会替换执行Invocation中的invoke方法</span></span><br><span class=\"line\">Person stuProxy= (Person) Proxy.newProxyInstance(Person.class.getClassLoader(), new Class&lt;?&gt;[]&#123;Person.class&#125;, stuHandler);</span><br></pre></td></tr></table></figure>\n<p>到这里肯定都会很疑惑，这动态代理到底是如何执行的，是如何通过代理对象来执行被代理对象的方法的，先不急，我们先看看一个简单的完整的动态代理的例子。还是上面静态代理的例子，班长需要帮学生代交班费。首先是定义一个Person接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建Person接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//上交班费</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">giveMoney</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建需要被代理的实际类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">giveMoney</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//假设数钱花了一秒时间</span></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       System.out.println(name + <span class=\"string\">\"上交班费50元\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再定义一个检测方法执行时间的工具类，在任何方法执行前先调用<code>start</code>方法，执行后调用<code>finish</code>方法，就可以计算出该方法的运行时间，这也是一个最简单的方法执行时间检测工具。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MonitorUtil</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadLocal&lt;Long&gt; tl = <span class=\"keyword\">new</span> ThreadLocal&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        tl.set(System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//结束时打印耗时</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">finish</span><span class=\"params\">(String methodName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> finishTime = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(methodName + <span class=\"string\">\"方法耗时\"</span> + (finishTime - tl.get()) + <span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建<code>StuInvocationHandler</code>类，实现<code>InvocationHandler</code>接口，这个类中持有一个被代理对象的实例<code>target</code>。<code>InvocationHandler</code>中有一个<code>invoke</code>方法，所有执行代理对象的方法都会被替换成执行<code>invoke</code>方法。</p>\n<p>再在<code>invoke</code>方法中执行被代理对象<code>target</code>的相应方法。当然，在代理过程中，我们在真正执行被代理对象的方法前加入自己其他处理。这也是<code>Spring</code>中的<code>AOP</code>实现的主要原理，这里还涉及到一个很重要的关于java反射方面的基础知识。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StuInvocationHandler</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//invocationHandler持有的被代理对象</span></span><br><span class=\"line\">    T target;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StuInvocationHandler</span><span class=\"params\">(T target)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * proxy:代表动态代理对象</span></span><br><span class=\"line\"><span class=\"comment\">     * method：代表正在执行的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * args：代表调用目标方法时传入的实参</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"代理执行\"</span> +method.getName() + <span class=\"string\">\"方法\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//代理过程中插入监测方法,计算该方法耗时</span></span><br><span class=\"line\">        MonitorUtil.start();</span><br><span class=\"line\">        Object result = method.invoke(target, args);</span><br><span class=\"line\">        MonitorUtil.finish(method.getName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>做完上面的工作后，我们就可以具体来创建动态代理对象了，上面简单介绍了如何创建动态代理对象，我们使用简化的方式创建动态代理对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//创建一个实例对象，这个对象是被代理的对象</span></span><br><span class=\"line\">        Person zhangsan = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//创建一个与代理对象相关联的InvocationHandler</span></span><br><span class=\"line\">        InvocationHandler stuHandler = <span class=\"keyword\">new</span> StuInvocationHandler&lt;Person&gt;(zhangsan);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//创建一个代理对象stuProxy来代理zhangsan，代理对象的每个执行方法都会替换执行Invocation中的invoke方法</span></span><br><span class=\"line\">        Person stuProxy = (Person) Proxy.newProxyInstance(Person.class.getClassLoader(), new Class&lt;?&gt;[]&#123;Person.class&#125;, stuHandler)；</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//代理执行上交班费的方法</span></span><br><span class=\"line\">        stuProxy.giveMoney();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们执行这个<code>ProxyTest</code>类，先想一下，我们创建了一个需要被代理的学生张三，将zhangsan对象传给了stuHandler中，我们在创建代理对象stuProxy时，将stuHandler作为参数了的，上面也有说到所有执行代理对象的方法都会被替换成执行invoke方法，也就是说，最后执行的是StuInvocationHandler中的invoke方法。所以在看到下面的运行结果也就理所当然了。</p>\n<p>运行结果：</p>\n<p><img src=\"../../../../img/proxy/image-20210811154642175.png\" alt=\"image-20210811154642175\"></p>\n<p>上面说到，动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类中的方法。是因为所有被代理执行的方法，都是通过在InvocationHandler中的invoke方法调用的，所以我们只要在invoke方法中统一处理，就可以对所有被代理的方法进行相同的操作了。例如，这里的方法计时，所有的被代理对象执行的方法都会被计时，然而我只做了很少的代码量。</p>\n<p>动态代理的过程，代理对象和被代理对象的关系不像静态代理那样一目了然，清晰明了。因为动态代理的过程中，我们并没有实际看到代理类，也没有很清晰地的看到代理类的具体样子，而且动态代理中被代理对象和代理对象是通过InvocationHandler来完成的代理过程的，其中具体是怎样操作的，为什么代理对象执行的方法都会通过InvocationHandler中的invoke方法来执行。带着这些问题，我们就需要对java动态代理的源码进行简要的分析，弄清楚其中缘由。</p>\n<h1 id=\"动态代理原理分析\"><a href=\"#动态代理原理分析\" class=\"headerlink\" title=\"动态代理原理分析\"></a>动态代理原理分析</h1><h2 id=\"Java动态代理创建出来的动态代理类\"><a href=\"#Java动态代理创建出来的动态代理类\" class=\"headerlink\" title=\"Java动态代理创建出来的动态代理类\"></a>Java动态代理创建出来的动态代理类</h2><p>上面我们利用Proxy类的newProxyInstance方法创建了一个动态代理对象，查看该方法的源码，发现它只是封装了创建动态代理类的步骤(红色标准部分)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                      Class&lt;?&gt;[] interfaces,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                      InvocationHandler h)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> IllegalArgumentException</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Objects.requireNonNull(h);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sm != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Look up or generate the designated proxy class.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Invoke its constructor with the designated invocation handler.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sm != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> InvocationHandler ih = h;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class=\"line\">            AccessController.doPrivileged(<span class=\"keyword\">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Void <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    cons.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cons.newInstance(<span class=\"keyword\">new</span> Object[]&#123;h&#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e.toString(), e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">        Throwable t = e.getCause();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t <span class=\"keyword\">instanceof</span> RuntimeException) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> (RuntimeException) t;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(t.toString(), t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e.toString(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实，我们最应该关注的是 Class&lt;?&gt; cl = getProxyClass0(loader, intfs);这句，这里产生了代理类，后面代码中的构造器也是通过这里产生的类来获得，可以看出，这个类的产生就是整个动态代理的关键，由于是动态生成的类文件，我这里不具体进入分析如何产生的这个类文件，只需要知道这个类文件时缓存在java虚拟机中的，我们可以通过下面的方法将其打印到文件里面，一睹真容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>[] classFile = ProxyGenerator.generateProxyClass(<span class=\"string\">\"$Proxy0\"</span>, Student<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getInterfaces</span>())</span>;</span><br><span class=\"line\">String path = <span class=\"string\">\"G:/javacode/javase/Test/bin/proxy/StuProxy.class\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span>(FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(path)) &#123;</span><br><span class=\"line\">    fos.write(classFile);</span><br><span class=\"line\">    fos.flush();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"代理类class文件写入成功\"</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   System.out.println(<span class=\"string\">\"写文件错误\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对这个class文件进行反编译，我们看看jdk为我们生成了什么样的内容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> proxy.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> $<span class=\"title\">Proxy0</span> <span class=\"keyword\">extends</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m1;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m2;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m3;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m0;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  *注意这里是生成代理类的构造方法，方法参数为InvocationHandler类型，看到这，是不是就有点明白</span></span><br><span class=\"line\"><span class=\"comment\">  *为何代理对象调用方法都是执行InvocationHandler中的invoke方法，而InvocationHandler又持有一个</span></span><br><span class=\"line\"><span class=\"comment\">  *被代理对象的实例，不禁会想难道是....？ 没错，就是你想的那样。</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  *super(paramInvocationHandler)，是调用父类Proxy的构造方法。</span></span><br><span class=\"line\"><span class=\"comment\">  *父类持有：protected InvocationHandler h;</span></span><br><span class=\"line\"><span class=\"comment\">  *Proxy构造方法：</span></span><br><span class=\"line\"><span class=\"comment\">  *    protected Proxy(InvocationHandler h) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  *         Objects.requireNonNull(h);</span></span><br><span class=\"line\"><span class=\"comment\">  *         this.h = h;</span></span><br><span class=\"line\"><span class=\"comment\">  *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> $Proxy0(InvocationHandler paramInvocationHandler)</span><br><span class=\"line\">    <span class=\"keyword\">throws</span> </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(paramInvocationHandler);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//这个静态块本来是在最后的，我把它拿到前面来，方便描述</span></span><br><span class=\"line\">   <span class=\"keyword\">static</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">//看看这儿静态块儿里面有什么，是不是找到了giveMoney方法。请记住giveMoney通过反射得到的名字m3，其他的先不管</span></span><br><span class=\"line\">      m1 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"equals\"</span>, <span class=\"keyword\">new</span> Class[] &#123; Class.forName(<span class=\"string\">\"java.lang.Object\"</span>) &#125;);</span><br><span class=\"line\">      m2 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"toString\"</span>, <span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      m3 = Class.forName(<span class=\"string\">\"proxy.Person\"</span>).getMethod(<span class=\"string\">\"giveMoney\"</span>, <span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      m0 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"hashCode\"</span>, <span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (NoSuchMethodException localNoSuchMethodException)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchMethodError(localNoSuchMethodException.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (ClassNotFoundException localClassNotFoundException)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoClassDefFoundError(localClassNotFoundException.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * </span></span><br><span class=\"line\"><span class=\"comment\">  *这里调用代理对象的giveMoney方法，直接就调用了InvocationHandler中的invoke方法，并把m3传了进去。</span></span><br><span class=\"line\"><span class=\"comment\">  *this.h.invoke(this, m3, null);这里简单，明了。</span></span><br><span class=\"line\"><span class=\"comment\">  *来，再想想，代理对象持有一个InvocationHandler对象，InvocationHandler对象持有一个被代理的对象，</span></span><br><span class=\"line\"><span class=\"comment\">  *再联系到InvacationHandler中的invoke方法。嗯，就是这样。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">giveMoney</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> </span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.h.invoke(<span class=\"keyword\">this</span>, m3, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Error|RuntimeException localError)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> localError;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable localThrowable)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(localThrowable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//注意，这里为了节省篇幅，省去了toString，hashCode、equals方法的内容。原理和giveMoney方法一毛一样。</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>jdk为我们的生成了一个叫$Proxy0（这个名字后面的0是编号，有多个代理类会一次递增）的代理类，这个类文件时放在内存中的，我们在创建代理对象时，就是通过反射获得这个类的构造方法，然后创建的代理实例。通过对这个生成的代理类源码的查看，我们很容易能看出，动态代理实现的具体过程。</p>\n<p>我们可以对<code>InvocationHandler</code>看做一个中介类，中介类持有一个被代理对象，在invoke方法中调用了被代理对象的相应方法。通过聚合方式持有被代理对象的引用，把外部对invoke的调用最终都转为对被代理对象的调用。</p>\n<p>代理类调用自己方法时，通过自身持有的中介类对象来调用中介类对象的invoke方法，从而达到代理执行被代理对象的方法。也就是说，动态代理通过中介类实现了具体的代理功能。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>生成的代理类：$Proxy0 extends Proxy implements Person，我们看到代理类继承了Proxy类，所以也就决定了java动态代理只能对接口进行代理，Java的继承机制注定了这些动态代理类们无法实现对class的动态代理。<br>上面的动态代理的例子，其实就是AOP的一个简单实现了，在目标对象的方法执行之前和执行之后进行了处理，对方法耗时统计。Spring的AOP实现其实也是用了Proxy和<code>InvocationHandler</code>这两个东西的。</p>\n<h1 id=\"Spring-AOP中的使用\"><a href=\"#Spring-AOP中的使用\" class=\"headerlink\" title=\"Spring AOP中的使用\"></a>Spring AOP中的使用</h1><p><strong>在spring容器中，如果有接口，那么会使用jdk自带的动态代理，如果没有接口，那么会使用cglib的动态代理。动态代理的实现原理，</strong></p>\n<h2 id=\"Spring的两种动态代理：JDK和Cglib-的区别和实现\"><a href=\"#Spring的两种动态代理：JDK和Cglib-的区别和实现\" class=\"headerlink\" title=\"Spring的两种动态代理：JDK和Cglib 的区别和实现\"></a>Spring的两种动态代理：JDK和Cglib 的区别和实现</h2><h3 id=\"原理区别\"><a href=\"#原理区别\" class=\"headerlink\" title=\"原理区别\"></a>原理区别</h3><p>java动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用<code>InvokeHandler</code>来处理。而<code>cglib</code>动态代理是利用<code>asm</code>开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。</p>\n<ol>\n<li>如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP </li>\n<li>如果目标对象实现了接口，可以强制使用CGLIB实现AOP </li>\n<li>如果目标对象没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和CGLIB之间转换</li>\n</ol>\n<p>如何强制使用CGLIB实现AOP？</p>\n<ul>\n<li>添加CGLIB库，SPRING_HOME/cglib/*.jar</li>\n<li>在spring配置文件中加入<aop:aspectj-autoproxy proxy-target-class=\"true\"/></li>\n</ul>\n<p>JDK动态代理和CGLIB字节码生成的区别？</p>\n<ol>\n<li>JDK动态代理只能对实现了接口的类生成代理，而不能针对类</li>\n<li>CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法，因为是继承，所以该类或方法最好不要声明成final </li>\n<li>CGLIB动态代理中的方法调用本类的其他方法，会重新调用本类的动态代理类，然后再由动态代理类调用相应的方法，jdk动态代理则不会。（标记@Configuration的类，就会创建CGLIB动态代理，每次调用都会来到类似一个路由类（getIndex）的文件，再去选择动态代理，而JDK动态代理则会直接调用，配置类是需要从IOC容器中去获取的，以保证类是单例的）</li>\n</ol>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>用户管理接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lf.shejimoshi.proxy.entity;</span><br><span class=\"line\"><span class=\"comment\">//用户管理接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//新增用户抽象方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addUser</span><span class=\"params\">(String userName,String password)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//删除用户抽象方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delUser</span><span class=\"params\">(String userName)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用户管理接口实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lf.shejimoshi.proxy.entity;</span><br><span class=\"line\"><span class=\"comment\">//用户管理实现类,实现用户管理接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserManagerImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserManager</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//重写新增用户方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addUser</span><span class=\"params\">(String userName, String password)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"调用了新增的方法！\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"传入参数为 userName: \"</span>+userName+<span class=\"string\">\" password: \"</span>+password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重写删除用户方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delUser</span><span class=\"params\">(String userName)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"调用了删除的方法！\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"传入参数为 userName: \"</span>+userName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lf.shejimoshi.proxy.jdk;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lf.shejimoshi.proxy.entity.UserManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lf.shejimoshi.proxy.entity.UserManagerImpl;</span><br><span class=\"line\"><span class=\"comment\">//JDK动态代理实现InvocationHandler接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdkProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target ;<span class=\"comment\">//需要代理的目标对象</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"JDK动态代理，监听开始！\"</span>);</span><br><span class=\"line\">        Object result = method.invoke(target, args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"JDK动态代理，监听结束！\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//定义获取代理对象方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">getJDKProxy</span><span class=\"params\">(Object targetObject)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//为目标对象target赋值</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = targetObject;</span><br><span class=\"line\">        <span class=\"comment\">//JDK动态代理只能针对实现了接口的类进行代理，newProxyInstance 函数所需参数就可看出</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(targetObject.getClass().getClassLoader(), targetObject.getClass().getInterfaces(), <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JdkProxy jdkProxy = <span class=\"keyword\">new</span> JdkProxy();<span class=\"comment\">//实例化JDKProxy对象</span></span><br><span class=\"line\">        UserManager user = (UserManager) jdkProxy.getJDKProxy(<span class=\"keyword\">new</span> UserManagerImpl());<span class=\"comment\">//获取代理对象</span></span><br><span class=\"line\">        user.addUser(<span class=\"string\">\"admin\"</span>, <span class=\"string\">\"123123\"</span>);<span class=\"comment\">//执行新增方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JDK动态代理运行结果</p>\n<p><img src=\"../../../../img/proxy/985411-20180111010236347-2008865961.png\" alt=\"img\"></p>\n<h3 id=\"Cglib动态代理\"><a href=\"#Cglib动态代理\" class=\"headerlink\" title=\"Cglib动态代理\"></a>Cglib动态代理</h3><p>（需要导入两个jar包，<code>asm-5.2.jar,cglib-3.2.5.jar</code>。版本自行选择）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lf.shejimoshi.proxy.cglib;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lf.shejimoshi.proxy.entity.UserManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lf.shejimoshi.proxy.entity.UserManagerImpl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Cglib动态代理，实现MethodInterceptor接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;<span class=\"comment\">//需要代理的目标对象</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//重写拦截方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] arr, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Cglib动态代理，监听开始！\"</span>);</span><br><span class=\"line\">        Object invoke = method.invoke(target, arr);<span class=\"comment\">//方法执行，参数：target 目标对象 arr参数数组</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Cglib动态代理，监听结束！\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> invoke;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//定义获取代理对象方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getCglibProxy</span><span class=\"params\">(Object objectTarget)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//为目标对象target赋值</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = objectTarget;</span><br><span class=\"line\">        Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        <span class=\"comment\">//设置父类,因为Cglib是针对指定的类生成一个子类，所以需要指定父类</span></span><br><span class=\"line\">        enhancer.setSuperclass(objectTarget.getClass());</span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">this</span>);<span class=\"comment\">// 设置回调 </span></span><br><span class=\"line\">        Object result = enhancer.create();<span class=\"comment\">//创建并返回代理对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        CglibProxy cglib = <span class=\"keyword\">new</span> CglibProxy();<span class=\"comment\">//实例化CglibProxy对象</span></span><br><span class=\"line\">        UserManager user =  (UserManager) cglib.getCglibProxy(<span class=\"keyword\">new</span> UserManagerImpl());<span class=\"comment\">//获取代理对象</span></span><br><span class=\"line\">        user.delUser(<span class=\"string\">\"admin\"</span>);<span class=\"comment\">//执行删除方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Cglib动态代理运行结果</p>\n<p><img src=\"../../../../img/proxy/985411-20180111010415222-40358282.png\" alt=\"img\"></p>\n<p>Spring中在创建Bean的时候，调用初始化之后的那个<code>BeanPostProcessor</code>，就会拿到之前所有解析得到的advisors，循环和当前的bean做配对，配对上就需要创建动态代理。（此处采用了责任链的模式进行递归调用）</p>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><p>Spring AOP 解析切面源码入口 <code>@EnableAspectJAutoProxy</code> —&gt;  <code>AspectJAutoProxyRegistrar</code>  —&gt; </p>\n<p><code>AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</code> </p>\n<p>通过上面的注册一个Bean定义 <code>AnnotationAwareAspectJAutoProxyCreator.class</code></p>\n<p>查看注册的bean的结构，可以知道注册的是一个bean的后置处理器；此处就是ioc的一个扩展点。</p>\n<p><img src=\"../../../../img/proxy/image-20210812145750817.png\" alt=\"image-20210812145750817\"></p>\n<p><img src=\"../../../../img/proxy/image-20210812150906240.png\" alt=\"image-20210812150906240\"></p>\n<p>从源码debug信息来看，AOP的切入堆栈信息，可以发现在创建bean的时候就通过bean的后置处理器进行解析生成代理类</p>\n<p><img src=\"../../../../img/proxy/image-20210812151926259.png\" alt=\"image-20210812151926259\"></p>\n<p>注解解析顺序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pointcut</span>, <span class=\"meta\">@Around</span>, <span class=\"meta\">@Before</span>, <span class=\"meta\">@After</span>, <span class=\"meta\">@AfterReturning</span>, <span class=\"meta\">@AfterThrowing</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"AOP的核心概念及术语\"><a href=\"#AOP的核心概念及术语\" class=\"headerlink\" title=\"AOP的核心概念及术语\"></a>AOP的核心概念及术语</h2><ul>\n<li>切面（<code>Aspect</code>）: 指关注点模块化，这个关注点可能会横切多个对象。事务管理是企业级Java应用中有关横切关注点的例子。 在Spring AOP中，切面可以使用通用类基于模式的方式（<code>schema-based approach</code>）或者在普通类中以<code>@Aspect</code>注解（<code>@AspectJ</code> 注解方式）来实现。</li>\n<li>连接点（<code>Join point</code>）: 在程序执行过程中某个特定的点，例如某个方法调用的时间点或者处理异常的时间点。在Spring AOP中，一个连接点总是代表一个方法的执行。</li>\n<li>通知（<code>Advice</code>）: 在切面的某个特定的连接点上执行的动作。通知有多种类型，包括“around”, “before” and “after”等等。 许多AOP框架，包括Spring在内，都是以拦截器做通知模型的，并维护着一个以连接点为中心的拦截器链。</li>\n<li>切点（<code>Pointcut</code>）: 匹配连接点的断言。通知和切点表达式相关联，并在满足这个切点的连接点上运行（例如，当执行某个特定名称的方法时）。切点表达式如何和连接点匹配是AOP的核心：Spring默认使用<code>AspectJ</code>切点语义。</li>\n<li>引入（<code>Introduction</code>）: 声明额外的方法或者某个类型的字段。Spring允许引入新的接口（以及一个对应的实现）到任何被通知的对象上。例如，可以使用引入来使bean实现 <code>IsModified</code>接口， 以便简化缓存机制（在<code>AspectJ</code>社区，引入也被称为内部类型声明（inter））。</li>\n<li>目标对象（<code>Target object</code>）: 被一个或者多个切面所通知的对象。也被称作被通知（advised）对象。既然Spring AOP是通过运行时代理实现的，那么这个对象永远是一个被代理（proxied）的对象。</li>\n<li>AOP代理（<code>AOP proxy</code>）:AOP框架创建的对象，用来实现切面契约（aspect contract）（包括通知方法执行等功能）。在Spring中，AOP代理可以是JDK动态代理或CGLIB代理。</li>\n<li>织入（<code>Weaving</code>）: 把切面连接到其它的应用程序类型或者对象上，并创建一个被被通知的对象的过程。这个过程可以在编译时（例如使用<code>AspectJ</code>编译器）、类加载时或运行时中完成。 Spring和其他纯Java AOP框架一样，是在运行时完成织入的。</li>\n</ul>\n<h2 id=\"AOP的通知类型\"><a href=\"#AOP的通知类型\" class=\"headerlink\" title=\"AOP的通知类型\"></a>AOP的通知类型</h2><ul>\n<li>前置通知（Before advice）: 在连接点之前运行但无法阻止执行流程进入连接点的通知（除非它引发异常）。</li>\n<li>后置返回通知（After returning advice）:在连接点正常完成后执行的通知（例如，当方法没有抛出任何异常并正常返回时）。</li>\n<li>后置异常通知（After throwing advice）: 在方法抛出异常退出时执行的通知。</li>\n<li>后置通知（总会执行）（After (finally) advice）: 当连接点退出的时候执行的通知（无论是正常返回还是异常退出）。</li>\n<li>环绕通知（Around Advice）:环绕连接点的通知，例如方法调用。这是最强大的一种通知类型，。环绕通知可以在方法调用前后完成自定义的行为。它可以选择是否继续执行连接点或直接返回自定义的返回值又或抛出异常将执行结束。</li>\n</ul>\n<h2 id=\"AOP的应用场景\"><a href=\"#AOP的应用场景\" class=\"headerlink\" title=\"AOP的应用场景\"></a>AOP的应用场景</h2><ul>\n<li>日志管理</li>\n<li>权限认证</li>\n<li>安全检查</li>\n<li>事务控制</li>\n</ul>\n","more":"<p>关于Java中的动态代理，我们首先需要了解的是一种常用的设计模式—代理模式，而对于代理，根据创建代理类的时间点，又可以分为静态代理和动态代理。</p>\n<h1 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h1><p><strong>代理模式的定义：</strong>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。</p>\n<p>代理模式是常用的java设计模式，他的特征是代理类与委托类有同样的接口，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。代理类与委托类之间通常会存在关联关系，一个代理类的对象与一个委托类的对象关联，代理类的对象本身并不真正实现服务，而是通过调用委托类的对象的相关方法，来提供特定的服务。简单的说就是，我们在访问实际对象时，是通过代理对象来访问的，代理模式就是在访问实际对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途。</p>\n<h1 id=\"为什么要用代理模式？\"><a href=\"#为什么要用代理模式？\" class=\"headerlink\" title=\"为什么要用代理模式？\"></a>为什么要用代理模式？<sunfy-line></h1><ul>\n<li><strong>中介隔离作用：</strong>在某些情况下，一个客户类不想或者不能直接引用一个委托对象，而代理类对象可以在客户类和委托对象之间起到中介的作用，其特征是代理类和委托类实现相同的接口。</li>\n<li><strong>开闭原则，增加功能：</strong>代理类除了是客户类和委托类的中介之外，我们还可以通过给代理类增加额外的功能来扩展委托类的功能，这样做我们只需要修改代理类而不需要再修改委托类，符合代码设计的开闭原则。代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后对返回结果的处理等。代理类本身并不真正实现服务，而是同过调用委托类的相关方法，来提供特定的服务。真正的业务功能还是由委托类来实现，但是可以在业务功能执行的前后加入一些公共的服务。例如我们想给项目加入缓存、日志这些功能，我们就可以使用代理类来完成，而没必要打开已经封装好的委托类。</li>\n</ul>\n<p>代理模式结构图（图片来自《大话设计模式》）：</p>\n<p><img src=\"../../../../img/proxy/1085268-20170409105440082-1652546649.jpg\" alt=\"img\">                             </p>\n<h1 id=\"有哪几种代理模式？\"><a href=\"#有哪几种代理模式？\" class=\"headerlink\" title=\"有哪几种代理模式？\"></a>有哪几种代理模式？</h1><p>​    我们有多种不同的方式来实现代理。如果按照代理创建的时期来进行分类的话， 可以分为两种：静态代理、动态代理。静态代理是由程序员创建或特定工具自动生成源代码，在对其编译。在程序员运行之前，代理类.class文件就已经被创建了。动态代理是在程序运行时通过反射机制动态创建的。</p>\n<ul>\n<li><p>静态代理 </p>\n<ul>\n<li>弊端：需要为每一个被代理的类创建一个“代理类”，虽然这种方式可以实现，但是成本太高</li>\n</ul>\n</li>\n<li><p>动态代理（AOP的底层是用的动态）</p>\n</li>\n<li><ul>\n<li>jdk动态代理 ：必须保证被代理的类实现了接口，</li>\n<li>cglib动态代理 ：不需要接口，</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h1><h2 id=\"简单实现\"><a href=\"#简单实现\" class=\"headerlink\" title=\"简单实现\"></a>简单实现</h2><p>根据上面代理模式的类图，来写一个简单的静态代理的例子。我这儿举一个比较粗糙的例子，假如一个班的同学要向老师交班费，但是都是通过班长把自己的钱转交给老师。这里，班长就是代理学生上交班费，班长就是学生的代理。</p>\n<p> 首先，我们创建一个Person接口。这个接口就是学生（被代理类），和班长（代理类）的公共接口，他们都有上交班费的行为。这样，学生上交班费就可以让班长来代理执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建Person接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//上交班费</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">giveMoney</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Student类实现Person接口。Student可以具体实施上交班费的动作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">giveMoney</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       System.out.println(name + <span class=\"string\">\"上交班费50元\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>StudentsProxy类，这个类也实现了Person接口，但是还另外持有一个学生类对象，由于实现了Peson接口，同时持有一个学生对象，那么他可以代理学生类对象执行上交班费（执行giveMoney()方法）行为。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 学生代理类，也实现了Person接口，保存一个学生实体，这样既可以代理学生产生行为</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentsProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//被代理的学生</span></span><br><span class=\"line\">    Student stu;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StudentsProxy</span><span class=\"params\">(Person stu)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只代理学生对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stu.getClass() == Student<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.stu = (Student)stu;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//代理上交班费，调用被代理学生的上交班费行为</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">giveMoney</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        stu.giveMoney();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面测试一下，看如何使用代理模式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//被代理的学生张三，他的班费上交有代理对象monitor（班长）完成</span></span><br><span class=\"line\">        Person zhangsan = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//生成代理对象，并将张三传给代理对象</span></span><br><span class=\"line\">        Person monitor = <span class=\"keyword\">new</span> StudentsProxy(zhangsan);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//班长代理上交班费</span></span><br><span class=\"line\">        monitor.giveMoney();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><img src=\"../../../../img/proxy/image-20210811151144091.png\" alt=\"image-20210811151144091\"></p>\n<p>这里并没有直接通过张三（被代理对象）来执行上交班费的行为，而是通过班长（代理对象）来代理执行了。这就是代理模式。</p>\n<p>代理模式最主要的就是有<strong>一个公共接口（Person），一个具体的类（Student），一个代理类（StudentsProxy）</strong>,代理类持有具体类的实例，代为执行具体类实例方法。上面说到，代理模式就是在访问实际对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途。这里的间接性就是指不直接调用实际对象的方法，那么我们在代理过程中就可以加上一些其他用途。就这个例子来说，加入班长在帮张三上交班费之前想要先反映一下张三最近学习有很大进步，通过代理模式很轻松就能办到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentsProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//被代理的学生</span></span><br><span class=\"line\">    Student stu;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StudentsProxy</span><span class=\"params\">(Person stu)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只代理学生对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stu.getClass() == Student<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.stu = (Student)stu;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//代理上交班费，调用被代理学生的上交班费行为</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">giveMoney</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"张三最近学习有进步！\"</span>);</span><br><span class=\"line\">        stu.giveMoney();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><img src=\"../../../../img/proxy/image-20210811151505752.png\" alt=\"image-20210811151505752\"></p>\n<p>可以看到，只需要在代理类中帮张三上交班费之前，执行其他操作就可以了。这种操作，也是使用代理模式的一个很大的优点。最直白的就是在Spring中的面向切面编程（AOP），我们能在一个切点之前执行一些操作，在一个切点之后执行一些操作，这个切点就是一个个方法。这些方法所在类肯定就是被代理了，在代理过程中切入了一些其他操作。</p>\n<h1 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h1><p>代理类在程序运行时创建的代理方式被成为动态代理。 我们上面静态代理的例子中，代理类(studentProxy)是自己定义好的，在程序运行之前就已经编译完成。然而动态代理，代理类并不是在Java代码中定义的，而是在运行时根据我们在Java代码中的“指示”动态生成的。相比于静态代理， 动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类中的方法。 比如说，想要在每个代理的方法前都加上一个处理方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">giveMoney</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//调用被代理方法前加入处理方法</span></span><br><span class=\"line\">    beforeMethod();</span><br><span class=\"line\">    stu.giveMoney();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里只有一个giveMoney方法，就写一次beforeMethod方法，但是如果出了giveMonney还有很多其他的方法，那就需要写很多次beforeMethod方法，麻烦。那看看下面动态代理如何实现。</p>\n<h2 id=\"简单实现-1\"><a href=\"#简单实现-1\" class=\"headerlink\" title=\"简单实现\"></a>简单实现</h2><p>在java的<code>java.lang.reflect</code>包下提供了一个<code>Proxy</code>类和一个<code>InvocationHandler</code>接口，通过这个类和这个接口可以生成JDK动态代理类和动态代理对象。</p>\n<p>创建一个动态代理对象步骤，具体代码见后面：</p>\n<ul>\n<li>创建一个<code>InvocationHandler</code>对象</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个与代理对象相关联的InvocationHandler</span></span><br><span class=\"line\"> InvocationHandler stuHandler = <span class=\"keyword\">new</span> MyInvocationHandler&lt;Person&gt;(stu);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用<code>Proxy</code>类的<code>getProxyClass</code>静态方法生成一个动态代理类<code>stuProxyClass</code></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;?&gt; stuProxyClass = Proxy.getProxyClass(Person.class.getClassLoader(), new Class&lt;?&gt;[] &#123;Person.class&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>获得<code>stuProxyClass</code> 中一个带<code>InvocationHandler</code>参数的构造器constructor</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Constructor&lt;?&gt; constructor = PersonProxy.getConstructor(InvocationHandler<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过构造器<code>constructor</code>来创建一个动态实例<code>stuProxy</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person stuProxy = (Person) cons.newInstance(stuHandler);</span><br></pre></td></tr></table></figure>\n<p>就此，一个动态代理对象就创建完毕，当然，上面四个步骤可以通过<code>Proxy</code>类的<code>newProxyInstances</code>方法来简化：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个与代理对象相关联的InvocationHandler</span></span><br><span class=\"line\">InvocationHandler stuHandler = <span class=\"keyword\">new</span> MyInvocationHandler&lt;Person&gt;(stu);</span><br><span class=\"line\"><span class=\"comment\">//创建一个代理对象stuProxy，代理对象的每个执行方法都会替换执行Invocation中的invoke方法</span></span><br><span class=\"line\">Person stuProxy= (Person) Proxy.newProxyInstance(Person.class.getClassLoader(), new Class&lt;?&gt;[]&#123;Person.class&#125;, stuHandler);</span><br></pre></td></tr></table></figure>\n<p>到这里肯定都会很疑惑，这动态代理到底是如何执行的，是如何通过代理对象来执行被代理对象的方法的，先不急，我们先看看一个简单的完整的动态代理的例子。还是上面静态代理的例子，班长需要帮学生代交班费。首先是定义一个Person接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建Person接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//上交班费</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">giveMoney</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建需要被代理的实际类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">giveMoney</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//假设数钱花了一秒时间</span></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       System.out.println(name + <span class=\"string\">\"上交班费50元\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再定义一个检测方法执行时间的工具类，在任何方法执行前先调用<code>start</code>方法，执行后调用<code>finish</code>方法，就可以计算出该方法的运行时间，这也是一个最简单的方法执行时间检测工具。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MonitorUtil</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadLocal&lt;Long&gt; tl = <span class=\"keyword\">new</span> ThreadLocal&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        tl.set(System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//结束时打印耗时</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">finish</span><span class=\"params\">(String methodName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> finishTime = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(methodName + <span class=\"string\">\"方法耗时\"</span> + (finishTime - tl.get()) + <span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建<code>StuInvocationHandler</code>类，实现<code>InvocationHandler</code>接口，这个类中持有一个被代理对象的实例<code>target</code>。<code>InvocationHandler</code>中有一个<code>invoke</code>方法，所有执行代理对象的方法都会被替换成执行<code>invoke</code>方法。</p>\n<p>再在<code>invoke</code>方法中执行被代理对象<code>target</code>的相应方法。当然，在代理过程中，我们在真正执行被代理对象的方法前加入自己其他处理。这也是<code>Spring</code>中的<code>AOP</code>实现的主要原理，这里还涉及到一个很重要的关于java反射方面的基础知识。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StuInvocationHandler</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//invocationHandler持有的被代理对象</span></span><br><span class=\"line\">    T target;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StuInvocationHandler</span><span class=\"params\">(T target)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * proxy:代表动态代理对象</span></span><br><span class=\"line\"><span class=\"comment\">     * method：代表正在执行的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * args：代表调用目标方法时传入的实参</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"代理执行\"</span> +method.getName() + <span class=\"string\">\"方法\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//代理过程中插入监测方法,计算该方法耗时</span></span><br><span class=\"line\">        MonitorUtil.start();</span><br><span class=\"line\">        Object result = method.invoke(target, args);</span><br><span class=\"line\">        MonitorUtil.finish(method.getName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>做完上面的工作后，我们就可以具体来创建动态代理对象了，上面简单介绍了如何创建动态代理对象，我们使用简化的方式创建动态代理对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//创建一个实例对象，这个对象是被代理的对象</span></span><br><span class=\"line\">        Person zhangsan = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//创建一个与代理对象相关联的InvocationHandler</span></span><br><span class=\"line\">        InvocationHandler stuHandler = <span class=\"keyword\">new</span> StuInvocationHandler&lt;Person&gt;(zhangsan);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//创建一个代理对象stuProxy来代理zhangsan，代理对象的每个执行方法都会替换执行Invocation中的invoke方法</span></span><br><span class=\"line\">        Person stuProxy = (Person) Proxy.newProxyInstance(Person.class.getClassLoader(), new Class&lt;?&gt;[]&#123;Person.class&#125;, stuHandler)；</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//代理执行上交班费的方法</span></span><br><span class=\"line\">        stuProxy.giveMoney();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们执行这个<code>ProxyTest</code>类，先想一下，我们创建了一个需要被代理的学生张三，将zhangsan对象传给了stuHandler中，我们在创建代理对象stuProxy时，将stuHandler作为参数了的，上面也有说到所有执行代理对象的方法都会被替换成执行invoke方法，也就是说，最后执行的是StuInvocationHandler中的invoke方法。所以在看到下面的运行结果也就理所当然了。</p>\n<p>运行结果：</p>\n<p><img src=\"../../../../img/proxy/image-20210811154642175.png\" alt=\"image-20210811154642175\"></p>\n<p>上面说到，动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类中的方法。是因为所有被代理执行的方法，都是通过在InvocationHandler中的invoke方法调用的，所以我们只要在invoke方法中统一处理，就可以对所有被代理的方法进行相同的操作了。例如，这里的方法计时，所有的被代理对象执行的方法都会被计时，然而我只做了很少的代码量。</p>\n<p>动态代理的过程，代理对象和被代理对象的关系不像静态代理那样一目了然，清晰明了。因为动态代理的过程中，我们并没有实际看到代理类，也没有很清晰地的看到代理类的具体样子，而且动态代理中被代理对象和代理对象是通过InvocationHandler来完成的代理过程的，其中具体是怎样操作的，为什么代理对象执行的方法都会通过InvocationHandler中的invoke方法来执行。带着这些问题，我们就需要对java动态代理的源码进行简要的分析，弄清楚其中缘由。</p>\n<h1 id=\"动态代理原理分析\"><a href=\"#动态代理原理分析\" class=\"headerlink\" title=\"动态代理原理分析\"></a>动态代理原理分析</h1><h2 id=\"Java动态代理创建出来的动态代理类\"><a href=\"#Java动态代理创建出来的动态代理类\" class=\"headerlink\" title=\"Java动态代理创建出来的动态代理类\"></a>Java动态代理创建出来的动态代理类</h2><p>上面我们利用Proxy类的newProxyInstance方法创建了一个动态代理对象，查看该方法的源码，发现它只是封装了创建动态代理类的步骤(红色标准部分)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                      Class&lt;?&gt;[] interfaces,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                      InvocationHandler h)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> IllegalArgumentException</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Objects.requireNonNull(h);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sm != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Look up or generate the designated proxy class.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Invoke its constructor with the designated invocation handler.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sm != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> InvocationHandler ih = h;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class=\"line\">            AccessController.doPrivileged(<span class=\"keyword\">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Void <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    cons.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cons.newInstance(<span class=\"keyword\">new</span> Object[]&#123;h&#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e.toString(), e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">        Throwable t = e.getCause();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t <span class=\"keyword\">instanceof</span> RuntimeException) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> (RuntimeException) t;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(t.toString(), t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InternalError(e.toString(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实，我们最应该关注的是 Class&lt;?&gt; cl = getProxyClass0(loader, intfs);这句，这里产生了代理类，后面代码中的构造器也是通过这里产生的类来获得，可以看出，这个类的产生就是整个动态代理的关键，由于是动态生成的类文件，我这里不具体进入分析如何产生的这个类文件，只需要知道这个类文件时缓存在java虚拟机中的，我们可以通过下面的方法将其打印到文件里面，一睹真容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>[] classFile = ProxyGenerator.generateProxyClass(<span class=\"string\">\"$Proxy0\"</span>, Student<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getInterfaces</span>())</span>;</span><br><span class=\"line\">String path = <span class=\"string\">\"G:/javacode/javase/Test/bin/proxy/StuProxy.class\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span>(FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(path)) &#123;</span><br><span class=\"line\">    fos.write(classFile);</span><br><span class=\"line\">    fos.flush();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"代理类class文件写入成功\"</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">   System.out.println(<span class=\"string\">\"写文件错误\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对这个class文件进行反编译，我们看看jdk为我们生成了什么样的内容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> proxy.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> $<span class=\"title\">Proxy0</span> <span class=\"keyword\">extends</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m1;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m2;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m3;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m0;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  *注意这里是生成代理类的构造方法，方法参数为InvocationHandler类型，看到这，是不是就有点明白</span></span><br><span class=\"line\"><span class=\"comment\">  *为何代理对象调用方法都是执行InvocationHandler中的invoke方法，而InvocationHandler又持有一个</span></span><br><span class=\"line\"><span class=\"comment\">  *被代理对象的实例，不禁会想难道是....？ 没错，就是你想的那样。</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  *super(paramInvocationHandler)，是调用父类Proxy的构造方法。</span></span><br><span class=\"line\"><span class=\"comment\">  *父类持有：protected InvocationHandler h;</span></span><br><span class=\"line\"><span class=\"comment\">  *Proxy构造方法：</span></span><br><span class=\"line\"><span class=\"comment\">  *    protected Proxy(InvocationHandler h) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  *         Objects.requireNonNull(h);</span></span><br><span class=\"line\"><span class=\"comment\">  *         this.h = h;</span></span><br><span class=\"line\"><span class=\"comment\">  *     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> $Proxy0(InvocationHandler paramInvocationHandler)</span><br><span class=\"line\">    <span class=\"keyword\">throws</span> </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(paramInvocationHandler);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//这个静态块本来是在最后的，我把它拿到前面来，方便描述</span></span><br><span class=\"line\">   <span class=\"keyword\">static</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">//看看这儿静态块儿里面有什么，是不是找到了giveMoney方法。请记住giveMoney通过反射得到的名字m3，其他的先不管</span></span><br><span class=\"line\">      m1 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"equals\"</span>, <span class=\"keyword\">new</span> Class[] &#123; Class.forName(<span class=\"string\">\"java.lang.Object\"</span>) &#125;);</span><br><span class=\"line\">      m2 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"toString\"</span>, <span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      m3 = Class.forName(<span class=\"string\">\"proxy.Person\"</span>).getMethod(<span class=\"string\">\"giveMoney\"</span>, <span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      m0 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"hashCode\"</span>, <span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (NoSuchMethodException localNoSuchMethodException)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchMethodError(localNoSuchMethodException.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (ClassNotFoundException localClassNotFoundException)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoClassDefFoundError(localClassNotFoundException.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * </span></span><br><span class=\"line\"><span class=\"comment\">  *这里调用代理对象的giveMoney方法，直接就调用了InvocationHandler中的invoke方法，并把m3传了进去。</span></span><br><span class=\"line\"><span class=\"comment\">  *this.h.invoke(this, m3, null);这里简单，明了。</span></span><br><span class=\"line\"><span class=\"comment\">  *来，再想想，代理对象持有一个InvocationHandler对象，InvocationHandler对象持有一个被代理的对象，</span></span><br><span class=\"line\"><span class=\"comment\">  *再联系到InvacationHandler中的invoke方法。嗯，就是这样。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">giveMoney</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> </span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.h.invoke(<span class=\"keyword\">this</span>, m3, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Error|RuntimeException localError)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> localError;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable localThrowable)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(localThrowable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//注意，这里为了节省篇幅，省去了toString，hashCode、equals方法的内容。原理和giveMoney方法一毛一样。</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>jdk为我们的生成了一个叫$Proxy0（这个名字后面的0是编号，有多个代理类会一次递增）的代理类，这个类文件时放在内存中的，我们在创建代理对象时，就是通过反射获得这个类的构造方法，然后创建的代理实例。通过对这个生成的代理类源码的查看，我们很容易能看出，动态代理实现的具体过程。</p>\n<p>我们可以对<code>InvocationHandler</code>看做一个中介类，中介类持有一个被代理对象，在invoke方法中调用了被代理对象的相应方法。通过聚合方式持有被代理对象的引用，把外部对invoke的调用最终都转为对被代理对象的调用。</p>\n<p>代理类调用自己方法时，通过自身持有的中介类对象来调用中介类对象的invoke方法，从而达到代理执行被代理对象的方法。也就是说，动态代理通过中介类实现了具体的代理功能。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>生成的代理类：$Proxy0 extends Proxy implements Person，我们看到代理类继承了Proxy类，所以也就决定了java动态代理只能对接口进行代理，Java的继承机制注定了这些动态代理类们无法实现对class的动态代理。<br>上面的动态代理的例子，其实就是AOP的一个简单实现了，在目标对象的方法执行之前和执行之后进行了处理，对方法耗时统计。Spring的AOP实现其实也是用了Proxy和<code>InvocationHandler</code>这两个东西的。</p>\n<h1 id=\"Spring-AOP中的使用\"><a href=\"#Spring-AOP中的使用\" class=\"headerlink\" title=\"Spring AOP中的使用\"></a>Spring AOP中的使用</h1><p><strong>在spring容器中，如果有接口，那么会使用jdk自带的动态代理，如果没有接口，那么会使用cglib的动态代理。动态代理的实现原理，</strong></p>\n<h2 id=\"Spring的两种动态代理：JDK和Cglib-的区别和实现\"><a href=\"#Spring的两种动态代理：JDK和Cglib-的区别和实现\" class=\"headerlink\" title=\"Spring的两种动态代理：JDK和Cglib 的区别和实现\"></a>Spring的两种动态代理：JDK和Cglib 的区别和实现</h2><h3 id=\"原理区别\"><a href=\"#原理区别\" class=\"headerlink\" title=\"原理区别\"></a>原理区别</h3><p>java动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用<code>InvokeHandler</code>来处理。而<code>cglib</code>动态代理是利用<code>asm</code>开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。</p>\n<ol>\n<li>如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP </li>\n<li>如果目标对象实现了接口，可以强制使用CGLIB实现AOP </li>\n<li>如果目标对象没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和CGLIB之间转换</li>\n</ol>\n<p>如何强制使用CGLIB实现AOP？</p>\n<ul>\n<li>添加CGLIB库，SPRING_HOME/cglib/*.jar</li>\n<li>在spring配置文件中加入<aop:aspectj-autoproxy proxy-target-class=\"true\"/></li>\n</ul>\n<p>JDK动态代理和CGLIB字节码生成的区别？</p>\n<ol>\n<li>JDK动态代理只能对实现了接口的类生成代理，而不能针对类</li>\n<li>CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法，因为是继承，所以该类或方法最好不要声明成final </li>\n<li>CGLIB动态代理中的方法调用本类的其他方法，会重新调用本类的动态代理类，然后再由动态代理类调用相应的方法，jdk动态代理则不会。（标记@Configuration的类，就会创建CGLIB动态代理，每次调用都会来到类似一个路由类（getIndex）的文件，再去选择动态代理，而JDK动态代理则会直接调用，配置类是需要从IOC容器中去获取的，以保证类是单例的）</li>\n</ol>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>用户管理接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lf.shejimoshi.proxy.entity;</span><br><span class=\"line\"><span class=\"comment\">//用户管理接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//新增用户抽象方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addUser</span><span class=\"params\">(String userName,String password)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//删除用户抽象方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delUser</span><span class=\"params\">(String userName)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用户管理接口实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lf.shejimoshi.proxy.entity;</span><br><span class=\"line\"><span class=\"comment\">//用户管理实现类,实现用户管理接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserManagerImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserManager</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//重写新增用户方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addUser</span><span class=\"params\">(String userName, String password)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"调用了新增的方法！\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"传入参数为 userName: \"</span>+userName+<span class=\"string\">\" password: \"</span>+password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重写删除用户方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delUser</span><span class=\"params\">(String userName)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"调用了删除的方法！\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"传入参数为 userName: \"</span>+userName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lf.shejimoshi.proxy.jdk;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lf.shejimoshi.proxy.entity.UserManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lf.shejimoshi.proxy.entity.UserManagerImpl;</span><br><span class=\"line\"><span class=\"comment\">//JDK动态代理实现InvocationHandler接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdkProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target ;<span class=\"comment\">//需要代理的目标对象</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"JDK动态代理，监听开始！\"</span>);</span><br><span class=\"line\">        Object result = method.invoke(target, args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"JDK动态代理，监听结束！\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//定义获取代理对象方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">getJDKProxy</span><span class=\"params\">(Object targetObject)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//为目标对象target赋值</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = targetObject;</span><br><span class=\"line\">        <span class=\"comment\">//JDK动态代理只能针对实现了接口的类进行代理，newProxyInstance 函数所需参数就可看出</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(targetObject.getClass().getClassLoader(), targetObject.getClass().getInterfaces(), <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        JdkProxy jdkProxy = <span class=\"keyword\">new</span> JdkProxy();<span class=\"comment\">//实例化JDKProxy对象</span></span><br><span class=\"line\">        UserManager user = (UserManager) jdkProxy.getJDKProxy(<span class=\"keyword\">new</span> UserManagerImpl());<span class=\"comment\">//获取代理对象</span></span><br><span class=\"line\">        user.addUser(<span class=\"string\">\"admin\"</span>, <span class=\"string\">\"123123\"</span>);<span class=\"comment\">//执行新增方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JDK动态代理运行结果</p>\n<p><img src=\"../../../../img/proxy/985411-20180111010236347-2008865961.png\" alt=\"img\"></p>\n<h3 id=\"Cglib动态代理\"><a href=\"#Cglib动态代理\" class=\"headerlink\" title=\"Cglib动态代理\"></a>Cglib动态代理</h3><p>（需要导入两个jar包，<code>asm-5.2.jar,cglib-3.2.5.jar</code>。版本自行选择）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lf.shejimoshi.proxy.cglib;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lf.shejimoshi.proxy.entity.UserManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lf.shejimoshi.proxy.entity.UserManagerImpl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Cglib动态代理，实现MethodInterceptor接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;<span class=\"comment\">//需要代理的目标对象</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//重写拦截方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] arr, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Cglib动态代理，监听开始！\"</span>);</span><br><span class=\"line\">        Object invoke = method.invoke(target, arr);<span class=\"comment\">//方法执行，参数：target 目标对象 arr参数数组</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Cglib动态代理，监听结束！\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> invoke;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//定义获取代理对象方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getCglibProxy</span><span class=\"params\">(Object objectTarget)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//为目标对象target赋值</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = objectTarget;</span><br><span class=\"line\">        Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        <span class=\"comment\">//设置父类,因为Cglib是针对指定的类生成一个子类，所以需要指定父类</span></span><br><span class=\"line\">        enhancer.setSuperclass(objectTarget.getClass());</span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">this</span>);<span class=\"comment\">// 设置回调 </span></span><br><span class=\"line\">        Object result = enhancer.create();<span class=\"comment\">//创建并返回代理对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        CglibProxy cglib = <span class=\"keyword\">new</span> CglibProxy();<span class=\"comment\">//实例化CglibProxy对象</span></span><br><span class=\"line\">        UserManager user =  (UserManager) cglib.getCglibProxy(<span class=\"keyword\">new</span> UserManagerImpl());<span class=\"comment\">//获取代理对象</span></span><br><span class=\"line\">        user.delUser(<span class=\"string\">\"admin\"</span>);<span class=\"comment\">//执行删除方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Cglib动态代理运行结果</p>\n<p><img src=\"../../../../img/proxy/985411-20180111010415222-40358282.png\" alt=\"img\"></p>\n<p>Spring中在创建Bean的时候，调用初始化之后的那个<code>BeanPostProcessor</code>，就会拿到之前所有解析得到的advisors，循环和当前的bean做配对，配对上就需要创建动态代理。（此处采用了责任链的模式进行递归调用）</p>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><p>Spring AOP 解析切面源码入口 <code>@EnableAspectJAutoProxy</code> —&gt;  <code>AspectJAutoProxyRegistrar</code>  —&gt; </p>\n<p><code>AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</code> </p>\n<p>通过上面的注册一个Bean定义 <code>AnnotationAwareAspectJAutoProxyCreator.class</code></p>\n<p>查看注册的bean的结构，可以知道注册的是一个bean的后置处理器；此处就是ioc的一个扩展点。</p>\n<p><img src=\"../../../../img/proxy/image-20210812145750817.png\" alt=\"image-20210812145750817\"></p>\n<p><img src=\"../../../../img/proxy/image-20210812150906240.png\" alt=\"image-20210812150906240\"></p>\n<p>从源码debug信息来看，AOP的切入堆栈信息，可以发现在创建bean的时候就通过bean的后置处理器进行解析生成代理类</p>\n<p><img src=\"../../../../img/proxy/image-20210812151926259.png\" alt=\"image-20210812151926259\"></p>\n<p>注解解析顺序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pointcut</span>, <span class=\"meta\">@Around</span>, <span class=\"meta\">@Before</span>, <span class=\"meta\">@After</span>, <span class=\"meta\">@AfterReturning</span>, <span class=\"meta\">@AfterThrowing</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"AOP的核心概念及术语\"><a href=\"#AOP的核心概念及术语\" class=\"headerlink\" title=\"AOP的核心概念及术语\"></a>AOP的核心概念及术语</h2><ul>\n<li>切面（<code>Aspect</code>）: 指关注点模块化，这个关注点可能会横切多个对象。事务管理是企业级Java应用中有关横切关注点的例子。 在Spring AOP中，切面可以使用通用类基于模式的方式（<code>schema-based approach</code>）或者在普通类中以<code>@Aspect</code>注解（<code>@AspectJ</code> 注解方式）来实现。</li>\n<li>连接点（<code>Join point</code>）: 在程序执行过程中某个特定的点，例如某个方法调用的时间点或者处理异常的时间点。在Spring AOP中，一个连接点总是代表一个方法的执行。</li>\n<li>通知（<code>Advice</code>）: 在切面的某个特定的连接点上执行的动作。通知有多种类型，包括“around”, “before” and “after”等等。 许多AOP框架，包括Spring在内，都是以拦截器做通知模型的，并维护着一个以连接点为中心的拦截器链。</li>\n<li>切点（<code>Pointcut</code>）: 匹配连接点的断言。通知和切点表达式相关联，并在满足这个切点的连接点上运行（例如，当执行某个特定名称的方法时）。切点表达式如何和连接点匹配是AOP的核心：Spring默认使用<code>AspectJ</code>切点语义。</li>\n<li>引入（<code>Introduction</code>）: 声明额外的方法或者某个类型的字段。Spring允许引入新的接口（以及一个对应的实现）到任何被通知的对象上。例如，可以使用引入来使bean实现 <code>IsModified</code>接口， 以便简化缓存机制（在<code>AspectJ</code>社区，引入也被称为内部类型声明（inter））。</li>\n<li>目标对象（<code>Target object</code>）: 被一个或者多个切面所通知的对象。也被称作被通知（advised）对象。既然Spring AOP是通过运行时代理实现的，那么这个对象永远是一个被代理（proxied）的对象。</li>\n<li>AOP代理（<code>AOP proxy</code>）:AOP框架创建的对象，用来实现切面契约（aspect contract）（包括通知方法执行等功能）。在Spring中，AOP代理可以是JDK动态代理或CGLIB代理。</li>\n<li>织入（<code>Weaving</code>）: 把切面连接到其它的应用程序类型或者对象上，并创建一个被被通知的对象的过程。这个过程可以在编译时（例如使用<code>AspectJ</code>编译器）、类加载时或运行时中完成。 Spring和其他纯Java AOP框架一样，是在运行时完成织入的。</li>\n</ul>\n<h2 id=\"AOP的通知类型\"><a href=\"#AOP的通知类型\" class=\"headerlink\" title=\"AOP的通知类型\"></a>AOP的通知类型</h2><ul>\n<li>前置通知（Before advice）: 在连接点之前运行但无法阻止执行流程进入连接点的通知（除非它引发异常）。</li>\n<li>后置返回通知（After returning advice）:在连接点正常完成后执行的通知（例如，当方法没有抛出任何异常并正常返回时）。</li>\n<li>后置异常通知（After throwing advice）: 在方法抛出异常退出时执行的通知。</li>\n<li>后置通知（总会执行）（After (finally) advice）: 当连接点退出的时候执行的通知（无论是正常返回还是异常退出）。</li>\n<li>环绕通知（Around Advice）:环绕连接点的通知，例如方法调用。这是最强大的一种通知类型，。环绕通知可以在方法调用前后完成自定义的行为。它可以选择是否继续执行连接点或直接返回自定义的返回值又或抛出异常将执行结束。</li>\n</ul>\n<h2 id=\"AOP的应用场景\"><a href=\"#AOP的应用场景\" class=\"headerlink\" title=\"AOP的应用场景\"></a>AOP的应用场景</h2><ul>\n<li>日志管理</li>\n<li>权限认证</li>\n<li>安全检查</li>\n<li>事务控制</li>\n</ul>\n","next":{"title":"jmeter在ubuntu下面的配置以及使用","path":"api/articles/resource-system-Linux-ubuntu-jmeter.json","image":"/img/header_img/15.gif","num_read":510,"num_like":627,"num_collection":275,"num_comments":26},"prev":{"title":"docker基本命令","path":"api/articles/resource-RPC-Docker-dockerBase.json","image":"/img/header_img/docker/docker.jpg","num_read":848,"num_like":1032,"num_collection":556,"num_comments":115},"categories":[{"name":"设计模式","path":"api/categories/设计模式.json","pathContent":"api/categories/设计模式","description":"简单快捷、解决方案","cover":"https://sunfy9.gitee.io/project/photo/project/design.jpg"}],"tags":[{"name":"Spring","path":"api/tags/Spring.json","pathContent":"api/tags/Spring","description":"更快、更容易、更安全","cover":"https://sunfy9.gitee.io/project/photo/project/spring.png"}]}