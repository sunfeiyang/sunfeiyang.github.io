{"title":"Java设计模式之单例模式","num_read":288,"num_like":919,"num_collection":524,"num_comments":102,"slug":"resource-designpattern-build-singleton","date":"2019-07-02T16:00:00.000Z","img":"/img/header_img/Design/Singleton.PNG","_id":"clhrbp2b6004no5lg9sdedbc5","project":"designPattern","site":{"data":{}},"updated":"2022-01-15T04:19:28.000Z","comments":true,"path":"api/articles/resource-designpattern-build-singleton.json","webPath":"2019/07/03/resource-designpattern-build-singleton/","permalink":"https://sunfy9.gitee.io/2019/07/03/resource-designpattern-build-singleton/","excerpt":"java设计模式:设计模式是被大多数人反复使用，在软件开发过程中所面临的一般问题的解决方案。是大多数人员经过较长时间所总结出来的的一套代码设计经验的总结；","covers":null,"keywords":"sunfy, hexo-theme-snail","content":"<p>java设计模式:设计模式是被大多数人反复使用，在软件开发过程中所面临的一般问题的解决方案。是大多数人员经过较长时间所总结出来的的一套代码设计经验的总结；<a id=\"more\"></a></p>\n<p>什么是设计模式（<code>Desin Pattern</code>）</p>\n<p>设计模式是被大多数人反复使用，在软件开发过程中所面临的一般问题的解决方案。是大多数人员经过较长时间所总结出来的的一套代码设计经验的总结；</p>\n<p>为什么使用设计模式？</p>\n<p>使用设计模式可以提高代码的重用性，一定程度保证代码的可靠性，也可以帮助阅读代码的人员快速理解；</p>\n<p>设计模式种类</p>\n<ul>\n<li>创建型模式（5）：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</li>\n<li>结构型模式（7）：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</li>\n<li>行为型模式（11）：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</li>\n</ul>\n<h2 id=\"设计模式遵循的原则\"><a href=\"#设计模式遵循的原则\" class=\"headerlink\" title=\"设计模式遵循的原则\"></a>设计模式遵循的原则</h2><ol>\n<li>开闭原则（Open Close Principle）：对扩展开放，对修改关闭。</li>\n<li>里氏代换原则（Liskov Substitution Principle）：只有当衍生类可以替换掉基类，软件单位的功能不受影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</li>\n<li>依赖倒转原则（Dependence Inversion Principle）：这个是开闭原则的基础，对接口编程，依赖于抽象而不依赖于具体。</li>\n<li>接口隔离原则（Interface Segregation Principle）：使用多个隔离的接口来降低耦合度。</li>\n<li>迪米特法则（最少知道法则）（Demeter Principle）：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</li>\n<li>合成复用原则（Composite Reuse Principle）：原则是尽量使用合成/聚合的方式，而不是使用继承。继承实际上破坏了类的封装性，超类的方法可能会被子类修改，</li>\n</ol>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式<sunfy-line></h2><p>单例模式主要适用于在整个系统中，我们只需要一个（有且仅有一个），若存在多个，可能会出现一些不应有的状况，比如资源占用过多、与预期值不同等后果。主要用在配置文件、线程池、缓存、日志对象等；</p>\n<p>分类：</p>\n<h3 id=\"饿汉模式\"><a href=\"#饿汉模式\" class=\"headerlink\" title=\"饿汉模式\"></a>饿汉模式</h3><p>主要特点是，在类文件加载的时候就会创建，不论是否有无方法对其进行调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.sunfy.singleton;</span><br><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * static 静态的成员，是类所有，这样的对象会在类加载时就会创建类的唯一一个实例（饿汉模式）</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class Singleton &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;1.将构造方法私有化，不允许外部直接创建对象</span><br><span class=\"line\">    private Singleton()&#123;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;2.创建类的唯一实例，使用private(控制访问，安全考虑) static修饰</span><br><span class=\"line\">    private static Singleton instance&#x3D;new Singleton();</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;3.提供一个用于获取实例的方法，使用public static（改为类所有，可以直接点）修饰</span><br><span class=\"line\">    public static Singleton getInstance()&#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"懒汉模式\"><a href=\"#懒汉模式\" class=\"headerlink\" title=\"懒汉模式\"></a>懒汉模式</h3><p>主要特点是：加载类文件时不会进行创建，只有当调用该对象时才会创建，而且只有第一次调用时会创建。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.sunfy.singleton;</span><br><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * 懒汉模式</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class Singleton2 &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;1.将构造方式私有化，不允许外边直接创建对象</span><br><span class=\"line\">    private Singleton2()&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;2.声明类的唯一实例，使用private static修饰</span><br><span class=\"line\">    &#x2F;&#x2F;  只是声明，没有直接进行创建，当第一次获取的时候会创建</span><br><span class=\"line\">    private static Singleton2 instance;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;3.提供一个用于获取实例的方法，使用public static修饰</span><br><span class=\"line\">    public static Singleton2 getInstance()&#123;</span><br><span class=\"line\">        if(instance&#x3D;&#x3D;null)&#123;</span><br><span class=\"line\">            instance&#x3D;new Singleton2();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二者区别\"><a href=\"#二者区别\" class=\"headerlink\" title=\"二者区别\"></a>二者区别</h3><ul>\n<li>饿汉模式的特点是加载类时比较慢，但运行时获取对象的速度比较快，线程安全</li>\n<li>懒汉模式的特点是加载类时比较快，但运行时获取对象的速度比较慢，线程不安全</li>\n</ul>\n","more":"</p>\n<p>什么是设计模式（<code>Desin Pattern</code>）</p>\n<p>设计模式是被大多数人反复使用，在软件开发过程中所面临的一般问题的解决方案。是大多数人员经过较长时间所总结出来的的一套代码设计经验的总结；</p>\n<p>为什么使用设计模式？</p>\n<p>使用设计模式可以提高代码的重用性，一定程度保证代码的可靠性，也可以帮助阅读代码的人员快速理解；</p>\n<p>设计模式种类</p>\n<ul>\n<li>创建型模式（5）：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</li>\n<li>结构型模式（7）：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</li>\n<li>行为型模式（11）：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</li>\n</ul>\n<h2 id=\"设计模式遵循的原则\"><a href=\"#设计模式遵循的原则\" class=\"headerlink\" title=\"设计模式遵循的原则\"></a>设计模式遵循的原则</h2><ol>\n<li>开闭原则（Open Close Principle）：对扩展开放，对修改关闭。</li>\n<li>里氏代换原则（Liskov Substitution Principle）：只有当衍生类可以替换掉基类，软件单位的功能不受影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</li>\n<li>依赖倒转原则（Dependence Inversion Principle）：这个是开闭原则的基础，对接口编程，依赖于抽象而不依赖于具体。</li>\n<li>接口隔离原则（Interface Segregation Principle）：使用多个隔离的接口来降低耦合度。</li>\n<li>迪米特法则（最少知道法则）（Demeter Principle）：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</li>\n<li>合成复用原则（Composite Reuse Principle）：原则是尽量使用合成/聚合的方式，而不是使用继承。继承实际上破坏了类的封装性，超类的方法可能会被子类修改，</li>\n</ol>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式<sunfy-line></h2><p>单例模式主要适用于在整个系统中，我们只需要一个（有且仅有一个），若存在多个，可能会出现一些不应有的状况，比如资源占用过多、与预期值不同等后果。主要用在配置文件、线程池、缓存、日志对象等；</p>\n<p>分类：</p>\n<h3 id=\"饿汉模式\"><a href=\"#饿汉模式\" class=\"headerlink\" title=\"饿汉模式\"></a>饿汉模式</h3><p>主要特点是，在类文件加载的时候就会创建，不论是否有无方法对其进行调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.sunfy.singleton;</span><br><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * static 静态的成员，是类所有，这样的对象会在类加载时就会创建类的唯一一个实例（饿汉模式）</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class Singleton &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;1.将构造方法私有化，不允许外部直接创建对象</span><br><span class=\"line\">    private Singleton()&#123;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;2.创建类的唯一实例，使用private(控制访问，安全考虑) static修饰</span><br><span class=\"line\">    private static Singleton instance&#x3D;new Singleton();</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;3.提供一个用于获取实例的方法，使用public static（改为类所有，可以直接点）修饰</span><br><span class=\"line\">    public static Singleton getInstance()&#123;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"懒汉模式\"><a href=\"#懒汉模式\" class=\"headerlink\" title=\"懒汉模式\"></a>懒汉模式</h3><p>主要特点是：加载类文件时不会进行创建，只有当调用该对象时才会创建，而且只有第一次调用时会创建。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.sunfy.singleton;</span><br><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * 懒汉模式</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class Singleton2 &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;1.将构造方式私有化，不允许外边直接创建对象</span><br><span class=\"line\">    private Singleton2()&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;2.声明类的唯一实例，使用private static修饰</span><br><span class=\"line\">    &#x2F;&#x2F;  只是声明，没有直接进行创建，当第一次获取的时候会创建</span><br><span class=\"line\">    private static Singleton2 instance;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;3.提供一个用于获取实例的方法，使用public static修饰</span><br><span class=\"line\">    public static Singleton2 getInstance()&#123;</span><br><span class=\"line\">        if(instance&#x3D;&#x3D;null)&#123;</span><br><span class=\"line\">            instance&#x3D;new Singleton2();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二者区别\"><a href=\"#二者区别\" class=\"headerlink\" title=\"二者区别\"></a>二者区别</h3><ul>\n<li>饿汉模式的特点是加载类时比较慢，但运行时获取对象的速度比较快，线程安全</li>\n<li>懒汉模式的特点是加载类时比较快，但运行时获取对象的速度比较慢，线程不安全</li>\n</ul>","next":{"title":"Git基本操作","path":"api/articles/resource-tools-git-maven-gitBase.json","image":"/img/header_img/tools/git.jpg","num_read":146,"num_like":158,"num_collection":241,"num_comments":163},"prev":{"title":"Java设计模式之建造者模式","path":"api/articles/resource-designpattern-build-builder.json","image":"/img/header_img/Design/Builder.PNG","num_read":912,"num_like":59,"num_collection":800,"num_comments":72},"categories":[{"name":"设计模式","path":"api/categories/设计模式.json","pathContent":"api/categories/设计模式","description":"简单快捷、解决方案","cover":"https://sunfy9.gitee.io/project/photo/project/design.jpg"}],"tags":[]}