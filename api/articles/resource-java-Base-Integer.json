{"title":"为什么 Java 中“1000==1000”为false，而”100==100“为true？","num_read":1392,"num_like":206,"num_collection":437,"num_comments":158,"slug":"resource-java-Base-Integer","date":"2022-02-22T16:00:00.000Z","img":"/img/header_img/java/integer.png","format":"max","_id":"clhrbp2dq00abo5lgafm6di7f","project":"Java","type":"hot","site":{"data":{}},"updated":"2022-03-01T06:15:08.000Z","author":"Sunfy","comments":true,"path":"api/articles/resource-java-Base-Integer.json","webPath":"2022/02/23/resource-java-Base-Integer/","permalink":"https://sunfy9.gitee.io/2022/02/23/resource-java-Base-Integer/","excerpt":null,"covers":null,"keywords":"sunfy, hexo-theme-snail","content":"<p>这是一个挺有意思的讨论话题。</p>\n<p>如果你运行下面的代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer a = <span class=\"number\">1000</span>, b = <span class=\"number\">1000</span>;  </span><br><span class=\"line\">System.out.println(a == b);<span class=\"comment\">//1</span></span><br><span class=\"line\">Integer c = <span class=\"number\">100</span>, d = <span class=\"number\">100</span>;  </span><br><span class=\"line\">System.out.println(c == d);<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<p>你会得到:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<p>基本知识：我们知道，如果两个引用指向同一个对象，用==表示它们是相等的。如果两个引用指向不同的对象，用==表示它们是不相等的，即使它们的内容相同。</p>\n<p>因此，后面一条语句也应该是false 。</p>\n<p>这就是它有趣的地方了。<sunfy-line>如果你看去看 <code>Integer.java</code> 类，你会发现有一个内部私有类，<code>IntegerCache.java</code>，它缓存了从-128到127之间的所有的整数对象。</p>\n<p>所以事情就成了，所有的小整数在内部缓存，然后当我们声明类似——</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer c = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n<p>的时候，它实际上在内部做的是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i = Integer.valueOf(<span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<p>现在，如果我们去看<code>valueOf()</code>方法，我们可以看到:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i</span><br><span class=\"line\">          <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Integer(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果值的范围在-128到127之间，它就从高速缓存返回实例。</p>\n<p>所以…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer c = <span class=\"number\">100</span>, d = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n<p>指向了同一个对象。</p>\n<p>这就是为什么我们写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(c == d);</span><br></pre></td></tr></table></figure>\n<p>我们可以得到true。</p>\n<p>现在你可能会问，为什么这里需要缓存？</p>\n<p>合乎逻辑的理由是，在此范围内的“小”整数使用率比大整数要高，因此，使用相同的底层对象是有价值的，可以减少潜在的内存占用。</p>\n<p>然而，通过反射API你会误用此功能。</p>\n<p>运行下面的代码，享受它的魅力吧!</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class=\"line\">      Class cache = Integer.class.getDeclaredClasses()[0]; //1</span><br><span class=\"line\">      Field myCache = cache.getDeclaredField(<span class=\"string\">\"cache\"</span>); <span class=\"comment\">//2</span></span><br><span class=\"line\">      myCache.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">//3</span></span><br><span class=\"line\">      Integer[] newCache = (Integer[]) myCache.get(cache); <span class=\"comment\">//4</span></span><br><span class=\"line\">      newCache[<span class=\"number\">132</span>] = newCache[<span class=\"number\">133</span>]; <span class=\"comment\">//5</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> b = a + a;</span><br><span class=\"line\">      System.out.printf(<span class=\"string\">\"%d + %d = %d\"</span>, a, a, b); <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>这是一个挺有意思的讨论话题。</p>\n<p>如果你运行下面的代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer a = <span class=\"number\">1000</span>, b = <span class=\"number\">1000</span>;  </span><br><span class=\"line\">System.out.println(a == b);<span class=\"comment\">//1</span></span><br><span class=\"line\">Integer c = <span class=\"number\">100</span>, d = <span class=\"number\">100</span>;  </span><br><span class=\"line\">System.out.println(c == d);<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<p>你会得到:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<p>基本知识：我们知道，如果两个引用指向同一个对象，用==表示它们是相等的。如果两个引用指向不同的对象，用==表示它们是不相等的，即使它们的内容相同。</p>\n<p>因此，后面一条语句也应该是false 。</p>\n<p>这就是它有趣的地方了。<sunfy-line>如果你看去看 <code>Integer.java</code> 类，你会发现有一个内部私有类，<code>IntegerCache.java</code>，它缓存了从-128到127之间的所有的整数对象。</p>\n<p>所以事情就成了，所有的小整数在内部缓存，然后当我们声明类似——</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer c = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n<p>的时候，它实际上在内部做的是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i = Integer.valueOf(<span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<p>现在，如果我们去看<code>valueOf()</code>方法，我们可以看到:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i</span><br><span class=\"line\">          <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Integer(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果值的范围在-128到127之间，它就从高速缓存返回实例。</p>\n<p>所以…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer c = <span class=\"number\">100</span>, d = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n<p>指向了同一个对象。</p>\n<p>这就是为什么我们写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(c == d);</span><br></pre></td></tr></table></figure>\n<p>我们可以得到true。</p>\n<p>现在你可能会问，为什么这里需要缓存？</p>\n<p>合乎逻辑的理由是，在此范围内的“小”整数使用率比大整数要高，因此，使用相同的底层对象是有价值的，可以减少潜在的内存占用。</p>\n<p>然而，通过反射API你会误用此功能。</p>\n<p>运行下面的代码，享受它的魅力吧!</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class=\"line\">      Class cache = Integer.class.getDeclaredClasses()[0]; //1</span><br><span class=\"line\">      Field myCache = cache.getDeclaredField(<span class=\"string\">\"cache\"</span>); <span class=\"comment\">//2</span></span><br><span class=\"line\">      myCache.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">//3</span></span><br><span class=\"line\">      Integer[] newCache = (Integer[]) myCache.get(cache); <span class=\"comment\">//4</span></span><br><span class=\"line\">      newCache[<span class=\"number\">132</span>] = newCache[<span class=\"number\">133</span>]; <span class=\"comment\">//5</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> b = a + a;</span><br><span class=\"line\">      System.out.printf(<span class=\"string\">\"%d + %d = %d\"</span>, a, a, b); <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","next":{"title":"java NPE问题","path":"api/articles/resource-java-Base-javaNPE.json","image":"/img/header_img/java/npe.png","num_read":1172,"num_like":653,"num_collection":755,"num_comments":167},"prev":{"title":"并发场景下的幂等问题——分布式锁详解","path":"api/articles/resource-MicroService-other-幂等问题-分布式锁.json","image":"/img/header_img/MicroService/mideng.png","num_read":1108,"num_like":546,"num_collection":274,"num_comments":89},"categories":[{"name":"Java","path":"api/categories/Java.json","pathContent":"api/categories/Java","description":"知识点、常用功能","cover":"https://sunfy9.gitee.io/project/photo/project/java.png"}],"tags":[]}