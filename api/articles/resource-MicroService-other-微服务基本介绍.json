{"title":"微服务基本介绍","num_read":863,"num_like":772,"num_collection":200,"num_comments":120,"slug":"resource-MicroService-other-微服务基本介绍","date":"2021-09-02T16:00:00.000Z","img":"/img/header_img/MicroService/MicroService.PNG","format":"gallery","_id":"clhrbp2e000cjo5lgcxbfa0mo","project":"MicroService","type":"hot","subtitle":"将应用拆分成一个一个的服务,每一个服务都是提供特定的功能，一个服务只做一件事","hot":"read","site":{"data":{}},"updated":"2022-09-20T01:52:41.872Z","author":"Sunfy","comments":true,"path":"api/articles/resource-MicroService-other-微服务基本介绍.json","webPath":"2021/09/03/resource-MicroService-other-微服务基本介绍/","permalink":"https://sunfy9.gitee.io/2021/09/03/resource-MicroService-other-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/","excerpt":null,"covers":["../../../../img/微服务基本介绍/image-20211026222045441.png","../../../../img/微服务基本介绍/image-20211026222111170.png","../../../../img/微服务基本介绍/image-20211026222304881.png","../../../../img/微服务基本介绍/image-20211026223351469.png"],"keywords":"sunfy, hexo-theme-snail","content":"<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><p><a href=\"https://martinfowler.com/articles/microservices.html\" target=\"_blank\" rel=\"noopener\">Microservices (martinfowler.com)</a></p>\n<p>微服务核心就是把传统的单机应用，根据业务<strong>将应用拆分成一个一个的服务</strong>，彻底的解耦，<strong>每一个服务都是提供特定的功能，一个服务只做一件事</strong>，类似进程，每个服务都能够单独部署，甚至可以拥有自己的数据库。这样一个一个小服务就是微服务。</p>\n<p>比如说：传统的电商应用有订单、支付、库存、物流、积分等模块，我们可以根据业务模型对应的拆分为订单服务、支付服务、库存服务、物流服务、积分服务。</p>\n<p>如果不拆分的时候，非核心业务出现bug，导致系统问题，内存溢出等，会导致整个服务宕机。但是拆分后只会影响其中一个微服务，核心应用不会受影响。这样可以最大限度减少对系统的影响。</p>\n<h1 id=\"微服务的特点\"><a href=\"#微服务的特点\" class=\"headerlink\" title=\"微服务的特点\"></a>微服务的特点</h1><h2 id=\"独立部署、灵活扩展\"><a href=\"#独立部署、灵活扩展\" class=\"headerlink\" title=\"独立部署、灵活扩展\"></a>独立部署、灵活扩展<sunfy-line></h2><p>传统的单体架构以整个系统为单位进行部署，而微服务是以每一个独立组件为单位进行部署。</p>\n<p><img src=\"../../../../img/微服务基本介绍/image-20211026222045441.png\" alt=\"image-20211026222045441\"></p>\n<p><img src=\"../../../../img/微服务基本介绍/image-20211026222111170.png\" alt=\"image-20211026222111170\"></p>\n<h2 id=\"资源有效隔离\"><a href=\"#资源有效隔离\" class=\"headerlink\" title=\"资源有效隔离\"></a>资源有效隔离</h2><p>微服务涉及原则之一，就是每一个微服务拥有独立的数据源，例如微服务A想要读写微服务B的数据库，只能通过微服务B对外暴露的接口来完成，这样有效避免服务之间争用数据库和缓存资源所带来的问题。</p>\n<p><img src=\"../../../../img/微服务基本介绍/image-20211026222304881.png\" alt=\"image-20211026222304881\"></p>\n<h2 id=\"团队组织架构调整\"><a href=\"#团队组织架构调整\" class=\"headerlink\" title=\"团队组织架构调整\"></a>团队组织架构调整</h2><p>微服务设计思想的划分对团队组织架构有着一定的影响，使得团队组织架构的划分更倾向于垂直架构，一个业务由一个团队负责。</p>\n<p><img src=\"../../../../img/微服务基本介绍/image-20211026223351469.png\" alt=\"image-20211026223351469\"></p>\n<h1 id=\"微服务架构\"><a href=\"#微服务架构\" class=\"headerlink\" title=\"微服务架构\"></a>微服务架构</h1><p>微服务架构风格是一种将单个应用程序作为一套小型服务开发的方法，每种应用程序都在自己的进行中进行，并于轻量级机制（通常是HTTP资源API）进行通信。这些服务是围绕业务功能构建的，可以通过全自动部署机制独立部署。这些服务可以用不同的编程语言编写，并使用不同的数据存储技术。</p>\n<p><strong><code>SOA</code>架构强调的是异构系统之间的通信和解耦合，而微服务架构强调的是系统业务边界做细粒度的拆分和部署。</strong></p>\n<p><code>SOA</code>：<a href=\"https://baike.baidu.com/item/SOA/2140650?fr=aladdin\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/SOA/2140650?fr=aladdin</a></p>\n<p>面向服务架构（<code>SOA</code>）是一个组件模型，它将应用程序的不同功能单元（称为服务）进行拆分，并通过这些服务之间定义良好的接口和协议联系起来。<strong>接口是采用中立的方式进行定义的</strong>，它应该独立于实现服务的硬件平台、操作系统和编程语言。这使得构建在各种各样的系统中的服务可以以一种统一和通用的方式进行交互。</p>\n<p>微服务架构是一个架构风格，提倡：</p>\n<ul>\n<li>将一个单一应用程序开发为一组小型服务</li>\n<li>每个服务运行在自己的进程中</li>\n<li>服务间通过轻量级的通信机制（<code>http</code>|<code>rest</code>|<code>api</code>）</li>\n<li>每个服务都能独立的部署</li>\n<li>每个服务甚至可以拥有自己的数据库</li>\n</ul>\n<p>微服务以及微服务架构的是两个完全不同的概念。</p>\n<ul>\n<li>微服务强调的是服务的大小和对外提供的单一功能，</li>\n<li>微服务架构是指把一个一个的微服务组合管理起来，对外提供一套完整的服务。</li>\n</ul>\n<h1 id=\"微服务的优缺点\"><a href=\"#微服务的优缺点\" class=\"headerlink\" title=\"微服务的优缺点\"></a>微服务的优缺点</h1><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>每个服务足够小，足够内聚，代码更加容易理解，专注一个业务功能点（对比传统应用，想要改几行代码需要了解整个系统）</li>\n<li>开发简单，一个服务只干一个事情。</li>\n<li>微服务能够被2-5个人的小团队开发，提高效率。</li>\n<li>按需伸缩，服务松耦合，每个服务都能够独立开发部署</li>\n<li>前后端分离，作为java开发人员，我们只要关心后端接口的性能以及安全性，不需要关注页面的人机交互(<code>H5</code>工程师)根据前后端接口协议，根据入参，返回<code>json</code>的回参。</li>\n<li>一个服务可以拥有自己的数据库，也可以多个服务连接同一个数据库。</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>增加了运维人员工作量以前只要部署一个war包，现在可能需要部署成百上千个war包 (<code>k8s</code>+<code>docker</code>+<code>jenkins</code> )</li>\n<li>服务之间相互调用，增加通信成本</li>\n<li>数据一致性问题（分布式事务问题）</li>\n<li>性能监控等，问题定位等等</li>\n</ul>\n<h1 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h1><h2 id=\"合适\"><a href=\"#合适\" class=\"headerlink\" title=\"合适\"></a>合适</h2><ul>\n<li>大型复杂的项目</li>\n<li>快读迭代的项目</li>\n<li>并发高的项目</li>\n</ul>\n<h2 id=\"不合适\"><a href=\"#不合适\" class=\"headerlink\" title=\"不合适\"></a>不合适</h2><ul>\n<li>业务稳定，就是修修bug，改改数据</li>\n<li>迭代周期长，发版频率低的</li>\n</ul>\n","more":"<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><p><a href=\"https://martinfowler.com/articles/microservices.html\" target=\"_blank\" rel=\"noopener\">Microservices (martinfowler.com)</a></p>\n<p>微服务核心就是把传统的单机应用，根据业务<strong>将应用拆分成一个一个的服务</strong>，彻底的解耦，<strong>每一个服务都是提供特定的功能，一个服务只做一件事</strong>，类似进程，每个服务都能够单独部署，甚至可以拥有自己的数据库。这样一个一个小服务就是微服务。</p>\n<p>比如说：传统的电商应用有订单、支付、库存、物流、积分等模块，我们可以根据业务模型对应的拆分为订单服务、支付服务、库存服务、物流服务、积分服务。</p>\n<p>如果不拆分的时候，非核心业务出现bug，导致系统问题，内存溢出等，会导致整个服务宕机。但是拆分后只会影响其中一个微服务，核心应用不会受影响。这样可以最大限度减少对系统的影响。</p>\n<h1 id=\"微服务的特点\"><a href=\"#微服务的特点\" class=\"headerlink\" title=\"微服务的特点\"></a>微服务的特点</h1><h2 id=\"独立部署、灵活扩展\"><a href=\"#独立部署、灵活扩展\" class=\"headerlink\" title=\"独立部署、灵活扩展\"></a>独立部署、灵活扩展<sunfy-line></h2><p>传统的单体架构以整个系统为单位进行部署，而微服务是以每一个独立组件为单位进行部署。</p>\n<p><img src=\"../../../../img/微服务基本介绍/image-20211026222045441.png\" alt=\"image-20211026222045441\"></p>\n<p><img src=\"../../../../img/微服务基本介绍/image-20211026222111170.png\" alt=\"image-20211026222111170\"></p>\n<h2 id=\"资源有效隔离\"><a href=\"#资源有效隔离\" class=\"headerlink\" title=\"资源有效隔离\"></a>资源有效隔离</h2><p>微服务涉及原则之一，就是每一个微服务拥有独立的数据源，例如微服务A想要读写微服务B的数据库，只能通过微服务B对外暴露的接口来完成，这样有效避免服务之间争用数据库和缓存资源所带来的问题。</p>\n<p><img src=\"../../../../img/微服务基本介绍/image-20211026222304881.png\" alt=\"image-20211026222304881\"></p>\n<h2 id=\"团队组织架构调整\"><a href=\"#团队组织架构调整\" class=\"headerlink\" title=\"团队组织架构调整\"></a>团队组织架构调整</h2><p>微服务设计思想的划分对团队组织架构有着一定的影响，使得团队组织架构的划分更倾向于垂直架构，一个业务由一个团队负责。</p>\n<p><img src=\"../../../../img/微服务基本介绍/image-20211026223351469.png\" alt=\"image-20211026223351469\"></p>\n<h1 id=\"微服务架构\"><a href=\"#微服务架构\" class=\"headerlink\" title=\"微服务架构\"></a>微服务架构</h1><p>微服务架构风格是一种将单个应用程序作为一套小型服务开发的方法，每种应用程序都在自己的进行中进行，并于轻量级机制（通常是HTTP资源API）进行通信。这些服务是围绕业务功能构建的，可以通过全自动部署机制独立部署。这些服务可以用不同的编程语言编写，并使用不同的数据存储技术。</p>\n<p><strong><code>SOA</code>架构强调的是异构系统之间的通信和解耦合，而微服务架构强调的是系统业务边界做细粒度的拆分和部署。</strong></p>\n<p><code>SOA</code>：<a href=\"https://baike.baidu.com/item/SOA/2140650?fr=aladdin\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/SOA/2140650?fr=aladdin</a></p>\n<p>面向服务架构（<code>SOA</code>）是一个组件模型，它将应用程序的不同功能单元（称为服务）进行拆分，并通过这些服务之间定义良好的接口和协议联系起来。<strong>接口是采用中立的方式进行定义的</strong>，它应该独立于实现服务的硬件平台、操作系统和编程语言。这使得构建在各种各样的系统中的服务可以以一种统一和通用的方式进行交互。</p>\n<p>微服务架构是一个架构风格，提倡：</p>\n<ul>\n<li>将一个单一应用程序开发为一组小型服务</li>\n<li>每个服务运行在自己的进程中</li>\n<li>服务间通过轻量级的通信机制（<code>http</code>|<code>rest</code>|<code>api</code>）</li>\n<li>每个服务都能独立的部署</li>\n<li>每个服务甚至可以拥有自己的数据库</li>\n</ul>\n<p>微服务以及微服务架构的是两个完全不同的概念。</p>\n<ul>\n<li>微服务强调的是服务的大小和对外提供的单一功能，</li>\n<li>微服务架构是指把一个一个的微服务组合管理起来，对外提供一套完整的服务。</li>\n</ul>\n<h1 id=\"微服务的优缺点\"><a href=\"#微服务的优缺点\" class=\"headerlink\" title=\"微服务的优缺点\"></a>微服务的优缺点</h1><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>每个服务足够小，足够内聚，代码更加容易理解，专注一个业务功能点（对比传统应用，想要改几行代码需要了解整个系统）</li>\n<li>开发简单，一个服务只干一个事情。</li>\n<li>微服务能够被2-5个人的小团队开发，提高效率。</li>\n<li>按需伸缩，服务松耦合，每个服务都能够独立开发部署</li>\n<li>前后端分离，作为java开发人员，我们只要关心后端接口的性能以及安全性，不需要关注页面的人机交互(<code>H5</code>工程师)根据前后端接口协议，根据入参，返回<code>json</code>的回参。</li>\n<li>一个服务可以拥有自己的数据库，也可以多个服务连接同一个数据库。</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>增加了运维人员工作量以前只要部署一个war包，现在可能需要部署成百上千个war包 (<code>k8s</code>+<code>docker</code>+<code>jenkins</code> )</li>\n<li>服务之间相互调用，增加通信成本</li>\n<li>数据一致性问题（分布式事务问题）</li>\n<li>性能监控等，问题定位等等</li>\n</ul>\n<h1 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h1><h2 id=\"合适\"><a href=\"#合适\" class=\"headerlink\" title=\"合适\"></a>合适</h2><ul>\n<li>大型复杂的项目</li>\n<li>快读迭代的项目</li>\n<li>并发高的项目</li>\n</ul>\n<h2 id=\"不合适\"><a href=\"#不合适\" class=\"headerlink\" title=\"不合适\"></a>不合适</h2><ul>\n<li>业务稳定，就是修修bug，改改数据</li>\n<li>迭代周期长，发版频率低的</li>\n</ul>\n","next":{"title":"数据结构测试题---栈/队列","path":"api/articles/resource-dataStructure-leetcode-leetcode-stack.json","image":"/img/header_img/dataStructure/stack.jpg","num_read":102,"num_like":734,"num_collection":560,"num_comments":46},"prev":{"title":"数据结构测试题---树","path":"api/articles/resource-dataStructure-leetcode-leetcode-tree.json","image":"/img/header_img/dataStructure/tree.jpg","num_read":1440,"num_like":67,"num_collection":482,"num_comments":156},"categories":[{"name":"微服务","path":"api/categories/微服务.json","pathContent":"api/categories/微服务","description":"一种云原生框架方法，其中单个应用程序由许多松散耦合且可独立部署的较小组件或服务组成","cover":"https://sunfy9.gitee.io/project/photo/project/MicroService.PNG"}],"tags":[]}