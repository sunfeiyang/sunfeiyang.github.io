{"title":"103-简述 MyBatis 的插件运行原理，如何编写一个插件。","num_read":1336,"num_like":325,"num_collection":836,"num_comments":177,"slug":"resource-ORM-MyBatis-103-mbPlugins","date":"2021-08-10T16:00:00.000Z","img":"/img/header_img/java/myBatis.jpg","_id":"clhrbp2fl00e2o5lg0w334xbj","site":{"data":{}},"updated":"2022-09-20T02:03:49.950Z","author":"Sunfy","comments":true,"path":"api/articles/resource-ORM-MyBatis-103-mbPlugins.json","webPath":"2021/08/11/resource-ORM-MyBatis-103-mbPlugins/","permalink":"https://sunfy9.gitee.io/2021/08/11/resource-ORM-MyBatis-103-mbPlugins/","excerpt":"MyBatis四大对象（Executor、ParamterHandler、ResultSetHandler、StatementHandler），创建过程中都会有插件进行介入。插件利用JDK动态代理机制一层层的包装目标对象，实现在目标对象执行目标方法之前进行拦截的效果。","covers":["../../../../img/103-mbPlugins/image-20210811110251376.png","../../../../img/103-mbPlugins/image-20210811110738463.png","../../../../img/103-mbPlugins/myBatis执行时序图.png","../../../../img/103-mbPlugins/image-20210811132541554.png","../../../../img/103-mbPlugins/image-20210811113136447.png","../../../../img/103-mbPlugins/image-20210811113729030.png","../../../../img/103-mbPlugins/image-20210811114055305.png","../../../../img/103-mbPlugins/MyBatis插件拦截器运行时序图.png"],"keywords":"sunfy, hexo-theme-snail","content":"<p>MyBatis四大对象（<code>Executor、ParamterHandler、ResultSetHandler、StatementHandler</code>），创建过程中都会有插件进行介入。插件利用<code>JDK动态代理</code>机制一层层的包装目标对象，实现在目标对象执行目标方法之前进行拦截的效果。<a id=\"more\"></a></p>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><p>插件：</p>\n<ul>\n<li>实现<code>Interceptor</code>接口</li>\n<li>通过<code>@Intercepts</code>标注插件拦截规则</li>\n<li>配置文件中引用自定义插件</li>\n</ul>\n<h2 id=\"插件实例\"><a href=\"#插件实例\" class=\"headerlink\" title=\"插件实例\"></a>插件实例</h2><h3 id=\"插件功能\"><a href=\"#插件功能\" class=\"headerlink\" title=\"插件功能\"></a>插件功能</h3><p>实现打印可执行sql，并记录sql方法执行时长。</p>\n<h3 id=\"编写插件\"><a href=\"#编写插件\" class=\"headerlink\" title=\"编写插件\"></a>编写插件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 性能分析，打印完整sql并记录运行时长</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Intercepts</span> 定义拦截级别</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> sunfy</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021-8-11 10:56</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Intercepts</span>(&#123;<span class=\"meta\">@Signature</span>(type = Executor<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">method</span> </span>= <span class=\"string\">\"query\"</span>,</span><br><span class=\"line\">        args = &#123;MappedStatement<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">Object</span>.<span class=\"title\">class</span>, <span class=\"title\">RowBounds</span>.<span class=\"title\">class</span>, <span class=\"title\">ResultHandler</span>.<span class=\"title\">class</span>&#125;)&#125;)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">TestInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> DateFormat DATE_FORMAT = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Invocation invocation)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//被代理对象</span></span><br><span class=\"line\">        Object target = invocation.getTarget();</span><br><span class=\"line\">        System.out.println(target.getClass());</span><br><span class=\"line\">        <span class=\"comment\">//代理方法</span></span><br><span class=\"line\">        Method method = invocation.getMethod();</span><br><span class=\"line\">        System.out.println(method.getName());</span><br><span class=\"line\">        <span class=\"comment\">//方法参数</span></span><br><span class=\"line\">        Object[] args = invocation.getArgs();</span><br><span class=\"line\">        System.out.println(Arrays.toString(args));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 映射语句,包含了sql执行过程中的所有数据</span></span><br><span class=\"line\">        MappedStatement mappedStatement = (MappedStatement) invocation.getArgs()[<span class=\"number\">0</span>];</span><br><span class=\"line\">        Object parameterObject = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (invocation.getArgs().length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            parameterObject = invocation.getArgs()[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// do something ...... 方法拦截前执行代码块</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法执行前操作...\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 计算执行 SQL 耗时</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        Object result = invocation.proceed();</span><br><span class=\"line\">        <span class=\"comment\">// 计算执行 SQL 耗时</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法执行后操作...\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// do something .......方法拦截后执行代码块</span></span><br><span class=\"line\">        String statementId = mappedStatement.getId();</span><br><span class=\"line\">        BoundSql boundSql = mappedStatement.getBoundSql(parameterObject);</span><br><span class=\"line\">        Configuration configuration = mappedStatement.getConfiguration();</span><br><span class=\"line\">        <span class=\"comment\">// 根据执行情况获取sql</span></span><br><span class=\"line\">        String sql = getSql(boundSql, parameterObject, configuration);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">long</span> timing = end - start;</span><br><span class=\"line\">        <span class=\"comment\">// 格式化 SQL 打印执行结果</span></span><br><span class=\"line\">        Object target1 = PluginUtils.realTarget(invocation.getTarget());</span><br><span class=\"line\">        MetaObject metaObject = SystemMetaObject.forObject(target1);</span><br><span class=\"line\">        StringBuilder formatSql = <span class=\"keyword\">new</span> StringBuilder()</span><br><span class=\"line\">                .append(StringPool.NEWLINE)</span><br><span class=\"line\">                .append(<span class=\"string\">\"Time：\"</span>).append(timing)</span><br><span class=\"line\">                .append(<span class=\"string\">\" ms - ID：\"</span>).append(statementId)</span><br><span class=\"line\">                .append(StringPool.NEWLINE).append(<span class=\"string\">\"Execute SQL：\"</span>)</span><br><span class=\"line\">                .append(sql)</span><br><span class=\"line\">                .append(StringPool.NEWLINE);</span><br><span class=\"line\">        System.out.println(formatSql.toString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">plugin</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Plugin.wrap(target, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理sql语句，此方法和本文章关系不大，主要是java基础的一些处理</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> sunfy</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@date</span> 2021-8-11 10:59</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getSql</span><span class=\"params\">(BoundSql boundSql, Object parameterObject, Configuration configuration)</span> </span>&#123;</span><br><span class=\"line\">        String sql = boundSql.getSql().replaceAll(<span class=\"string\">\"[\\\\s]+\"</span>, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class=\"line\">        TypeHandlerRegistry typeHandlerRegistry = configuration.getTypeHandlerRegistry();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parameterMappings != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; parameterMappings.size(); i++) &#123;</span><br><span class=\"line\">                ParameterMapping parameterMapping = parameterMappings.get(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;</span><br><span class=\"line\">                    Object value;</span><br><span class=\"line\">                    String propertyName = parameterMapping.getProperty();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;</span><br><span class=\"line\">                        value = boundSql.getAdditionalParameter(propertyName);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (parameterObject == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        value = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</span><br><span class=\"line\">                        value = parameterObject;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        MetaObject metaObject = configuration.newMetaObject(parameterObject);</span><br><span class=\"line\">                        value = metaObject.getValue(propertyName);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    sql = replacePlaceholder(sql, value);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">replacePlaceholder</span><span class=\"params\">(String sql, Object propertyValue)</span> </span>&#123;</span><br><span class=\"line\">        String result;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (propertyValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (propertyValue <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                result = <span class=\"string\">\"'\"</span> + propertyValue + <span class=\"string\">\"'\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (propertyValue <span class=\"keyword\">instanceof</span> Date) &#123;</span><br><span class=\"line\">                result = <span class=\"string\">\"'\"</span> + DATE_FORMAT.format(propertyValue) + <span class=\"string\">\"'\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result = propertyValue.toString();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result = <span class=\"string\">\"null\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sql.replaceFirst(<span class=\"string\">\"\\\\?\"</span>, Matcher.quoteReplacement(result));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用插件\"><a href=\"#引用插件\" class=\"headerlink\" title=\"引用插件\"></a><sunfy-line>引用插件</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">interceptor</span>=<span class=\"string\">\"com.sunfy.plugins.PerformanceInterceptor\"</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果对比\"><a href=\"#运行结果对比\" class=\"headerlink\" title=\"运行结果对比\"></a>运行结果对比</h3><p>引用插件之前：</p>\n<p><img src=\"../../../../img/103-mbPlugins/image-20210811110251376.png\" alt=\"image-20210811110251376\"></p>\n<p>引用插件之后：</p>\n<p><img src=\"../../../../img/103-mbPlugins/image-20210811110738463.png\" alt=\"image-20210811110738463\"></p>\n<h2 id=\"插件介绍\"><a href=\"#插件介绍\" class=\"headerlink\" title=\"插件介绍\"></a>插件介绍</h2><p>MyBatis四大对象（<code>Executor、ParamterHandler、ResultSetHandler、StatementHandler</code>），创建过程中都会有插件进行介入。插件利用<code>JDK动态代理</code>机制一层层的包装目标对象，实现在目标对象执行目标方法之前进行拦截的效果。</p>\n<p>默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行器Executor（update、query、commit、rollback等方法）；</span><br><span class=\"line\">参数处理器ParameterHandler（getParameterObject、setParameters方法）；</span><br><span class=\"line\">结果集处理器ResultSetHandler（handleResultSets、handleOutputParameters等方法）；</span><br><span class=\"line\">SQL语法构建器StatementHandler（prepare、parameterize、batch、update、query等方法）；</span><br></pre></td></tr></table></figure>\n<p>下面看一下MyBatis执行的时序图：</p>\n<p><img src=\"../../../../img/103-mbPlugins/myBatis执行时序图.png\" alt=\"myBatis执行时序图\"></p>\n<h2 id=\"生成四大代理对象\"><a href=\"#生成四大代理对象\" class=\"headerlink\" title=\"生成四大代理对象\"></a>生成四大代理对象</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.ibatis.session;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Configuration</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Mybatis实现Sql入参设置的对象</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@author</span> sunfy</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@date</span> 2021-8-11 8:57</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ParameterHandler <span class=\"title\">newParameterHandler</span><span class=\"params\">(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql)</span> </span>&#123;</span><br><span class=\"line\">    ParameterHandler parameterHandler = mappedStatement.getLang().createParameterHandler(mappedStatement, parameterObject, boundSql);</span><br><span class=\"line\">    parameterHandler = (ParameterHandler) interceptorChain.pluginAll(parameterHandler);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parameterHandler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Mybatis把ResultSet集合映射成POJO的接口对象</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@author</span> sunfy</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@date</span> 2021-8-11 8:58</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ResultSetHandler <span class=\"title\">newResultSetHandler</span><span class=\"params\">(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds, ParameterHandler parameterHandler,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class=\"line\">    ResultSetHandler resultSetHandler = <span class=\"keyword\">new</span> DefaultResultSetHandler(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);</span><br><span class=\"line\">    resultSetHandler = (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resultSetHandler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Mybatis直接和数据库执行sql脚本的对象</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@author</span> sunfy</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@date</span> 2021-8-11 8:58</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> StatementHandler <span class=\"title\">newStatementHandler</span><span class=\"params\">(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class=\"line\">    StatementHandler statementHandler = <span class=\"keyword\">new</span> RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);</span><br><span class=\"line\">    statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> statementHandler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Mybatis的内部执行器，它负责调用StatementHandler操作数据库</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@author</span> sunfy</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@date</span> 2021-8-11 8:59</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Executor <span class=\"title\">newExecutor</span><span class=\"params\">(Transaction transaction)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newExecutor(transaction, defaultExecutorType);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 方法实现说明:创建一个sql语句执行器对象</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> transaction:事务</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> executorType:执行器类型</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span>:Executor执行器对象</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@exception</span>:</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Executor <span class=\"title\">newExecutor</span><span class=\"params\">(Transaction transaction, ExecutorType executorType)</span> </span>&#123;</span><br><span class=\"line\">    executorType = executorType == <span class=\"keyword\">null</span> ? defaultExecutorType : executorType;</span><br><span class=\"line\">    executorType = executorType == <span class=\"keyword\">null</span> ? ExecutorType.SIMPLE : executorType;</span><br><span class=\"line\">    Executor executor;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断执行器的类型</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量的执行器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ExecutorType.BATCH == executorType) &#123;</span><br><span class=\"line\">      executor = <span class=\"keyword\">new</span> BatchExecutor(<span class=\"keyword\">this</span>, transaction);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ExecutorType.REUSE == executorType) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//可重复使用的执行器</span></span><br><span class=\"line\">      executor = <span class=\"keyword\">new</span> ReuseExecutor(<span class=\"keyword\">this</span>, transaction);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//简单的sql执行器对象</span></span><br><span class=\"line\">      executor = <span class=\"keyword\">new</span> SimpleExecutor(<span class=\"keyword\">this</span>, transaction);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断mybatis的全局配置文件是否开启缓存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cacheEnabled) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//把当前的简单的执行器包装成一个CachingExecutor</span></span><br><span class=\"line\">      executor = <span class=\"keyword\">new</span> CachingExecutor(executor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用所有的拦截器对象plugin方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    executor = (Executor) interceptorChain.pluginAll(executor);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> executor;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>四大对象最终都会执行方法，<code>interceptorChain.pluginAll(statementHandler)</code></p>\n<p><img src=\"../../../../img/103-mbPlugins/image-20210811132541554.png\" alt=\"image-20210811132541554\"></p>\n<h2 id=\"插件加载\"><a href=\"#插件加载\" class=\"headerlink\" title=\"插件加载\"></a>插件加载</h2><p><img src=\"../../../../img/103-mbPlugins/image-20210811113136447.png\" alt=\"image-20210811113136447\"></p>\n<p><code>org.apache.ibatis.builder.xml.XMLConfigBuilder</code>解析<code>xml</code>配置文件时，加入<code>plugins</code>，此处解析了整个xml文件</p>\n<p><img src=\"../../../../img/103-mbPlugins/image-20210811113729030.png\" alt=\"image-20210811113729030\"></p>\n<p>MyBatis源码中解析<code>pulgins</code>的方法</p>\n<p><img src=\"../../../../img/103-mbPlugins/image-20210811114055305.png\" alt=\"image-20210811114055305\"></p>\n<h2 id=\"插件执行过程\"><a href=\"#插件执行过程\" class=\"headerlink\" title=\"插件执行过程\"></a>插件执行过程</h2><p>由于真正去执行<code>Executor、ParameterHandler、ResultSetHandler和StatementHandler</code>类中的方法的对象是代理对象（建议将代理对象转为class文件，反编译查看其结构，帮助理解），所以在执行方法时，首先调用的是<code>Plugin</code>类（实现了<code>InvocationHandler</code>接口）的<code>invoke</code>方法，如下：</p>\n<p>首先根据执行方法所属类获取拦截器中声明需要拦截的方法集合；</p>\n<p>判断当前方法需不需要执行拦截逻辑，需要的话，执行拦截逻辑方法（即<code>Interceptor</code>接口的<code>intercept</code>方法实现），不需要则直接执行原方法。</p>\n<p>一般需要用户自定义实现逻辑，其中有一个重要参数，即<code>Invocation</code>类，通过改参数我们可以获取执行对象，执行方法，以及执行方法上的参数，从而进行各种业务逻辑实现，一般在该方法的最后一句代码都是<code>invocation.proceed()</code>（内部执行<code>method.invoke</code>方法），否则将无法执行下一个拦截器的<code>intercept</code>方法。</p>\n<p><img src=\"../../../../img/103-mbPlugins/MyBatis插件拦截器运行时序图.png\" alt=\"img\"></p>\n<h2 id=\"插件适用场景\"><a href=\"#插件适用场景\" class=\"headerlink\" title=\"插件适用场景\"></a>插件适用场景</h2><h3 id=\"分页功能\"><a href=\"#分页功能\" class=\"headerlink\" title=\"分页功能\"></a>分页功能</h3><p>MyBatis的分页默认是基于内存分页的（查出所有，再截取），数据量大的情况下效率较低，不过使用MyBatis插件可以改变该行为，只需要拦截<code>StatementHandler</code>类的prepare方法，改变要执行的SQL语句为分页语句即可；</p>\n<h3 id=\"同类语句执行\"><a href=\"#同类语句执行\" class=\"headerlink\" title=\"同类语句执行\"></a>同类语句执行</h3><p>一般业务系统都会有创建者，创建时间，修改者，修改时间四个字段，对于这四个字段的赋值，实际上可以在<code>DAO</code>层统一拦截处理，可以用MyBatis插件拦截<code>Executor</code>类的update方法，对相关参数进行统一赋值即可；</p>\n<h3 id=\"性能监控\"><a href=\"#性能监控\" class=\"headerlink\" title=\"性能监控\"></a>性能监控</h3><p>对于SQL语句执行的性能监控，可以通过拦截<code>Executor</code>类的update, query等方法，用日志记录每个方法执行的时间；</p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>其实MyBatis扩展性还是很强的，基于插件机制，基本上可以控制SQL执行的各个阶段，如执行阶段，参数处理阶段，语法构建阶段，结果集处理阶段，具体可以根据项目业务来实现对应业务逻辑。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>MyBatis 只支持针对 <code>ParameterHandler、ResultSetHandler、StatementHandler、Executor</code> 这 4 种接口的插件， MyBatis 使用 JDK 的动态代理， 为需要拦截的接口生成代理对象以实现接口方法拦截功能， 每当执行这 4 种接口对象的方法时，就会进入拦截方法，具体就是 <code>InvocationHandler</code> 的 <code>invoke()</code> 方法， 拦截那些你指定需要拦截的方法。</p>\n<p>编写插件： 实现 MyBatis 的 <code>Interceptor</code> 接口并复写 <code>intercept()</code>方法， 然后在给插件编写注解， 指定 要拦截哪一个接口的哪些方法即可， 在配置文件中配置编写的插件。</p>\n<p>另外，如果配置了多个拦截器的话，会出现层层代理的情况，即代理对象代理了另外一个代理对象，形成一个代理链条，执行的时候，也是层层执行；</p>\n<p>关于MyBatis插件涉及到的设计模式和软件思想如下：</p>\n<ul>\n<li>设计模式：代理模式、责任链模式；</li>\n<li>软件思想：AOP编程思想，降低模块间的耦合度，使业务模块更加独立；</li>\n</ul>\n<p>一些注意事项：</p>\n<ul>\n<li>不要定义过多的插件，代理嵌套过多，执行方法的时候，比较耗性能；</li>\n<li>拦截器实现类的intercept方法里最后不要忘了执行<code>invocation.proceed()</code>方法，否则多个拦截器情况下，执行链条会断掉； </li>\n</ul>\n","more":"</p>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><p>插件：</p>\n<ul>\n<li>实现<code>Interceptor</code>接口</li>\n<li>通过<code>@Intercepts</code>标注插件拦截规则</li>\n<li>配置文件中引用自定义插件</li>\n</ul>\n<h2 id=\"插件实例\"><a href=\"#插件实例\" class=\"headerlink\" title=\"插件实例\"></a>插件实例</h2><h3 id=\"插件功能\"><a href=\"#插件功能\" class=\"headerlink\" title=\"插件功能\"></a>插件功能</h3><p>实现打印可执行sql，并记录sql方法执行时长。</p>\n<h3 id=\"编写插件\"><a href=\"#编写插件\" class=\"headerlink\" title=\"编写插件\"></a>编写插件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 性能分析，打印完整sql并记录运行时长</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Intercepts</span> 定义拦截级别</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> sunfy</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021-8-11 10:56</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Intercepts</span>(&#123;<span class=\"meta\">@Signature</span>(type = Executor<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">method</span> </span>= <span class=\"string\">\"query\"</span>,</span><br><span class=\"line\">        args = &#123;MappedStatement<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">Object</span>.<span class=\"title\">class</span>, <span class=\"title\">RowBounds</span>.<span class=\"title\">class</span>, <span class=\"title\">ResultHandler</span>.<span class=\"title\">class</span>&#125;)&#125;)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">TestInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> DateFormat DATE_FORMAT = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Invocation invocation)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//被代理对象</span></span><br><span class=\"line\">        Object target = invocation.getTarget();</span><br><span class=\"line\">        System.out.println(target.getClass());</span><br><span class=\"line\">        <span class=\"comment\">//代理方法</span></span><br><span class=\"line\">        Method method = invocation.getMethod();</span><br><span class=\"line\">        System.out.println(method.getName());</span><br><span class=\"line\">        <span class=\"comment\">//方法参数</span></span><br><span class=\"line\">        Object[] args = invocation.getArgs();</span><br><span class=\"line\">        System.out.println(Arrays.toString(args));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 映射语句,包含了sql执行过程中的所有数据</span></span><br><span class=\"line\">        MappedStatement mappedStatement = (MappedStatement) invocation.getArgs()[<span class=\"number\">0</span>];</span><br><span class=\"line\">        Object parameterObject = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (invocation.getArgs().length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            parameterObject = invocation.getArgs()[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// do something ...... 方法拦截前执行代码块</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法执行前操作...\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 计算执行 SQL 耗时</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        Object result = invocation.proceed();</span><br><span class=\"line\">        <span class=\"comment\">// 计算执行 SQL 耗时</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法执行后操作...\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// do something .......方法拦截后执行代码块</span></span><br><span class=\"line\">        String statementId = mappedStatement.getId();</span><br><span class=\"line\">        BoundSql boundSql = mappedStatement.getBoundSql(parameterObject);</span><br><span class=\"line\">        Configuration configuration = mappedStatement.getConfiguration();</span><br><span class=\"line\">        <span class=\"comment\">// 根据执行情况获取sql</span></span><br><span class=\"line\">        String sql = getSql(boundSql, parameterObject, configuration);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">long</span> timing = end - start;</span><br><span class=\"line\">        <span class=\"comment\">// 格式化 SQL 打印执行结果</span></span><br><span class=\"line\">        Object target1 = PluginUtils.realTarget(invocation.getTarget());</span><br><span class=\"line\">        MetaObject metaObject = SystemMetaObject.forObject(target1);</span><br><span class=\"line\">        StringBuilder formatSql = <span class=\"keyword\">new</span> StringBuilder()</span><br><span class=\"line\">                .append(StringPool.NEWLINE)</span><br><span class=\"line\">                .append(<span class=\"string\">\"Time：\"</span>).append(timing)</span><br><span class=\"line\">                .append(<span class=\"string\">\" ms - ID：\"</span>).append(statementId)</span><br><span class=\"line\">                .append(StringPool.NEWLINE).append(<span class=\"string\">\"Execute SQL：\"</span>)</span><br><span class=\"line\">                .append(sql)</span><br><span class=\"line\">                .append(StringPool.NEWLINE);</span><br><span class=\"line\">        System.out.println(formatSql.toString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">plugin</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Plugin.wrap(target, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理sql语句，此方法和本文章关系不大，主要是java基础的一些处理</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> sunfy</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@date</span> 2021-8-11 10:59</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getSql</span><span class=\"params\">(BoundSql boundSql, Object parameterObject, Configuration configuration)</span> </span>&#123;</span><br><span class=\"line\">        String sql = boundSql.getSql().replaceAll(<span class=\"string\">\"[\\\\s]+\"</span>, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class=\"line\">        TypeHandlerRegistry typeHandlerRegistry = configuration.getTypeHandlerRegistry();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parameterMappings != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; parameterMappings.size(); i++) &#123;</span><br><span class=\"line\">                ParameterMapping parameterMapping = parameterMappings.get(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;</span><br><span class=\"line\">                    Object value;</span><br><span class=\"line\">                    String propertyName = parameterMapping.getProperty();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;</span><br><span class=\"line\">                        value = boundSql.getAdditionalParameter(propertyName);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (parameterObject == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        value = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</span><br><span class=\"line\">                        value = parameterObject;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        MetaObject metaObject = configuration.newMetaObject(parameterObject);</span><br><span class=\"line\">                        value = metaObject.getValue(propertyName);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    sql = replacePlaceholder(sql, value);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sql;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">replacePlaceholder</span><span class=\"params\">(String sql, Object propertyValue)</span> </span>&#123;</span><br><span class=\"line\">        String result;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (propertyValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (propertyValue <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                result = <span class=\"string\">\"'\"</span> + propertyValue + <span class=\"string\">\"'\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (propertyValue <span class=\"keyword\">instanceof</span> Date) &#123;</span><br><span class=\"line\">                result = <span class=\"string\">\"'\"</span> + DATE_FORMAT.format(propertyValue) + <span class=\"string\">\"'\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result = propertyValue.toString();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result = <span class=\"string\">\"null\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sql.replaceFirst(<span class=\"string\">\"\\\\?\"</span>, Matcher.quoteReplacement(result));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用插件\"><a href=\"#引用插件\" class=\"headerlink\" title=\"引用插件\"></a><sunfy-line>引用插件</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">interceptor</span>=<span class=\"string\">\"com.sunfy.plugins.PerformanceInterceptor\"</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"运行结果对比\"><a href=\"#运行结果对比\" class=\"headerlink\" title=\"运行结果对比\"></a>运行结果对比</h3><p>引用插件之前：</p>\n<p><img src=\"../../../../img/103-mbPlugins/image-20210811110251376.png\" alt=\"image-20210811110251376\"></p>\n<p>引用插件之后：</p>\n<p><img src=\"../../../../img/103-mbPlugins/image-20210811110738463.png\" alt=\"image-20210811110738463\"></p>\n<h2 id=\"插件介绍\"><a href=\"#插件介绍\" class=\"headerlink\" title=\"插件介绍\"></a>插件介绍</h2><p>MyBatis四大对象（<code>Executor、ParamterHandler、ResultSetHandler、StatementHandler</code>），创建过程中都会有插件进行介入。插件利用<code>JDK动态代理</code>机制一层层的包装目标对象，实现在目标对象执行目标方法之前进行拦截的效果。</p>\n<p>默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行器Executor（update、query、commit、rollback等方法）；</span><br><span class=\"line\">参数处理器ParameterHandler（getParameterObject、setParameters方法）；</span><br><span class=\"line\">结果集处理器ResultSetHandler（handleResultSets、handleOutputParameters等方法）；</span><br><span class=\"line\">SQL语法构建器StatementHandler（prepare、parameterize、batch、update、query等方法）；</span><br></pre></td></tr></table></figure>\n<p>下面看一下MyBatis执行的时序图：</p>\n<p><img src=\"../../../../img/103-mbPlugins/myBatis执行时序图.png\" alt=\"myBatis执行时序图\"></p>\n<h2 id=\"生成四大代理对象\"><a href=\"#生成四大代理对象\" class=\"headerlink\" title=\"生成四大代理对象\"></a>生成四大代理对象</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.ibatis.session;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Configuration</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Mybatis实现Sql入参设置的对象</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@author</span> sunfy</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@date</span> 2021-8-11 8:57</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ParameterHandler <span class=\"title\">newParameterHandler</span><span class=\"params\">(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql)</span> </span>&#123;</span><br><span class=\"line\">    ParameterHandler parameterHandler = mappedStatement.getLang().createParameterHandler(mappedStatement, parameterObject, boundSql);</span><br><span class=\"line\">    parameterHandler = (ParameterHandler) interceptorChain.pluginAll(parameterHandler);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parameterHandler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Mybatis把ResultSet集合映射成POJO的接口对象</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@author</span> sunfy</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@date</span> 2021-8-11 8:58</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ResultSetHandler <span class=\"title\">newResultSetHandler</span><span class=\"params\">(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds, ParameterHandler parameterHandler,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class=\"line\">    ResultSetHandler resultSetHandler = <span class=\"keyword\">new</span> DefaultResultSetHandler(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);</span><br><span class=\"line\">    resultSetHandler = (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resultSetHandler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Mybatis直接和数据库执行sql脚本的对象</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@author</span> sunfy</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@date</span> 2021-8-11 8:58</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> StatementHandler <span class=\"title\">newStatementHandler</span><span class=\"params\">(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class=\"line\">    StatementHandler statementHandler = <span class=\"keyword\">new</span> RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);</span><br><span class=\"line\">    statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> statementHandler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Mybatis的内部执行器，它负责调用StatementHandler操作数据库</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@author</span> sunfy</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@date</span> 2021-8-11 8:59</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Executor <span class=\"title\">newExecutor</span><span class=\"params\">(Transaction transaction)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newExecutor(transaction, defaultExecutorType);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 方法实现说明:创建一个sql语句执行器对象</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> transaction:事务</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> executorType:执行器类型</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span>:Executor执行器对象</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@exception</span>:</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Executor <span class=\"title\">newExecutor</span><span class=\"params\">(Transaction transaction, ExecutorType executorType)</span> </span>&#123;</span><br><span class=\"line\">    executorType = executorType == <span class=\"keyword\">null</span> ? defaultExecutorType : executorType;</span><br><span class=\"line\">    executorType = executorType == <span class=\"keyword\">null</span> ? ExecutorType.SIMPLE : executorType;</span><br><span class=\"line\">    Executor executor;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断执行器的类型</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量的执行器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ExecutorType.BATCH == executorType) &#123;</span><br><span class=\"line\">      executor = <span class=\"keyword\">new</span> BatchExecutor(<span class=\"keyword\">this</span>, transaction);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ExecutorType.REUSE == executorType) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//可重复使用的执行器</span></span><br><span class=\"line\">      executor = <span class=\"keyword\">new</span> ReuseExecutor(<span class=\"keyword\">this</span>, transaction);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//简单的sql执行器对象</span></span><br><span class=\"line\">      executor = <span class=\"keyword\">new</span> SimpleExecutor(<span class=\"keyword\">this</span>, transaction);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断mybatis的全局配置文件是否开启缓存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cacheEnabled) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//把当前的简单的执行器包装成一个CachingExecutor</span></span><br><span class=\"line\">      executor = <span class=\"keyword\">new</span> CachingExecutor(executor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用所有的拦截器对象plugin方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    executor = (Executor) interceptorChain.pluginAll(executor);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> executor;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>四大对象最终都会执行方法，<code>interceptorChain.pluginAll(statementHandler)</code></p>\n<p><img src=\"../../../../img/103-mbPlugins/image-20210811132541554.png\" alt=\"image-20210811132541554\"></p>\n<h2 id=\"插件加载\"><a href=\"#插件加载\" class=\"headerlink\" title=\"插件加载\"></a>插件加载</h2><p><img src=\"../../../../img/103-mbPlugins/image-20210811113136447.png\" alt=\"image-20210811113136447\"></p>\n<p><code>org.apache.ibatis.builder.xml.XMLConfigBuilder</code>解析<code>xml</code>配置文件时，加入<code>plugins</code>，此处解析了整个xml文件</p>\n<p><img src=\"../../../../img/103-mbPlugins/image-20210811113729030.png\" alt=\"image-20210811113729030\"></p>\n<p>MyBatis源码中解析<code>pulgins</code>的方法</p>\n<p><img src=\"../../../../img/103-mbPlugins/image-20210811114055305.png\" alt=\"image-20210811114055305\"></p>\n<h2 id=\"插件执行过程\"><a href=\"#插件执行过程\" class=\"headerlink\" title=\"插件执行过程\"></a>插件执行过程</h2><p>由于真正去执行<code>Executor、ParameterHandler、ResultSetHandler和StatementHandler</code>类中的方法的对象是代理对象（建议将代理对象转为class文件，反编译查看其结构，帮助理解），所以在执行方法时，首先调用的是<code>Plugin</code>类（实现了<code>InvocationHandler</code>接口）的<code>invoke</code>方法，如下：</p>\n<p>首先根据执行方法所属类获取拦截器中声明需要拦截的方法集合；</p>\n<p>判断当前方法需不需要执行拦截逻辑，需要的话，执行拦截逻辑方法（即<code>Interceptor</code>接口的<code>intercept</code>方法实现），不需要则直接执行原方法。</p>\n<p>一般需要用户自定义实现逻辑，其中有一个重要参数，即<code>Invocation</code>类，通过改参数我们可以获取执行对象，执行方法，以及执行方法上的参数，从而进行各种业务逻辑实现，一般在该方法的最后一句代码都是<code>invocation.proceed()</code>（内部执行<code>method.invoke</code>方法），否则将无法执行下一个拦截器的<code>intercept</code>方法。</p>\n<p><img src=\"../../../../img/103-mbPlugins/MyBatis插件拦截器运行时序图.png\" alt=\"img\"></p>\n<h2 id=\"插件适用场景\"><a href=\"#插件适用场景\" class=\"headerlink\" title=\"插件适用场景\"></a>插件适用场景</h2><h3 id=\"分页功能\"><a href=\"#分页功能\" class=\"headerlink\" title=\"分页功能\"></a>分页功能</h3><p>MyBatis的分页默认是基于内存分页的（查出所有，再截取），数据量大的情况下效率较低，不过使用MyBatis插件可以改变该行为，只需要拦截<code>StatementHandler</code>类的prepare方法，改变要执行的SQL语句为分页语句即可；</p>\n<h3 id=\"同类语句执行\"><a href=\"#同类语句执行\" class=\"headerlink\" title=\"同类语句执行\"></a>同类语句执行</h3><p>一般业务系统都会有创建者，创建时间，修改者，修改时间四个字段，对于这四个字段的赋值，实际上可以在<code>DAO</code>层统一拦截处理，可以用MyBatis插件拦截<code>Executor</code>类的update方法，对相关参数进行统一赋值即可；</p>\n<h3 id=\"性能监控\"><a href=\"#性能监控\" class=\"headerlink\" title=\"性能监控\"></a>性能监控</h3><p>对于SQL语句执行的性能监控，可以通过拦截<code>Executor</code>类的update, query等方法，用日志记录每个方法执行的时间；</p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>其实MyBatis扩展性还是很强的，基于插件机制，基本上可以控制SQL执行的各个阶段，如执行阶段，参数处理阶段，语法构建阶段，结果集处理阶段，具体可以根据项目业务来实现对应业务逻辑。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>MyBatis 只支持针对 <code>ParameterHandler、ResultSetHandler、StatementHandler、Executor</code> 这 4 种接口的插件， MyBatis 使用 JDK 的动态代理， 为需要拦截的接口生成代理对象以实现接口方法拦截功能， 每当执行这 4 种接口对象的方法时，就会进入拦截方法，具体就是 <code>InvocationHandler</code> 的 <code>invoke()</code> 方法， 拦截那些你指定需要拦截的方法。</p>\n<p>编写插件： 实现 MyBatis 的 <code>Interceptor</code> 接口并复写 <code>intercept()</code>方法， 然后在给插件编写注解， 指定 要拦截哪一个接口的哪些方法即可， 在配置文件中配置编写的插件。</p>\n<p>另外，如果配置了多个拦截器的话，会出现层层代理的情况，即代理对象代理了另外一个代理对象，形成一个代理链条，执行的时候，也是层层执行；</p>\n<p>关于MyBatis插件涉及到的设计模式和软件思想如下：</p>\n<ul>\n<li>设计模式：代理模式、责任链模式；</li>\n<li>软件思想：AOP编程思想，降低模块间的耦合度，使业务模块更加独立；</li>\n</ul>\n<p>一些注意事项：</p>\n<ul>\n<li>不要定义过多的插件，代理嵌套过多，执行方法的时候，比较耗性能；</li>\n<li>拦截器实现类的intercept方法里最后不要忘了执行<code>invocation.proceed()</code>方法，否则多个拦截器情况下，执行链条会断掉； </li>\n</ul>","next":{"title":"Spring、Spring MVC和Spring Boot的联系和区别","path":"api/articles/resource-Spring-Spring-Spring、Spring-MVC和Spring-Boot的联系和区别.json","image":"/img/header_img/spring/SpringConnection.png","num_read":1250,"num_like":910,"num_collection":628,"num_comments":168},"prev":{"title":"Spring相关的面试题","path":"api/articles/resource-Spring-Spring-Spring相关的面试题.json","image":"/img/header_img/spring/interview.PNG","num_read":1487,"num_like":917,"num_collection":71,"num_comments":99},"categories":[{"name":"ORM框架","path":"api/categories/ORM框架.json","pathContent":"api/categories/ORM框架","description":"采用元数据来描述对象与关系映射的细节，元数据一般采用XML格式，并且存放在专门的对象一映射文件中。简单理解为一种框架的格式","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"}],"tags":[{"name":"Interview","path":"api/tags/Interview.json","pathContent":"api/tags/Interview","description":"面试题相关内容","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"},{"name":"MyBatis","path":"api/tags/MyBatis.json","pathContent":"api/tags/MyBatis","description":"[MyBatis]暂未设置说明","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"}]}