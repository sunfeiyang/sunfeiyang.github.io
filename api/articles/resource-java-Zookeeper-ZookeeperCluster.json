{"title":"Zookeeper集群","num_read":1735,"num_like":509,"num_collection":839,"num_comments":96,"slug":"resource-java-Zookeeper-ZookeeperCluster","date":"2020-05-17T16:00:00.000Z","img":"/img/header_img/zookeeper.png","_id":"clhrbp2dk008yo5lg0780ebx2","site":{"data":{}},"updated":"2022-09-20T01:48:41.306Z","author":"Sunfy","comments":true,"path":"api/articles/resource-java-Zookeeper-ZookeeperCluster.json","webPath":"2020/05/18/resource-java-Zookeeper-ZookeeperCluster/","permalink":"https://sunfy9.gitee.io/2020/05/18/resource-java-Zookeeper-ZookeeperCluster/","excerpt":"Zookeeper集群配置","covers":["../../../../img/ZookeeperCluster/image-20201121112920993.png","../../../../img/ZookeeperCluster/image-20201121113004525.png","../../../../img/ZookeeperCluster/image-20201121173453127.png","../../../../img/ZookeeperCluster/image-20201121173513915.png","../../../../img/ZookeeperCluster/image-20201121173540804.png"],"keywords":"sunfy, hexo-theme-snail","content":"<p>Zookeeper集群配置<a id=\"more\"></a></p>\n<p>Zookeeper 集群模式一共有三种类型的角色<br><strong>Leader</strong>:   处理所有的事务请求（写请求），可以处理读请求，集群中只能有一个Leader<br><strong>Follower</strong>：只能处理读请求，同时作为 Leader的候选节点，即如果Leader宕机，Follower节点要参与到新的Leader选举中，有可能成为新的Leader节点。<br><strong>Observer</strong>：只能处理读请求。不能参与选举 </p>\n<p><img src=\"../../../../img/ZookeeperCluster/image-20201121112920993.png\" alt=\"image-20201121112920993\"></p>\n<h3 id=\"Zookeeper集群模式安装\"><a href=\"#Zookeeper集群模式安装\" class=\"headerlink\" title=\"Zookeeper集群模式安装\"></a><strong>Zookeeper集群模式安装</strong></h3><p>本例搭建的是伪集群模式，即一台机器上启动四个Zookeeper实例组成集群，真正的集群模式无非就是实例IP地址不同，搭建方法没有区别</p>\n<ul>\n<li><p>配置JAVA环境，检验环境：保证是<code>jdk7</code> 及以上即可</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载并解压Zookeeper</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.5.8/apache-zookeeper-3.5.8-bin.tar.gz tar -zxvf apache-zookeeper-3.5.8-bin.tar.gz cd  apache-zookeeper-3.5.8-bin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重命名<code>zoo_sample.cfg</code>文件 </p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp conf/zoo_sample.cfg conf/zoo-1.cfg</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件<code>zoo-1.cfg</code>，原配置文件里有的，修改成下面的值，没有的则加上</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim conf/zoo-1.cfg</span></span><br><span class=\"line\">dataDir=/usr/local/data/zookeeper-1</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\">server.1=127.0.0.1:2001:3001:participant// participant 可以不用写，默认就是participant</span><br><span class=\"line\">server.2=127.0.0.1:2002:3002:participant</span><br><span class=\"line\">server.3=127.0.0.1:2003:3003:participant</span><br><span class=\"line\">server.4=127.0.0.1:2004:3004:observer</span><br></pre></td></tr></table></figure>\n<p> <strong>配置说明</strong> <sunfy-line></p>\n<ul>\n<li><code>tickTime</code>：用于配置Zookeeper中最小时间单位的长度，很多运行时的时间间隔都是使用tickTime的倍数来表示的。</li>\n<li><code>initLimit</code>：该参数用于配置Leader服务器等待Follower启动，并完成数据同步的时间。Follower服务器再启动过程中，会与Leader建立连接并完成数据的同步，从而确定自己对外提供服务的起始状态。Leader服务器允许Follower再<code>initLimit</code>时间内完成这个工作。</li>\n<li><code>syncLimit：Leader</code> 与Follower心跳检测的最大延时时间</li>\n<li><code>dataDir</code>：顾名思义就是 Zookeeper 保存数据的目录，默认情况下，Zookeeper 将写数据的日志文件也保存在这个目录里。</li>\n<li><code>clientPort</code>：这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。</li>\n<li><code>server.A=B：C：D：E</code> 其中 A 是一个数字，表示这个是第几号服务器；B 是这个服务器的 IP 地址；C 表示的是这个服务器与集群中的 Leader 服务器交换信息的端口；D 表示的是万一集群中的 Leader 服务器挂了，需要一个端口来重新进行选举，选出一个新的 Leader，而这个端口就是用来执行选举时服务器相互通信的端口。如果是伪集群的配置方式，由于 B 都是一样，所以不同的 Zookeeper 实例通信端口号不能一样，所以要给它们分配不同的端口号。如果需要通过添加不参与集群选举以及事务请求的过半机制的 Observer节点，可以在E的位置，添加observer标识。</li>\n</ul>\n</li>\n<li><p>再从<code>zoo-1.cfg</code>复制三个配置文件<code>zoo-2.cfg</code>，<code>zoo-3.cfg</code>和<code>zoo-4.cfg</code>，只需修改<code>dataDir</code>和<code>clientPort</code>不同即可</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp conf/zoo1.cfg conf/zoo2.cfg</span><br><span class=\"line\">cp conf/zoo1.cfg conf/zoo3.cfg</span><br><span class=\"line\">cp conf/zoo1.cfg conf/zoo4.cfg</span><br><span class=\"line\">vim conf/zoo2.cfg</span><br><span class=\"line\">dataDir=/usr/local/data/zookeeper2</span><br><span class=\"line\">clientPort=2182</span><br><span class=\"line\">vim conf/zoo3.cfg</span><br><span class=\"line\">dataDir=/usr/local/data/zookeeper3</span><br><span class=\"line\">clientPort=2183</span><br><span class=\"line\">vim conf/zoo4.cfg</span><br><span class=\"line\">dataDir=/usr/local/data/zookeeper4</span><br><span class=\"line\">clientPort=2184</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>标识Server ID，创建四个文件夹<code>/usr/local/data/zookeeper-1</code>，<code>/usr/local/data/zookeeper-2</code>，<code>/usr/local/data/zookeeper-3</code>，<code>/usr/local/data/zookeeper-4</code>，在每个目录中创建文件<code>myid</code> 文件，写入当前实例的server id，即1，2，3，4 </p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/data/zookeeper-1</span><br><span class=\"line\"> vim myid</span><br><span class=\"line\"> 1 </span><br><span class=\"line\"> cd /usr/local/data/zookeeper-2</span><br><span class=\"line\"> vim myid</span><br><span class=\"line\"> 2 </span><br><span class=\"line\"> cd /usr/local/data/zookeeper-3</span><br><span class=\"line\"> vim myid</span><br><span class=\"line\"> 3 </span><br><span class=\"line\">cd /usr/local/data/zookeeper-4</span><br><span class=\"line\">vim myid</span><br><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动三个Zookeeper实例</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh start conf/zoo1.cfg</span><br><span class=\"line\">bin/zkServer.sh start conf/zoo2.cfg</span><br><span class=\"line\">bin/zkServer.sh start conf/zoo3.cfg</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检测集群状态，也可以直接用命令 <code>zkServer.sh   status conf/zoo1.cfg</code>  进行每台服务的状态查询</p>\n</li>\n</ul>\n<p><img src=\"../../../../img/ZookeeperCluster/image-20201121113004525.png\" alt=\"image-20201121113004525\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkCli.sh -server ip1:port1,ip2:port2,ip3:port3</span><br></pre></td></tr></table></figure>\n<p>可以通过 查看/Zookeeper/config  节点数据来查看集群配置</p>\n<h3 id=\"Zookeeper典型使用场景实战\"><a href=\"#Zookeeper典型使用场景实战\" class=\"headerlink\" title=\"Zookeeper典型使用场景实战\"></a>Zookeeper典型使用场景实战</h3><ul>\n<li><p>Zookeeper 非公平锁/公平锁/共享锁</p>\n<p> <img src=\"../../../../img/ZookeeperCluster/image-20201121173453127.png\" alt=\"image-20201121173453127\"></p>\n<p> <img src=\"../../../../img/ZookeeperCluster/image-20201121173513915.png\" alt=\"image-20201121173513915\"></p>\n<p> <img src=\"../../../../img/ZookeeperCluster/image-20201121173540804.png\" alt=\"image-20201121173540804\"></p>\n</li>\n<li><p>Leader 选举在分布式场景中的应用</p>\n</li>\n<li><p>Spring Cloud Zookeeper注册中心实战</p>\n</li>\n</ul>\n","more":"</p>\n<p>Zookeeper 集群模式一共有三种类型的角色<br><strong>Leader</strong>:   处理所有的事务请求（写请求），可以处理读请求，集群中只能有一个Leader<br><strong>Follower</strong>：只能处理读请求，同时作为 Leader的候选节点，即如果Leader宕机，Follower节点要参与到新的Leader选举中，有可能成为新的Leader节点。<br><strong>Observer</strong>：只能处理读请求。不能参与选举 </p>\n<p><img src=\"../../../../img/ZookeeperCluster/image-20201121112920993.png\" alt=\"image-20201121112920993\"></p>\n<h3 id=\"Zookeeper集群模式安装\"><a href=\"#Zookeeper集群模式安装\" class=\"headerlink\" title=\"Zookeeper集群模式安装\"></a><strong>Zookeeper集群模式安装</strong></h3><p>本例搭建的是伪集群模式，即一台机器上启动四个Zookeeper实例组成集群，真正的集群模式无非就是实例IP地址不同，搭建方法没有区别</p>\n<ul>\n<li><p>配置JAVA环境，检验环境：保证是<code>jdk7</code> 及以上即可</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载并解压Zookeeper</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.5.8/apache-zookeeper-3.5.8-bin.tar.gz tar -zxvf apache-zookeeper-3.5.8-bin.tar.gz cd  apache-zookeeper-3.5.8-bin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重命名<code>zoo_sample.cfg</code>文件 </p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp conf/zoo_sample.cfg conf/zoo-1.cfg</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件<code>zoo-1.cfg</code>，原配置文件里有的，修改成下面的值，没有的则加上</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim conf/zoo-1.cfg</span></span><br><span class=\"line\">dataDir=/usr/local/data/zookeeper-1</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\">server.1=127.0.0.1:2001:3001:participant// participant 可以不用写，默认就是participant</span><br><span class=\"line\">server.2=127.0.0.1:2002:3002:participant</span><br><span class=\"line\">server.3=127.0.0.1:2003:3003:participant</span><br><span class=\"line\">server.4=127.0.0.1:2004:3004:observer</span><br></pre></td></tr></table></figure>\n<p> <strong>配置说明</strong> <sunfy-line></p>\n<ul>\n<li><code>tickTime</code>：用于配置Zookeeper中最小时间单位的长度，很多运行时的时间间隔都是使用tickTime的倍数来表示的。</li>\n<li><code>initLimit</code>：该参数用于配置Leader服务器等待Follower启动，并完成数据同步的时间。Follower服务器再启动过程中，会与Leader建立连接并完成数据的同步，从而确定自己对外提供服务的起始状态。Leader服务器允许Follower再<code>initLimit</code>时间内完成这个工作。</li>\n<li><code>syncLimit：Leader</code> 与Follower心跳检测的最大延时时间</li>\n<li><code>dataDir</code>：顾名思义就是 Zookeeper 保存数据的目录，默认情况下，Zookeeper 将写数据的日志文件也保存在这个目录里。</li>\n<li><code>clientPort</code>：这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。</li>\n<li><code>server.A=B：C：D：E</code> 其中 A 是一个数字，表示这个是第几号服务器；B 是这个服务器的 IP 地址；C 表示的是这个服务器与集群中的 Leader 服务器交换信息的端口；D 表示的是万一集群中的 Leader 服务器挂了，需要一个端口来重新进行选举，选出一个新的 Leader，而这个端口就是用来执行选举时服务器相互通信的端口。如果是伪集群的配置方式，由于 B 都是一样，所以不同的 Zookeeper 实例通信端口号不能一样，所以要给它们分配不同的端口号。如果需要通过添加不参与集群选举以及事务请求的过半机制的 Observer节点，可以在E的位置，添加observer标识。</li>\n</ul>\n</li>\n<li><p>再从<code>zoo-1.cfg</code>复制三个配置文件<code>zoo-2.cfg</code>，<code>zoo-3.cfg</code>和<code>zoo-4.cfg</code>，只需修改<code>dataDir</code>和<code>clientPort</code>不同即可</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp conf/zoo1.cfg conf/zoo2.cfg</span><br><span class=\"line\">cp conf/zoo1.cfg conf/zoo3.cfg</span><br><span class=\"line\">cp conf/zoo1.cfg conf/zoo4.cfg</span><br><span class=\"line\">vim conf/zoo2.cfg</span><br><span class=\"line\">dataDir=/usr/local/data/zookeeper2</span><br><span class=\"line\">clientPort=2182</span><br><span class=\"line\">vim conf/zoo3.cfg</span><br><span class=\"line\">dataDir=/usr/local/data/zookeeper3</span><br><span class=\"line\">clientPort=2183</span><br><span class=\"line\">vim conf/zoo4.cfg</span><br><span class=\"line\">dataDir=/usr/local/data/zookeeper4</span><br><span class=\"line\">clientPort=2184</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>标识Server ID，创建四个文件夹<code>/usr/local/data/zookeeper-1</code>，<code>/usr/local/data/zookeeper-2</code>，<code>/usr/local/data/zookeeper-3</code>，<code>/usr/local/data/zookeeper-4</code>，在每个目录中创建文件<code>myid</code> 文件，写入当前实例的server id，即1，2，3，4 </p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/data/zookeeper-1</span><br><span class=\"line\"> vim myid</span><br><span class=\"line\"> 1 </span><br><span class=\"line\"> cd /usr/local/data/zookeeper-2</span><br><span class=\"line\"> vim myid</span><br><span class=\"line\"> 2 </span><br><span class=\"line\"> cd /usr/local/data/zookeeper-3</span><br><span class=\"line\"> vim myid</span><br><span class=\"line\"> 3 </span><br><span class=\"line\">cd /usr/local/data/zookeeper-4</span><br><span class=\"line\">vim myid</span><br><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动三个Zookeeper实例</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh start conf/zoo1.cfg</span><br><span class=\"line\">bin/zkServer.sh start conf/zoo2.cfg</span><br><span class=\"line\">bin/zkServer.sh start conf/zoo3.cfg</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检测集群状态，也可以直接用命令 <code>zkServer.sh   status conf/zoo1.cfg</code>  进行每台服务的状态查询</p>\n</li>\n</ul>\n<p><img src=\"../../../../img/ZookeeperCluster/image-20201121113004525.png\" alt=\"image-20201121113004525\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkCli.sh -server ip1:port1,ip2:port2,ip3:port3</span><br></pre></td></tr></table></figure>\n<p>可以通过 查看/Zookeeper/config  节点数据来查看集群配置</p>\n<h3 id=\"Zookeeper典型使用场景实战\"><a href=\"#Zookeeper典型使用场景实战\" class=\"headerlink\" title=\"Zookeeper典型使用场景实战\"></a>Zookeeper典型使用场景实战</h3><ul>\n<li><p>Zookeeper 非公平锁/公平锁/共享锁</p>\n<p> <img src=\"../../../../img/ZookeeperCluster/image-20201121173453127.png\" alt=\"image-20201121173453127\"></p>\n<p> <img src=\"../../../../img/ZookeeperCluster/image-20201121173513915.png\" alt=\"image-20201121173513915\"></p>\n<p> <img src=\"../../../../img/ZookeeperCluster/image-20201121173540804.png\" alt=\"image-20201121173540804\"></p>\n</li>\n<li><p>Leader 选举在分布式场景中的应用</p>\n</li>\n<li><p>Spring Cloud Zookeeper注册中心实战</p>\n</li>\n</ul>","next":{"title":"CentOS 修改vim的Tab为4个空格","path":"api/articles/resource-system-Linux-Centos-vim.json","image":"/img/header_img/15.gif","num_read":409,"num_like":339,"num_collection":211,"num_comments":34},"prev":{"title":"Zookeeper基础数据类型和基本客户端操作","path":"api/articles/resource-java-Zookeeper-ZookeeperUse.json","image":"/img/header_img/zookeeper.png","num_read":998,"num_like":628,"num_collection":137,"num_comments":99},"categories":[{"name":"分布式中间件","path":"api/categories/分布式中间件.json","pathContent":"api/categories/分布式中间件","description":"包含Zookeeper、Redis、等相关内容","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"}],"tags":[{"name":"Zookeeper","path":"api/tags/Zookeeper.json","pathContent":"api/tags/Zookeeper","description":"一个分布式的，开放源码的分布式应用程序协调服务","cover":"https://sunfy9.gitee.io/img/header_img/java/zookeeper.png"}]}