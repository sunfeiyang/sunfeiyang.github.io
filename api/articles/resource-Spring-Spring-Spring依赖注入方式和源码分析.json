{"title":"Spring依赖注入方式和源码分析","num_read":708,"num_like":468,"num_collection":290,"num_comments":280,"slug":"resource-Spring-Spring-Spring依赖注入方式和源码分析","date":"2021-09-13T16:00:00.000Z","img":"/img/header_img/spring/DependencyInjection.png","_id":"cl8dsxq9n000e60lgfdbl41bd","project":"Spring","type":"banner","subtitle":"手动注入|自动注入","site":{"data":{}},"updated":"2022-09-20T02:18:53.833Z","author":"Sunfy","comments":true,"path":"api/articles/resource-Spring-Spring-Spring依赖注入方式和源码分析.json","webPath":"2021/09/14/resource-Spring-Spring-Spring依赖注入方式和源码分析/","permalink":"https://sunfy9.gitee.io/2021/09/14/resource-Spring-Spring-Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F%E5%92%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":null,"covers":["../../../../img/Spring依赖注入方式和源码分析/image-20210915150329433.png","../../../../img/Spring依赖注入方式和源码分析/image-20210914135343558.png","../../../../img/Spring依赖注入方式和源码分析/image-20210914140832924.png","../../../../img/Spring依赖注入方式和源码分析/image-20210914140944745.png","../../../../img/Spring依赖注入方式和源码分析/image-20210914155649171.png"],"keywords":"sunfy, hexo-theme-snail","content":"<h1 id=\"Spring中Bean的依赖注入\"><a href=\"#Spring中Bean的依赖注入\" class=\"headerlink\" title=\"Spring中Bean的依赖注入\"></a>Spring中Bean的依赖注入</h1><h2 id=\"依赖注入的方式\"><a href=\"#依赖注入的方式\" class=\"headerlink\" title=\"依赖注入的方式\"></a>依赖注入的方式</h2><h3 id=\"手动注入\"><a href=\"#手动注入\" class=\"headerlink\" title=\"手动注入\"></a>手动注入</h3><p>这种方式主要通过<code>xml配置文件</code>进行扫描。配置信息如下</p>\n<p>从源码角度来说，手动注入又分为set方法注入和构造方法注入。</p>\n<h4 id=\"set方法注入\"><a href=\"#set方法注入\" class=\"headerlink\" title=\"set方法注入\"></a>set方法注入</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"orderService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top.sunfy.service.OrderService\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top.sunfy.service.UserService\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"orderService\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"orderService\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> OrderService orderService;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(orderService);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOrderService</span><span class=\"params\">(OrderService orderService)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.orderService = orderService;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明，使用set方法注入时，在代码中必须添加相应的set方法，依赖注入时会根据set后面的名称去ioc容器中查找相应的方法，找到后进行赋值。</p>\n<h4 id=\"构造方法注入\"><a href=\"#构造方法注入\" class=\"headerlink\" title=\"构造方法注入\"></a>构造方法注入<sunfy-line></h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"orderService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top.sunfy.service.OrderService\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top.sunfy.service.UserService\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"orderService\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> OrderService orderService;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserService</span><span class=\"params\">(OrderService orderService)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.orderService = orderService;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(orderService);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明，使用构造方法注入时，在代码中必须重写构造方法，并根据注入配置重写相对应的构造方法，依赖注入时会根据参数名称去IOC容器中查找相应的方法，找到后进行赋值。</p>\n<h3 id=\"自动注入\"><a href=\"#自动注入\" class=\"headerlink\" title=\"自动注入\"></a>自动注入</h3><h4 id=\"XML的autowire自动注入\"><a href=\"#XML的autowire自动注入\" class=\"headerlink\" title=\"XML的autowire自动注入\"></a>XML的autowire自动注入</h4><p><img src=\"../../../../img/Spring依赖注入方式和源码分析/image-20210915150329433.png\" alt=\"image-20210915150329433\"></p>\n<p>XML中，在定义一个bean时，我们可以通过autowire设置自动注入模式：</p>\n<ul>\n<li>byName</li>\n<li>byType</li>\n<li>constructor</li>\n<li>default</li>\n<li>no</li>\n</ul>\n<p>XML配置如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top.sunfy.service.UserService\"</span> <span class=\"attr\">autowire</span>=<span class=\"string\">\"byName\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如上配置，spring会自动给<code>UserService</code>类中所有的属性自动赋值，不需要在属性上配置<code>@Autowired</code>注解，但是必须有set方法。</p>\n<p><strong>ByName自动填充属性时流程：</strong></p>\n<ul>\n<li>找到所有set方法所对应的属性名称部分的名字。</li>\n<li>根据属性名称的名字去获取bean。</li>\n</ul>\n<p><strong>ByType自动填充属性时流程：</strong></p>\n<ul>\n<li>获取set方法中的唯一参数的参数类型，并且根据类型去IOC容器中获取Bean。</li>\n<li>如果找到多个，会报错。</li>\n</ul>\n<p><strong>Constructor自动填充属性:</strong></p>\n<ul>\n<li>使用这种方式时，就不需要写属性的set方法了，这个就是使用构造方法的方式进行注入，spring会利用构造方法中的参数信息去Spring容器中找bean，找到bean之后作为参数传给构造方法，从而实例化得到一个bean对象，并完成属性赋值，此时属性赋值需要我们在构造方法中自行编写。</li>\n<li>这块目前只考虑只有一个构造方法的情况，如果多个构造方法时，会涉及推断构造方法，这个具体后续有单独说明。</li>\n<li>这种方式中，就相当于ByType和ByName两种方式，和普通的ByType不同，如果采用Constructor进行自动填充，会通过ByType先在容器中查找，如果找到多个，会再根据名称去进行比对，最终确定唯一的内容，进行填充。通过一个示例说明：</li>\n</ul>\n<p><code>spring.xml</code>配置如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"orderService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top.sunfy.service.OrderService\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"orderService1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top.sunfy.service.OrderService\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top.sunfy.service.UserService\"</span> <span class=\"attr\">autowire</span>=<span class=\"string\">\"constructor\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>UserService.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> OrderService orderService;</span><br><span class=\"line\">    <span class=\"comment\">// 构造方法1</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserService</span><span class=\"params\">(OrderService orderService)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.orderService = orderService1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 构造方法2</span></span><br><span class=\"line\">\t<span class=\"comment\">//public UserService(OrderService orderService1) &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tthis.orderService = orderService1;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(orderService);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tClassPathXmlApplicationContext xmlApplicationContext = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"classpath:/spring.xml\"</span>);</span><br><span class=\"line\">\t\tUserService userService = xmlApplicationContext.getBean(UserService<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 打印出了注入到UserService中的bean</span></span><br><span class=\"line\">\t\tuserService.test();</span><br><span class=\"line\">        <span class=\"comment\">// 分别打印IOC容器中的两个OrderService</span></span><br><span class=\"line\">\t\tSystem.out.println(xmlApplicationContext.getBean(<span class=\"string\">\"orderService\"</span>));</span><br><span class=\"line\">\t\tSystem.out.println(xmlApplicationContext.getBean(<span class=\"string\">\"orderService1\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构造方法一：</span><br><span class=\"line\">top.sunfy.service.OrderService@27d415d9</span><br><span class=\"line\">top.sunfy.service.OrderService@27d415d9</span><br><span class=\"line\">top.sunfy.service.OrderService@5c18298f</span><br><span class=\"line\">构造方法二：</span><br><span class=\"line\">top.sunfy.service.OrderService@27d415d9</span><br><span class=\"line\">top.sunfy.service.OrderService@5c18298f</span><br><span class=\"line\">top.sunfy.service.OrderService@27d415d9</span><br></pre></td></tr></table></figure>\n<p>结果分析，我们可以看出，通过上面的测试，我们证明了，在使用XML中使用Constructor自动属性填充时，会先根据Type进行查找，如果找到多个，会再根据名称进行找到。</p>\n<p><strong>no：</strong>表示关闭了autowire</p>\n<p><strong>default：</strong>这个表示默认值，我们刚才的使用过程中都是在<code>&lt;bean&gt;</code>标签中使用的，<code>autowrite</code>也可以使用在<code>&lt;beans&gt;</code>标签上，这样的设置表示，如果beans中设置了，那么bean中设置为default会模式使用beans中设置的。</p>\n<p><strong>通过上述的说明，可以看出XML中的Autowrite功能还是很强大，但是我们在平时中更多的使用的还是<code>@Autowrite</code>注解的方式，那这又是为什么呢？二者之间的区别是什么呢？</strong></p>\n<p>要回答这个问题，我们首先来了解一下@Autowired注解的使用和特点</p>\n<h4 id=\"Autowired注解自动注入\"><a href=\"#Autowired注解自动注入\" class=\"headerlink\" title=\"@Autowired注解自动注入\"></a>@Autowired注解自动注入</h4><p>@Autowired注解可以写在：</p>\n<ul>\n<li>属性上：先根据属性类型去找bean，如果找到多个再根据属性名确定。</li>\n<li>构造方法上：先根据方法参数类型去找bean，如果找到多个再根据属性名确定。</li>\n<li>set方法上：先根据方法参数类型去找bean，如果找到多个再根据参数名确定。</li>\n</ul>\n<p>从底层来看，到了</p>\n<ul>\n<li>属性注入</li>\n<li>set方法注入</li>\n<li>构造方法注入</li>\n</ul>\n<p>XML中的Autowrite和@Autowrite注解的区别？</p>\n<ul>\n<li>@Autowirte相当于XML中的autowrite属性的注解方式的替代。看一个官网中的说明 <code>Essentially, the @Autowired annotation provides the same capabilities as described in Autowiring Collaborators but with more fine-grained control and wider applicability</code>（本质上，@Autowired注释提供了与Autowiring collaborator中描述的相同的功能，但具有<strong>更细粒度的控制</strong>和更广泛的适用性）</li>\n<li>看官网描述中提到的<font color=\"red\"><strong>更细粒度的控制</strong></font></li>\n<li>XML中的autowirte控制的是整个bean的所有属性，而@Autowirte注解可以写在某个属性上，某个set方法上，某个构造方法上。假如一个bean有多个构造方法，那XML配置中使用构造方法注入时则无法控制到底使用哪个构造方法，而@Autowrite可以直接指定想用哪个构造方法。</li>\n<li>@Autowrite可以控制哪些属性想被自动注入，哪些属性不想，这也体现了@Autowrite的细粒度控制。</li>\n<li>@Autowrite无法区分ByType和ByName，会先ByType，如果找到多个再通过ByName。源码中的具体实现不同</li>\n<li>XML的自动注入底层其实也就是set方法注入和构造方法注入。</li>\n</ul>\n<h1 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h1><p>什么是属性描述器 <code>PropertyDescriptor</code></p>\n<p><img src=\"../../../../img/Spring依赖注入方式和源码分析/image-20210914135343558.png\" alt=\"image-20210914135343558\"></p>\n<p>什么样的属性能进行自动注入？</p>\n<p><img src=\"../../../../img/Spring依赖注入方式和源码分析/image-20210914140832924.png\" alt=\"image-20210914140832924\"></p>\n<p>简单值检查方法：</p>\n<p><img src=\"../../../../img/Spring依赖注入方式和源码分析/image-20210914140944745.png\" alt=\"image-20210914140944745\"></p>\n<p>为什么使用@Autowrite注解的属性是static时，不会进行赋值呢。</p>\n<p>@Autowrite注解的required属性的使用说明</p>\n<p>@Autowrite注解注入时获取的是，参数的类型和名称，和方法名称并没有关系，都可以注入</p>\n<p>构建自动装配元数据时，桥接方法的作用？ </p>\n<p><img src=\"../../../../img/Spring依赖注入方式和源码分析/image-20210914155649171.png\" alt=\"image-20210914155649171\"></p>\n<p>同时使用@Autowrite注解和BeanDefinition给某个对象赋值，最终会是什么样的结果呢？</p>\n","more":"<h1 id=\"Spring中Bean的依赖注入\"><a href=\"#Spring中Bean的依赖注入\" class=\"headerlink\" title=\"Spring中Bean的依赖注入\"></a>Spring中Bean的依赖注入</h1><h2 id=\"依赖注入的方式\"><a href=\"#依赖注入的方式\" class=\"headerlink\" title=\"依赖注入的方式\"></a>依赖注入的方式</h2><h3 id=\"手动注入\"><a href=\"#手动注入\" class=\"headerlink\" title=\"手动注入\"></a>手动注入</h3><p>这种方式主要通过<code>xml配置文件</code>进行扫描。配置信息如下</p>\n<p>从源码角度来说，手动注入又分为set方法注入和构造方法注入。</p>\n<h4 id=\"set方法注入\"><a href=\"#set方法注入\" class=\"headerlink\" title=\"set方法注入\"></a>set方法注入</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"orderService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top.sunfy.service.OrderService\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top.sunfy.service.UserService\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"orderService\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"orderService\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> OrderService orderService;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(orderService);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOrderService</span><span class=\"params\">(OrderService orderService)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.orderService = orderService;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明，使用set方法注入时，在代码中必须添加相应的set方法，依赖注入时会根据set后面的名称去ioc容器中查找相应的方法，找到后进行赋值。</p>\n<h4 id=\"构造方法注入\"><a href=\"#构造方法注入\" class=\"headerlink\" title=\"构造方法注入\"></a>构造方法注入<sunfy-line></h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"orderService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top.sunfy.service.OrderService\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top.sunfy.service.UserService\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"orderService\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> OrderService orderService;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserService</span><span class=\"params\">(OrderService orderService)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.orderService = orderService;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(orderService);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明，使用构造方法注入时，在代码中必须重写构造方法，并根据注入配置重写相对应的构造方法，依赖注入时会根据参数名称去IOC容器中查找相应的方法，找到后进行赋值。</p>\n<h3 id=\"自动注入\"><a href=\"#自动注入\" class=\"headerlink\" title=\"自动注入\"></a>自动注入</h3><h4 id=\"XML的autowire自动注入\"><a href=\"#XML的autowire自动注入\" class=\"headerlink\" title=\"XML的autowire自动注入\"></a>XML的autowire自动注入</h4><p><img src=\"../../../../img/Spring依赖注入方式和源码分析/image-20210915150329433.png\" alt=\"image-20210915150329433\"></p>\n<p>XML中，在定义一个bean时，我们可以通过autowire设置自动注入模式：</p>\n<ul>\n<li>byName</li>\n<li>byType</li>\n<li>constructor</li>\n<li>default</li>\n<li>no</li>\n</ul>\n<p>XML配置如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top.sunfy.service.UserService\"</span> <span class=\"attr\">autowire</span>=<span class=\"string\">\"byName\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如上配置，spring会自动给<code>UserService</code>类中所有的属性自动赋值，不需要在属性上配置<code>@Autowired</code>注解，但是必须有set方法。</p>\n<p><strong>ByName自动填充属性时流程：</strong></p>\n<ul>\n<li>找到所有set方法所对应的属性名称部分的名字。</li>\n<li>根据属性名称的名字去获取bean。</li>\n</ul>\n<p><strong>ByType自动填充属性时流程：</strong></p>\n<ul>\n<li>获取set方法中的唯一参数的参数类型，并且根据类型去IOC容器中获取Bean。</li>\n<li>如果找到多个，会报错。</li>\n</ul>\n<p><strong>Constructor自动填充属性:</strong></p>\n<ul>\n<li>使用这种方式时，就不需要写属性的set方法了，这个就是使用构造方法的方式进行注入，spring会利用构造方法中的参数信息去Spring容器中找bean，找到bean之后作为参数传给构造方法，从而实例化得到一个bean对象，并完成属性赋值，此时属性赋值需要我们在构造方法中自行编写。</li>\n<li>这块目前只考虑只有一个构造方法的情况，如果多个构造方法时，会涉及推断构造方法，这个具体后续有单独说明。</li>\n<li>这种方式中，就相当于ByType和ByName两种方式，和普通的ByType不同，如果采用Constructor进行自动填充，会通过ByType先在容器中查找，如果找到多个，会再根据名称去进行比对，最终确定唯一的内容，进行填充。通过一个示例说明：</li>\n</ul>\n<p><code>spring.xml</code>配置如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"orderService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top.sunfy.service.OrderService\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"orderService1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top.sunfy.service.OrderService\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top.sunfy.service.UserService\"</span> <span class=\"attr\">autowire</span>=<span class=\"string\">\"constructor\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>UserService.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> OrderService orderService;</span><br><span class=\"line\">    <span class=\"comment\">// 构造方法1</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserService</span><span class=\"params\">(OrderService orderService)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.orderService = orderService1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 构造方法2</span></span><br><span class=\"line\">\t<span class=\"comment\">//public UserService(OrderService orderService1) &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tthis.orderService = orderService1;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(orderService);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tClassPathXmlApplicationContext xmlApplicationContext = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"classpath:/spring.xml\"</span>);</span><br><span class=\"line\">\t\tUserService userService = xmlApplicationContext.getBean(UserService<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 打印出了注入到UserService中的bean</span></span><br><span class=\"line\">\t\tuserService.test();</span><br><span class=\"line\">        <span class=\"comment\">// 分别打印IOC容器中的两个OrderService</span></span><br><span class=\"line\">\t\tSystem.out.println(xmlApplicationContext.getBean(<span class=\"string\">\"orderService\"</span>));</span><br><span class=\"line\">\t\tSystem.out.println(xmlApplicationContext.getBean(<span class=\"string\">\"orderService1\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构造方法一：</span><br><span class=\"line\">top.sunfy.service.OrderService@27d415d9</span><br><span class=\"line\">top.sunfy.service.OrderService@27d415d9</span><br><span class=\"line\">top.sunfy.service.OrderService@5c18298f</span><br><span class=\"line\">构造方法二：</span><br><span class=\"line\">top.sunfy.service.OrderService@27d415d9</span><br><span class=\"line\">top.sunfy.service.OrderService@5c18298f</span><br><span class=\"line\">top.sunfy.service.OrderService@27d415d9</span><br></pre></td></tr></table></figure>\n<p>结果分析，我们可以看出，通过上面的测试，我们证明了，在使用XML中使用Constructor自动属性填充时，会先根据Type进行查找，如果找到多个，会再根据名称进行找到。</p>\n<p><strong>no：</strong>表示关闭了autowire</p>\n<p><strong>default：</strong>这个表示默认值，我们刚才的使用过程中都是在<code>&lt;bean&gt;</code>标签中使用的，<code>autowrite</code>也可以使用在<code>&lt;beans&gt;</code>标签上，这样的设置表示，如果beans中设置了，那么bean中设置为default会模式使用beans中设置的。</p>\n<p><strong>通过上述的说明，可以看出XML中的Autowrite功能还是很强大，但是我们在平时中更多的使用的还是<code>@Autowrite</code>注解的方式，那这又是为什么呢？二者之间的区别是什么呢？</strong></p>\n<p>要回答这个问题，我们首先来了解一下@Autowired注解的使用和特点</p>\n<h4 id=\"Autowired注解自动注入\"><a href=\"#Autowired注解自动注入\" class=\"headerlink\" title=\"@Autowired注解自动注入\"></a>@Autowired注解自动注入</h4><p>@Autowired注解可以写在：</p>\n<ul>\n<li>属性上：先根据属性类型去找bean，如果找到多个再根据属性名确定。</li>\n<li>构造方法上：先根据方法参数类型去找bean，如果找到多个再根据属性名确定。</li>\n<li>set方法上：先根据方法参数类型去找bean，如果找到多个再根据参数名确定。</li>\n</ul>\n<p>从底层来看，到了</p>\n<ul>\n<li>属性注入</li>\n<li>set方法注入</li>\n<li>构造方法注入</li>\n</ul>\n<p>XML中的Autowrite和@Autowrite注解的区别？</p>\n<ul>\n<li>@Autowirte相当于XML中的autowrite属性的注解方式的替代。看一个官网中的说明 <code>Essentially, the @Autowired annotation provides the same capabilities as described in Autowiring Collaborators but with more fine-grained control and wider applicability</code>（本质上，@Autowired注释提供了与Autowiring collaborator中描述的相同的功能，但具有<strong>更细粒度的控制</strong>和更广泛的适用性）</li>\n<li>看官网描述中提到的<font color=\"red\"><strong>更细粒度的控制</strong></font></li>\n<li>XML中的autowirte控制的是整个bean的所有属性，而@Autowirte注解可以写在某个属性上，某个set方法上，某个构造方法上。假如一个bean有多个构造方法，那XML配置中使用构造方法注入时则无法控制到底使用哪个构造方法，而@Autowrite可以直接指定想用哪个构造方法。</li>\n<li>@Autowrite可以控制哪些属性想被自动注入，哪些属性不想，这也体现了@Autowrite的细粒度控制。</li>\n<li>@Autowrite无法区分ByType和ByName，会先ByType，如果找到多个再通过ByName。源码中的具体实现不同</li>\n<li>XML的自动注入底层其实也就是set方法注入和构造方法注入。</li>\n</ul>\n<h1 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h1><p>什么是属性描述器 <code>PropertyDescriptor</code></p>\n<p><img src=\"../../../../img/Spring依赖注入方式和源码分析/image-20210914135343558.png\" alt=\"image-20210914135343558\"></p>\n<p>什么样的属性能进行自动注入？</p>\n<p><img src=\"../../../../img/Spring依赖注入方式和源码分析/image-20210914140832924.png\" alt=\"image-20210914140832924\"></p>\n<p>简单值检查方法：</p>\n<p><img src=\"../../../../img/Spring依赖注入方式和源码分析/image-20210914140944745.png\" alt=\"image-20210914140944745\"></p>\n<p>为什么使用@Autowrite注解的属性是static时，不会进行赋值呢。</p>\n<p>@Autowrite注解的required属性的使用说明</p>\n<p>@Autowrite注解注入时获取的是，参数的类型和名称，和方法名称并没有关系，都可以注入</p>\n<p>构建自动装配元数据时，桥接方法的作用？ </p>\n<p><img src=\"../../../../img/Spring依赖注入方式和源码分析/image-20210914155649171.png\" alt=\"image-20210914155649171\"></p>\n<p>同时使用@Autowrite注解和BeanDefinition给某个对象赋值，最终会是什么样的结果呢？</p>\n","next":{"title":"SpringBean的生命周期详解","path":"api/articles/resource-Spring-Spring-SpringBean的生命周期详解.json","image":"/img/header_img/spring/BeanLife.png","num_read":1247,"num_like":1036,"num_collection":472,"num_comments":179},"prev":{"title":"SpringBean的销毁","path":"api/articles/resource-Spring-Spring-SpringBean的销毁.json","image":"/img/header_img/spring/destruction.png","num_read":1563,"num_like":285,"num_collection":553,"num_comments":166},"categories":[{"name":"Spring全家桶","path":"api/categories/Spring全家桶.json","pathContent":"api/categories/Spring全家桶","description":"更快、更容易、更安全","cover":"https://sunfy9.gitee.io/project/photo/project/spring.png"}],"tags":[{"name":"Spring","path":"api/tags/Spring.json","pathContent":"api/tags/Spring","description":"更快、更容易、更安全","cover":"https://sunfy9.gitee.io/project/photo/project/spring.png"}]}