{"title":"并发场景下的幂等问题——分布式锁详解","num_read":567,"num_like":551,"num_collection":527,"num_comments":76,"slug":"resource-MicroService-other-幂等问题-分布式锁","date":"2022-03-12T16:00:00.000Z","img":"/img/header_img/MicroService/mideng.png","_id":"clhrbp2dz00c6o5lg8w3a2ae2","project":"MicroService","type":"hot","subtitle":"本文讨论的幂等问题，均为并发场景下的幂等问题。即系统本存在幂等设计，但是在并发场景下失效了","hot":"read","site":{"data":{}},"updated":"2022-09-20T01:51:57.363Z","author":"Sunfy","comments":true,"path":"api/articles/resource-MicroService-other-幂等问题-分布式锁.json","webPath":"2022/03/13/resource-MicroService-other-幂等问题-分布式锁/","permalink":"https://sunfy9.gitee.io/2022/03/13/resource-MicroService-other-%E5%B9%82%E7%AD%89%E9%97%AE%E9%A2%98-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/","excerpt":null,"covers":["../../../../img/幂等问题-分布式锁/image-20220324221621217.png","../../../../img/幂等问题-分布式锁/image-20220324221733135.png","../../../../img/幂等问题-分布式锁/image-20220324222024770.png"],"keywords":"sunfy, hexo-theme-snail","content":"<h1 id=\"一-摘要\"><a href=\"#一-摘要\" class=\"headerlink\" title=\"一 摘要\"></a><strong>一 摘要</strong></h1><p>本文从钉钉实人认证场景的一例数据重复问题出发，分析了其原因是因为并发导致幂等失效，引出幂等的概念。</p>\n<p>针对并发场景下的幂等问题，提出了一种实现幂等可行的方法论，结合通讯录加人业务场景对数据库幂等问题进行了简单分析，就分布式锁实现幂等方法展开了详细讨论。</p>\n<p>分析了锁在分布式场景下存在的问题，包括单点故障、网络超时、错误释放他人锁、提前释放锁以及分布式锁单点故障等，提出了对应的解决方案，介绍了对应方案的具体实现。</p>\n<h1 id=\"二-问题\"><a href=\"#二-问题\" class=\"headerlink\" title=\"二 问题\"></a><strong>二 问题</strong></h1><p>钉钉实人认证业务存在数据重复的问题。</p>\n<h2 id=\"1-问题现象\"><a href=\"#1-问题现象\" class=\"headerlink\" title=\"1 问题现象\"></a>1 问题现象</h2><p>正常情况下，数据库中应该只有一条实人认证成功记录，但是实际上某用户有多条。</p>\n<p><img src=\"../../../../img/幂等问题-分布式锁/image-20220324221621217.png\" alt=\"image-20220324221621217\"></p>\n<h3 id=\"2-问题原因\"><a href=\"#2-问题原因\" class=\"headerlink\" title=\"2 问题原因\"></a>2 问题原因</h3><p>并发导致了不幂等。</p>\n<p>我们先来回顾一下幂等的概念：</p>\n<blockquote>\n<p>幂等（idempotent、idempotence）是一个数学与计算机学概念，常见于抽象代数中。<br>在编程中一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。<br>—来自百度百科</p>\n</blockquote>\n<p><sunfy-line>实人认证在业务上有幂等设计，其一般流程为：<br>1）用户选择实人认证后会在服务端初始化一条记录；<br>2）用户在钉钉移动端按照指示完成人脸比对；<br>3）比对完成后访问服务端修改数据库状态。</p>\n<p>在第3步中，在修改数据库状态之前，会判断「是否已经初始化」、「是否已经实人认证」以及「智科是否返回认证成功」以保证幂等。仅当请求首次访问服务端尝试修改数据库状态时，才能满足幂等的判断条件并修改数据库状态。其余任意次请求将直接返回，对数据库状态无影响。请求多次访问服务端所产生的结果，和请求首次访问服务端一致。因此，在实人认证成功的前提下，数据库应当有且仅有一条认证成功的记录。</p>\n<p><img src=\"../../../../img/幂等问题-分布式锁/image-20220324221733135.png\" alt=\"image-20220324221733135\"></p>\n<p>但是在实际过程中我们发现，同一个请求会多次修改数据库状态，系统并未按照我们预期的那样实现幂等。究其原因，是因为请求并发访问，在首次请求完成修改服务端状态前，并发的其他请求和首次请求都通过了幂等判断，对数据库状态进行了多次修改。</p>\n<p>并发导致了原幂等设计失效。</p>\n<p>并发导致了不幂等。</p>\n<h2 id=\"三-解决方案\"><a href=\"#三-解决方案\" class=\"headerlink\" title=\"三 解决方案\"></a><strong>三 解决方案</strong></h2><p>解决并发场景下幂等问题的关键，是找到唯一性约束，执行唯一性检查，相同的数据保存一次，相同的请求操作一次。</p>\n<p>一次访问服务端的请求，可能产生以下几种交互：</p>\n<ol>\n<li>与数据源交互，例如数据库状态变更等；</li>\n<li>与其他业务系统交互，例如调用下游服务或发送消息等；</li>\n</ol>\n<p>一次请求可以只包含一次交互，也可以包含多次交互。例如一次请求可以仅仅修改一次数据库状态，也可以在修改数据库状态后再发送一条数据库状态修改成功的消息。</p>\n<p>于是我们可以得出一个结论：并发场景下，如果一个系统依赖的组件幂等，那么该系统在天然幂等。</p>\n<p>以数据库为例，如果一个请求对数据造成的影响是新增一条数据，那么唯一索引可以是幂等问题的解法。数据库会帮助我们执行唯一性检查，相同数据不会重复落库。</p>\n<p>钉钉通讯录加人就是通过数据库的唯一索引解决了幂等问题。以钉钉通讯录加人为例，在向数据库写数据之前，会先判断数据是否已经存在于数据库之中，如果不存在，加人请求最终会向数据库的员工表插入一条数据。大量相同的并发的通讯录加人请求让系统的幂等设计失效成为可能。在一次加人请求中，（组织ID，工号）可以唯一标记一个请求，在数据库中，也存在（组织ID，工号）的唯一索引。因此我们可以保证，多次相同的加人请求，只会修改一次数据库状态，即添加一条记录。</p>\n<p>如果所依赖的组件天然幂等，那么问题就简单了，但是实际情况往往更加复杂。并发场景下，如果系统依赖的组件无法幂等，我们就需要使用额外的手段实现幂等。</p>\n<p>一个常用的手段就是使用分布式锁。分布式锁的实现方式有很多，比较常用的是缓存式分布式锁。</p>\n<h2 id=\"四-分布式锁\"><a href=\"#四-分布式锁\" class=\"headerlink\" title=\"四 分布式锁\"></a><strong>四 分布式锁</strong></h2><p>在What is a Java distributed lock?中有这样几段话：</p>\n<blockquote>\n<p>In computer science, locks are mechanisms in a multithreaded environment to prevent different threads from operating on the same resource. When using locking, a resource is “locked” for access by a specific thread, and can only be accessed by a different thread once the resource has been released. Locks have several benefits: they stop two threads from doing the same work, and they prevent errors and data corruption when two threads try to use the same resource simultaneously.</p>\n<p>Distributed locks in Java are locks that can work with not only multiple threads running on the same machine, but also threads running on clients on different machines in a distributed system. The threads on these separate machines must communicate and coordinate to make sure that none of them try to access a resource that has been locked up by another.</p>\n</blockquote>\n<p>这几段话告诉我们，锁的本质是共享资源的互斥访问，分布式锁解决了分布式系统中共享资源的互斥访问的问题。</p>\n<p>java.util.concurrent.locks包提供了丰富的锁实现，包括公平锁/非公平锁，阻塞锁/非阻塞锁，读写锁以及可重入锁等。</p>\n<p>我们要如何实现一个分布式锁呢？</p>\n<h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><p>分布式系统中常见有两个问题：<br>1）单点故障问题，即当持有锁的应用发生单点故障时，锁将被长期无效占有；<br>2）网络超时问题，即当客户端发生网络超时但实际上锁成功时，我们无法再次正确的</p>\n<p>获取锁。</p>\n<p>要解决问题1，一个简单的方案是引入过期时间（lease time），对锁的持有将是有时效的，当应用发生单点故障时，被其持有的锁可以自动释放。</p>\n<p>要解决问题2，一个简单的方案是支持可重入，我们为每个获取锁的客户端都配置一个不会重复的身份标识（通常是UUID），上锁成功后锁将带有该客户端的身份标识。当实际上锁成功而客户端超时重试时，我们可以判断锁已被该客户端持有而返回成功。</p>\n<p>综上我们给出了一个lease-based distribute lock方案。出于性能考量，使用缓存作为锁的存储介质，利用MVCC（Multiversion concurrency control）机制解决共享资源互斥访问问题，具体实现可见附录代码。</p>\n<p>分布式锁的一般使用方式如下<br>● 初始化分布式锁的工厂<br>● 利用工厂生成一个分布式锁实例<br>● 使用该分布式实例上锁和解锁操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testTryLock() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;初始化工厂</span><br><span class=\"line\">    MdbDistributeLockFactory mdbDistributeLockFactory &#x3D; new MdbDistributeLockFactory();</span><br><span class=\"line\">    mdbDistributeLockFactory.setNamespace(603);</span><br><span class=\"line\">    mdbDistributeLockFactory.setMtairManager(new MultiClusterTairManager());</span><br><span class=\"line\">    &#x2F;&#x2F;获得锁</span><br><span class=\"line\">    DistributeLock lock &#x3D; mdbDistributeLockFactory.getLock(&quot;TestLock&quot;);</span><br><span class=\"line\">    &#x2F;&#x2F;上锁解锁操作</span><br><span class=\"line\">    boolean locked &#x3D; lock.tryLock();</span><br><span class=\"line\">    if (!locked) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;do something </span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方案简单易用，但是问题也很明显。例如，释放锁的时候只是简单的将缓存中的key失效，所以存在错误释放他人已持有锁问题。所幸只要锁的租期设置的足够长，该问题出现几率就足够小。</p>\n<p>我们借用Martin Kleppmann在文章How to do distributed locking中的一张图说明该问题。</p>\n<p><img src=\"../../../../img/幂等问题-分布式锁/image-20220324222024770.png\" alt=\"image-20220324222024770\"></p>\n<p>设想一种情况，当占有锁的Client 1在释放锁之前，锁就已经到期了，Client 2将获取锁，此时锁被Client 2持有，但是Client 1可能会错误的将其释放。一个更优秀的方案，我们给每个锁都设置一个身份标识，在释放锁的时候，1）首先查询锁是否是自己的，2）如果是自己的则释放锁。受限于实现方式，步骤1和步骤2不是原子操作，在步骤1和步骤2之间，如果锁到期被其他客户端获取，此时也会错误的释放他人的锁。</p>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><p>借助Redis的Lua脚本，可以完美的解决存在错误释放他人已持有锁问题的。在Distributed locks with Redis这篇文章的 Correct implementation with a single instance 这一节中，我们可以得到我们想要的答案——如何实现一个分布式锁。</p>\n<p>当我们想要获取锁时，我们可以执行如下方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET resource_name my_random_value NX PX 30000</span><br></pre></td></tr></table></figure>\n<p>当我们想要释放锁时，我们可以执行如下的Lua脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if redis.call(&quot;get&quot;,KEYS[1]) &#x3D;&#x3D; ARGV[1] then</span><br><span class=\"line\">    return redis.call(&quot;del&quot;,KEYS[1])</span><br><span class=\"line\">else</span><br><span class=\"line\">    return 0</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h3 id=\"方案三\"><a href=\"#方案三\" class=\"headerlink\" title=\"方案三\"></a>方案三</h3><p>在方案一和方案二的讨论过程中，有一个问题被我们反复提及：锁的自动释放。</p>\n<p>这是一把双刃剑：<br>1）一方面它很好的解决了持有锁的客户端单点故障的问题<br>2）另一方面，如果锁提前释放，就会出现锁的错误持有状态</p>\n<p>这个时候，我们可以引入Watch Dog自动续租机制，我们可以参考以下Redisson是如何实现的。</p>\n<p>在上锁成功后，Redisson会调用renewExpiration()方法开启一个Watch Dog线程，为锁自动续期。每过1/3时间续一次，成功则继续下一次续期，失败取消续期操作。</p>\n<p>我们可以再看看Redisson是如何续期的。renewExpiration()方法的第17行renewExpirationAsync()方法是执行锁续期的关键操作，我们进入到方法内部，可以看到Redisson也是使用Lua脚本进行锁续租的：1）判断锁是否存在；2）如果存在则重置过期时间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">renewExpiration</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ExpirationEntry ee = EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ee == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Timeout task = commandExecutor.getConnectionManager().newTimeout(timeout -&gt; &#123;</span><br><span class=\"line\">        ExpirationEntry ent = EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Long threadId = ent.getFirstThreadId();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (threadId == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        RFuture&lt;Boolean&gt; future = renewExpirationAsync(threadId);</span><br><span class=\"line\">        future.onComplete((res, e) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">\"Can't update lock \"</span> + getRawName() + <span class=\"string\">\" expiration\"</span>, e);</span><br><span class=\"line\">                EXPIRATION_RENEWAL_MAP.remove(getEntryName());</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// reschedule itself</span></span><br><span class=\"line\">                renewExpiration();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                cancelExpirationRenewal(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;, internalLockLeaseTime / <span class=\"number\">3</span>, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">    ee.setTimeout(task);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> RFuture&lt;Boolean&gt; <span class=\"title\">renewExpirationAsync</span><span class=\"params\">(<span class=\"keyword\">long</span> threadId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class=\"line\">                          <span class=\"string\">\"if (redis.call('hexists', KEYS[1], ARGV[2]) == 1) then \"</span> +</span><br><span class=\"line\">                          <span class=\"string\">\"redis.call('pexpire', KEYS[1], ARGV[1]); \"</span> +</span><br><span class=\"line\">                          <span class=\"string\">\"return 1; \"</span> +</span><br><span class=\"line\">                          <span class=\"string\">\"end; \"</span> +</span><br><span class=\"line\">                          <span class=\"string\">\"return 0;\"</span>,</span><br><span class=\"line\">                          Collections.singletonList(getRawName()),</span><br><span class=\"line\">                          internalLockLeaseTime, getLockName(threadId));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>借助Redisson的自动续期机制，我们无需再担心锁的自动释放。但是讨论到这里，我还是不得不面对一个问题：分布式锁本身不是一个分布式应用。当Redis服务器故障无法正常工作时，整个分布式锁也就无法提供服务。</p>\n<p>更进一步，我们可以看看Distributed locks with Redis这篇文章中提到的Redlock算法及其实现。</p>\n<p>Redlock算法不是银弹，关于它的好与坏，也有很多争论：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">How to do distributed locking：</span><br><span class=\"line\">https:&#x2F;&#x2F;martin.kleppmann.com&#x2F;2016&#x2F;02&#x2F;08&#x2F;how-to-do-distributed-locking.html</span><br><span class=\"line\">Is Redlock safe?：</span><br><span class=\"line\">http:&#x2F;&#x2F;antirez.com&#x2F;news&#x2F;101</span><br><span class=\"line\">Martin Kleppmann和Antirez关于Redlock的争辩：</span><br><span class=\"line\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><strong>参考资料</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">What is a Java distributed lock?</span><br><span class=\"line\">https:&#x2F;&#x2F;redisson.org&#x2F;glossary&#x2F;java-distributed-lock.html</span><br><span class=\"line\">Distributed locks and synchronizers：</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;redisson&#x2F;redisson&#x2F;wiki&#x2F;8.-distributed-locks-and-synchronizers</span><br><span class=\"line\">Distributed locks with Redis：</span><br><span class=\"line\">https:&#x2F;&#x2F;redis.io&#x2F;topics&#x2F;distlock?spm&#x3D;ata.21736010.0.0.31f77e3aFs96rz</span><br></pre></td></tr></table></figure>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a><strong>附录</strong></h2><h3 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MdbDistributeLock</span> <span class=\"keyword\">implements</span> <span class=\"title\">DistributeLock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁的命名空间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> namespace;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁对应的缓存key</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String lockName;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁的唯一标识，保证可重入，以应对put成功，但是返回超时的情况</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String lockId;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否持有锁。true：是</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> locked;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 缓存实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TairManager tairManager;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MdbDistributeLock</span><span class=\"params\">(TairManager tairManager, <span class=\"keyword\">int</span> namespace, String lockCacheKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tairManager = tairManager;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.namespace = namespace;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lockName = lockCacheKey;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lockId = UUID.randomUUID().toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryLock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取锁状态</span></span><br><span class=\"line\">            Result&lt;DataEntry&gt; getResult = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            ResultCode getResultCode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>; cnt &lt; DEFAULT_RETRY_TIMES; cnt++) &#123;</span><br><span class=\"line\">                getResult = tairManager.get(namespace, lockName);</span><br><span class=\"line\">                getResultCode = getResult == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : getResult.getRc();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (noNeedRetry(getResultCode)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//重入，已持有锁，返回成功</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ResultCode.SUCCESS.equals(getResultCode)</span><br><span class=\"line\">                &amp;&amp; getResult.getValue() != <span class=\"keyword\">null</span> &amp;&amp; lockId.equals(getResult.getValue().getValue())) &#123;</span><br><span class=\"line\">                locked = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//不可获取锁，返回失败</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!ResultCode.DATANOTEXSITS.equals(getResultCode)) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">\"tryLock fail code=&#123;&#125; lock=&#123;&#125; traceId=&#123;&#125;\"</span>, getResultCode, <span class=\"keyword\">this</span>, EagleEye.getTraceId());</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//尝试获取锁</span></span><br><span class=\"line\">            ResultCode putResultCode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>; cnt &lt; DEFAULT_RETRY_TIMES; cnt++) &#123;</span><br><span class=\"line\">                putResultCode = tairManager.put(namespace, lockName, lockId, MDB_CACHE_VERSION,</span><br><span class=\"line\">                    DEFAULT_EXPIRE_TIME_SEC);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (noNeedRetry(putResultCode)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!ResultCode.SUCCESS.equals(putResultCode)) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">\"tryLock fail code=&#123;&#125; lock=&#123;&#125; traceId=&#123;&#125;\"</span>, getResultCode, <span class=\"keyword\">this</span>, EagleEye.getTraceId());</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            locked = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">\"DistributedLock.tryLock fail lock=&#123;&#125;\"</span>, <span class=\"keyword\">this</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!locked) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ResultCode resultCode = tairManager.invalid(namespace, lockName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!resultCode.isSuccess()) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">\"DistributedLock.unlock fail lock=&#123;&#125; resultCode=&#123;&#125; traceId=&#123;&#125;\"</span>, <span class=\"keyword\">this</span>, resultCode,</span><br><span class=\"line\">                EagleEye.getTraceId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        locked = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断是否需要重试</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> resultCode 缓存的返回码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true：不用重试</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">noNeedRetry</span><span class=\"params\">(ResultCode resultCode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultCode != <span class=\"keyword\">null</span> &amp;&amp; !ResultCode.CONNERROR.equals(resultCode) &amp;&amp; !ResultCode.TIMEOUT.equals(</span><br><span class=\"line\">            resultCode) &amp;&amp; !ResultCode.UNKNOW.equals(resultCode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"分布式锁工厂\"><a href=\"#分布式锁工厂\" class=\"headerlink\" title=\"分布式锁工厂\"></a>分布式锁工厂</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MdbDistributeLockFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">DistributeLockFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 缓存的命名空间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Setter</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> namespace;</span><br><span class=\"line\">    <span class=\"meta\">@Setter</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MultiClusterTairManager mtairManager;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DistributeLock <span class=\"title\">getLock</span><span class=\"params\">(String lockName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MdbDistributeLock(mtairManager, namespace, lockName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","more":"<h1 id=\"一-摘要\"><a href=\"#一-摘要\" class=\"headerlink\" title=\"一 摘要\"></a><strong>一 摘要</strong></h1><p>本文从钉钉实人认证场景的一例数据重复问题出发，分析了其原因是因为并发导致幂等失效，引出幂等的概念。</p>\n<p>针对并发场景下的幂等问题，提出了一种实现幂等可行的方法论，结合通讯录加人业务场景对数据库幂等问题进行了简单分析，就分布式锁实现幂等方法展开了详细讨论。</p>\n<p>分析了锁在分布式场景下存在的问题，包括单点故障、网络超时、错误释放他人锁、提前释放锁以及分布式锁单点故障等，提出了对应的解决方案，介绍了对应方案的具体实现。</p>\n<h1 id=\"二-问题\"><a href=\"#二-问题\" class=\"headerlink\" title=\"二 问题\"></a><strong>二 问题</strong></h1><p>钉钉实人认证业务存在数据重复的问题。</p>\n<h2 id=\"1-问题现象\"><a href=\"#1-问题现象\" class=\"headerlink\" title=\"1 问题现象\"></a>1 问题现象</h2><p>正常情况下，数据库中应该只有一条实人认证成功记录，但是实际上某用户有多条。</p>\n<p><img src=\"../../../../img/幂等问题-分布式锁/image-20220324221621217.png\" alt=\"image-20220324221621217\"></p>\n<h3 id=\"2-问题原因\"><a href=\"#2-问题原因\" class=\"headerlink\" title=\"2 问题原因\"></a>2 问题原因</h3><p>并发导致了不幂等。</p>\n<p>我们先来回顾一下幂等的概念：</p>\n<blockquote>\n<p>幂等（idempotent、idempotence）是一个数学与计算机学概念，常见于抽象代数中。<br>在编程中一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。<br>—来自百度百科</p>\n</blockquote>\n<p><sunfy-line>实人认证在业务上有幂等设计，其一般流程为：<br>1）用户选择实人认证后会在服务端初始化一条记录；<br>2）用户在钉钉移动端按照指示完成人脸比对；<br>3）比对完成后访问服务端修改数据库状态。</p>\n<p>在第3步中，在修改数据库状态之前，会判断「是否已经初始化」、「是否已经实人认证」以及「智科是否返回认证成功」以保证幂等。仅当请求首次访问服务端尝试修改数据库状态时，才能满足幂等的判断条件并修改数据库状态。其余任意次请求将直接返回，对数据库状态无影响。请求多次访问服务端所产生的结果，和请求首次访问服务端一致。因此，在实人认证成功的前提下，数据库应当有且仅有一条认证成功的记录。</p>\n<p><img src=\"../../../../img/幂等问题-分布式锁/image-20220324221733135.png\" alt=\"image-20220324221733135\"></p>\n<p>但是在实际过程中我们发现，同一个请求会多次修改数据库状态，系统并未按照我们预期的那样实现幂等。究其原因，是因为请求并发访问，在首次请求完成修改服务端状态前，并发的其他请求和首次请求都通过了幂等判断，对数据库状态进行了多次修改。</p>\n<p>并发导致了原幂等设计失效。</p>\n<p>并发导致了不幂等。</p>\n<h2 id=\"三-解决方案\"><a href=\"#三-解决方案\" class=\"headerlink\" title=\"三 解决方案\"></a><strong>三 解决方案</strong></h2><p>解决并发场景下幂等问题的关键，是找到唯一性约束，执行唯一性检查，相同的数据保存一次，相同的请求操作一次。</p>\n<p>一次访问服务端的请求，可能产生以下几种交互：</p>\n<ol>\n<li>与数据源交互，例如数据库状态变更等；</li>\n<li>与其他业务系统交互，例如调用下游服务或发送消息等；</li>\n</ol>\n<p>一次请求可以只包含一次交互，也可以包含多次交互。例如一次请求可以仅仅修改一次数据库状态，也可以在修改数据库状态后再发送一条数据库状态修改成功的消息。</p>\n<p>于是我们可以得出一个结论：并发场景下，如果一个系统依赖的组件幂等，那么该系统在天然幂等。</p>\n<p>以数据库为例，如果一个请求对数据造成的影响是新增一条数据，那么唯一索引可以是幂等问题的解法。数据库会帮助我们执行唯一性检查，相同数据不会重复落库。</p>\n<p>钉钉通讯录加人就是通过数据库的唯一索引解决了幂等问题。以钉钉通讯录加人为例，在向数据库写数据之前，会先判断数据是否已经存在于数据库之中，如果不存在，加人请求最终会向数据库的员工表插入一条数据。大量相同的并发的通讯录加人请求让系统的幂等设计失效成为可能。在一次加人请求中，（组织ID，工号）可以唯一标记一个请求，在数据库中，也存在（组织ID，工号）的唯一索引。因此我们可以保证，多次相同的加人请求，只会修改一次数据库状态，即添加一条记录。</p>\n<p>如果所依赖的组件天然幂等，那么问题就简单了，但是实际情况往往更加复杂。并发场景下，如果系统依赖的组件无法幂等，我们就需要使用额外的手段实现幂等。</p>\n<p>一个常用的手段就是使用分布式锁。分布式锁的实现方式有很多，比较常用的是缓存式分布式锁。</p>\n<h2 id=\"四-分布式锁\"><a href=\"#四-分布式锁\" class=\"headerlink\" title=\"四 分布式锁\"></a><strong>四 分布式锁</strong></h2><p>在What is a Java distributed lock?中有这样几段话：</p>\n<blockquote>\n<p>In computer science, locks are mechanisms in a multithreaded environment to prevent different threads from operating on the same resource. When using locking, a resource is “locked” for access by a specific thread, and can only be accessed by a different thread once the resource has been released. Locks have several benefits: they stop two threads from doing the same work, and they prevent errors and data corruption when two threads try to use the same resource simultaneously.</p>\n<p>Distributed locks in Java are locks that can work with not only multiple threads running on the same machine, but also threads running on clients on different machines in a distributed system. The threads on these separate machines must communicate and coordinate to make sure that none of them try to access a resource that has been locked up by another.</p>\n</blockquote>\n<p>这几段话告诉我们，锁的本质是共享资源的互斥访问，分布式锁解决了分布式系统中共享资源的互斥访问的问题。</p>\n<p>java.util.concurrent.locks包提供了丰富的锁实现，包括公平锁/非公平锁，阻塞锁/非阻塞锁，读写锁以及可重入锁等。</p>\n<p>我们要如何实现一个分布式锁呢？</p>\n<h3 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h3><p>分布式系统中常见有两个问题：<br>1）单点故障问题，即当持有锁的应用发生单点故障时，锁将被长期无效占有；<br>2）网络超时问题，即当客户端发生网络超时但实际上锁成功时，我们无法再次正确的</p>\n<p>获取锁。</p>\n<p>要解决问题1，一个简单的方案是引入过期时间（lease time），对锁的持有将是有时效的，当应用发生单点故障时，被其持有的锁可以自动释放。</p>\n<p>要解决问题2，一个简单的方案是支持可重入，我们为每个获取锁的客户端都配置一个不会重复的身份标识（通常是UUID），上锁成功后锁将带有该客户端的身份标识。当实际上锁成功而客户端超时重试时，我们可以判断锁已被该客户端持有而返回成功。</p>\n<p>综上我们给出了一个lease-based distribute lock方案。出于性能考量，使用缓存作为锁的存储介质，利用MVCC（Multiversion concurrency control）机制解决共享资源互斥访问问题，具体实现可见附录代码。</p>\n<p>分布式锁的一般使用方式如下<br>● 初始化分布式锁的工厂<br>● 利用工厂生成一个分布式锁实例<br>● 使用该分布式实例上锁和解锁操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testTryLock() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;初始化工厂</span><br><span class=\"line\">    MdbDistributeLockFactory mdbDistributeLockFactory &#x3D; new MdbDistributeLockFactory();</span><br><span class=\"line\">    mdbDistributeLockFactory.setNamespace(603);</span><br><span class=\"line\">    mdbDistributeLockFactory.setMtairManager(new MultiClusterTairManager());</span><br><span class=\"line\">    &#x2F;&#x2F;获得锁</span><br><span class=\"line\">    DistributeLock lock &#x3D; mdbDistributeLockFactory.getLock(&quot;TestLock&quot;);</span><br><span class=\"line\">    &#x2F;&#x2F;上锁解锁操作</span><br><span class=\"line\">    boolean locked &#x3D; lock.tryLock();</span><br><span class=\"line\">    if (!locked) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;do something </span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方案简单易用，但是问题也很明显。例如，释放锁的时候只是简单的将缓存中的key失效，所以存在错误释放他人已持有锁问题。所幸只要锁的租期设置的足够长，该问题出现几率就足够小。</p>\n<p>我们借用Martin Kleppmann在文章How to do distributed locking中的一张图说明该问题。</p>\n<p><img src=\"../../../../img/幂等问题-分布式锁/image-20220324222024770.png\" alt=\"image-20220324222024770\"></p>\n<p>设想一种情况，当占有锁的Client 1在释放锁之前，锁就已经到期了，Client 2将获取锁，此时锁被Client 2持有，但是Client 1可能会错误的将其释放。一个更优秀的方案，我们给每个锁都设置一个身份标识，在释放锁的时候，1）首先查询锁是否是自己的，2）如果是自己的则释放锁。受限于实现方式，步骤1和步骤2不是原子操作，在步骤1和步骤2之间，如果锁到期被其他客户端获取，此时也会错误的释放他人的锁。</p>\n<h3 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h3><p>借助Redis的Lua脚本，可以完美的解决存在错误释放他人已持有锁问题的。在Distributed locks with Redis这篇文章的 Correct implementation with a single instance 这一节中，我们可以得到我们想要的答案——如何实现一个分布式锁。</p>\n<p>当我们想要获取锁时，我们可以执行如下方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET resource_name my_random_value NX PX 30000</span><br></pre></td></tr></table></figure>\n<p>当我们想要释放锁时，我们可以执行如下的Lua脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if redis.call(&quot;get&quot;,KEYS[1]) &#x3D;&#x3D; ARGV[1] then</span><br><span class=\"line\">    return redis.call(&quot;del&quot;,KEYS[1])</span><br><span class=\"line\">else</span><br><span class=\"line\">    return 0</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h3 id=\"方案三\"><a href=\"#方案三\" class=\"headerlink\" title=\"方案三\"></a>方案三</h3><p>在方案一和方案二的讨论过程中，有一个问题被我们反复提及：锁的自动释放。</p>\n<p>这是一把双刃剑：<br>1）一方面它很好的解决了持有锁的客户端单点故障的问题<br>2）另一方面，如果锁提前释放，就会出现锁的错误持有状态</p>\n<p>这个时候，我们可以引入Watch Dog自动续租机制，我们可以参考以下Redisson是如何实现的。</p>\n<p>在上锁成功后，Redisson会调用renewExpiration()方法开启一个Watch Dog线程，为锁自动续期。每过1/3时间续一次，成功则继续下一次续期，失败取消续期操作。</p>\n<p>我们可以再看看Redisson是如何续期的。renewExpiration()方法的第17行renewExpirationAsync()方法是执行锁续期的关键操作，我们进入到方法内部，可以看到Redisson也是使用Lua脚本进行锁续租的：1）判断锁是否存在；2）如果存在则重置过期时间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">renewExpiration</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ExpirationEntry ee = EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ee == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Timeout task = commandExecutor.getConnectionManager().newTimeout(timeout -&gt; &#123;</span><br><span class=\"line\">        ExpirationEntry ent = EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Long threadId = ent.getFirstThreadId();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (threadId == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        RFuture&lt;Boolean&gt; future = renewExpirationAsync(threadId);</span><br><span class=\"line\">        future.onComplete((res, e) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">\"Can't update lock \"</span> + getRawName() + <span class=\"string\">\" expiration\"</span>, e);</span><br><span class=\"line\">                EXPIRATION_RENEWAL_MAP.remove(getEntryName());</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (res) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// reschedule itself</span></span><br><span class=\"line\">                renewExpiration();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                cancelExpirationRenewal(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;, internalLockLeaseTime / <span class=\"number\">3</span>, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">    ee.setTimeout(task);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> RFuture&lt;Boolean&gt; <span class=\"title\">renewExpirationAsync</span><span class=\"params\">(<span class=\"keyword\">long</span> threadId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class=\"line\">                          <span class=\"string\">\"if (redis.call('hexists', KEYS[1], ARGV[2]) == 1) then \"</span> +</span><br><span class=\"line\">                          <span class=\"string\">\"redis.call('pexpire', KEYS[1], ARGV[1]); \"</span> +</span><br><span class=\"line\">                          <span class=\"string\">\"return 1; \"</span> +</span><br><span class=\"line\">                          <span class=\"string\">\"end; \"</span> +</span><br><span class=\"line\">                          <span class=\"string\">\"return 0;\"</span>,</span><br><span class=\"line\">                          Collections.singletonList(getRawName()),</span><br><span class=\"line\">                          internalLockLeaseTime, getLockName(threadId));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>借助Redisson的自动续期机制，我们无需再担心锁的自动释放。但是讨论到这里，我还是不得不面对一个问题：分布式锁本身不是一个分布式应用。当Redis服务器故障无法正常工作时，整个分布式锁也就无法提供服务。</p>\n<p>更进一步，我们可以看看Distributed locks with Redis这篇文章中提到的Redlock算法及其实现。</p>\n<p>Redlock算法不是银弹，关于它的好与坏，也有很多争论：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">How to do distributed locking：</span><br><span class=\"line\">https:&#x2F;&#x2F;martin.kleppmann.com&#x2F;2016&#x2F;02&#x2F;08&#x2F;how-to-do-distributed-locking.html</span><br><span class=\"line\">Is Redlock safe?：</span><br><span class=\"line\">http:&#x2F;&#x2F;antirez.com&#x2F;news&#x2F;101</span><br><span class=\"line\">Martin Kleppmann和Antirez关于Redlock的争辩：</span><br><span class=\"line\">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><strong>参考资料</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">What is a Java distributed lock?</span><br><span class=\"line\">https:&#x2F;&#x2F;redisson.org&#x2F;glossary&#x2F;java-distributed-lock.html</span><br><span class=\"line\">Distributed locks and synchronizers：</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;redisson&#x2F;redisson&#x2F;wiki&#x2F;8.-distributed-locks-and-synchronizers</span><br><span class=\"line\">Distributed locks with Redis：</span><br><span class=\"line\">https:&#x2F;&#x2F;redis.io&#x2F;topics&#x2F;distlock?spm&#x3D;ata.21736010.0.0.31f77e3aFs96rz</span><br></pre></td></tr></table></figure>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a><strong>附录</strong></h2><h3 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MdbDistributeLock</span> <span class=\"keyword\">implements</span> <span class=\"title\">DistributeLock</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁的命名空间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> namespace;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁对应的缓存key</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String lockName;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁的唯一标识，保证可重入，以应对put成功，但是返回超时的情况</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String lockId;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否持有锁。true：是</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> locked;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 缓存实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TairManager tairManager;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MdbDistributeLock</span><span class=\"params\">(TairManager tairManager, <span class=\"keyword\">int</span> namespace, String lockCacheKey)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tairManager = tairManager;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.namespace = namespace;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lockName = lockCacheKey;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lockId = UUID.randomUUID().toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryLock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取锁状态</span></span><br><span class=\"line\">            Result&lt;DataEntry&gt; getResult = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            ResultCode getResultCode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>; cnt &lt; DEFAULT_RETRY_TIMES; cnt++) &#123;</span><br><span class=\"line\">                getResult = tairManager.get(namespace, lockName);</span><br><span class=\"line\">                getResultCode = getResult == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : getResult.getRc();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (noNeedRetry(getResultCode)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//重入，已持有锁，返回成功</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ResultCode.SUCCESS.equals(getResultCode)</span><br><span class=\"line\">                &amp;&amp; getResult.getValue() != <span class=\"keyword\">null</span> &amp;&amp; lockId.equals(getResult.getValue().getValue())) &#123;</span><br><span class=\"line\">                locked = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//不可获取锁，返回失败</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!ResultCode.DATANOTEXSITS.equals(getResultCode)) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">\"tryLock fail code=&#123;&#125; lock=&#123;&#125; traceId=&#123;&#125;\"</span>, getResultCode, <span class=\"keyword\">this</span>, EagleEye.getTraceId());</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//尝试获取锁</span></span><br><span class=\"line\">            ResultCode putResultCode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>; cnt &lt; DEFAULT_RETRY_TIMES; cnt++) &#123;</span><br><span class=\"line\">                putResultCode = tairManager.put(namespace, lockName, lockId, MDB_CACHE_VERSION,</span><br><span class=\"line\">                    DEFAULT_EXPIRE_TIME_SEC);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (noNeedRetry(putResultCode)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!ResultCode.SUCCESS.equals(putResultCode)) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">\"tryLock fail code=&#123;&#125; lock=&#123;&#125; traceId=&#123;&#125;\"</span>, getResultCode, <span class=\"keyword\">this</span>, EagleEye.getTraceId());</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            locked = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">\"DistributedLock.tryLock fail lock=&#123;&#125;\"</span>, <span class=\"keyword\">this</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!locked) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ResultCode resultCode = tairManager.invalid(namespace, lockName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!resultCode.isSuccess()) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">\"DistributedLock.unlock fail lock=&#123;&#125; resultCode=&#123;&#125; traceId=&#123;&#125;\"</span>, <span class=\"keyword\">this</span>, resultCode,</span><br><span class=\"line\">                EagleEye.getTraceId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        locked = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断是否需要重试</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> resultCode 缓存的返回码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true：不用重试</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">noNeedRetry</span><span class=\"params\">(ResultCode resultCode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultCode != <span class=\"keyword\">null</span> &amp;&amp; !ResultCode.CONNERROR.equals(resultCode) &amp;&amp; !ResultCode.TIMEOUT.equals(</span><br><span class=\"line\">            resultCode) &amp;&amp; !ResultCode.UNKNOW.equals(resultCode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"分布式锁工厂\"><a href=\"#分布式锁工厂\" class=\"headerlink\" title=\"分布式锁工厂\"></a>分布式锁工厂</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MdbDistributeLockFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">DistributeLockFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 缓存的命名空间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Setter</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> namespace;</span><br><span class=\"line\">    <span class=\"meta\">@Setter</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MultiClusterTairManager mtairManager;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DistributeLock <span class=\"title\">getLock</span><span class=\"params\">(String lockName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MdbDistributeLock(mtairManager, namespace, lockName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","next":{"title":"为什么 Java 中“1000==1000”为false，而”100==100“为true？","path":"api/articles/resource-java-Base-Integer.json","image":"/img/header_img/java/integer.png","num_read":1233,"num_like":395,"num_collection":495,"num_comments":167},"prev":{"title":"如何从容应对复杂性","path":"api/articles/resource-java-advanced-complexity.json","image":"/img/header_img/java/complexity.png","num_read":338,"num_like":1048,"num_collection":255,"num_comments":144},"categories":[{"name":"微服务","path":"api/categories/微服务.json","pathContent":"api/categories/微服务","description":"一种云原生框架方法，其中单个应用程序由许多松散耦合且可独立部署的较小组件或服务组成","cover":"https://sunfy9.gitee.io/project/photo/project/MicroService.PNG"}],"tags":[]}