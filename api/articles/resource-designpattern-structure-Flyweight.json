{"title":"java设计模式之享元模式","num_read":1475,"num_like":405,"num_collection":36,"num_comments":40,"slug":"resource-designpattern-structure-Flyweight","date":"2020-10-11T16:00:00.000Z","img":"/img/header_img/Design/Flyweight.png","_id":"clhrbp2b9005do5lg29d7ffik","project":"designPattern","site":{"data":{}},"updated":"2022-09-20T01:36:42.651Z","author":"Sunfy","comments":true,"path":"api/articles/resource-designpattern-structure-Flyweight.json","webPath":"2020/10/12/resource-designpattern-structure-Flyweight/","permalink":"https://sunfy9.gitee.io/2020/10/12/resource-designpattern-structure-Flyweight/","excerpt":null,"covers":["../../../../img/Flyweight/image-20211029094602279.png"],"keywords":"sunfy, hexo-theme-snail","content":"<p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p>\n<p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。我们将通过创建 5 个对象来画出 20 个分布于不同位置的圆来演示这种模式。由于只有 5 种可用的颜色，所以 color 属性被用来检查现有的 <em>Circle</em> 对象。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><strong>意图：</strong>运用共享技术有效地支持大量细粒度的对象。</p>\n<p><strong>主要解决：</strong>在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。</p>\n<p><strong>何时使用：</strong> 1、系统中有大量对象。 2、这些对象消耗大量内存。 3、这些对象的状态大部分可以外部化。 4、这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。 5、系统不依赖于这些对象身份，这些对象是不可分辨的。</p>\n<p><strong>如何解决：</strong>用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。</p>\n<p><strong>关键代码：</strong>用 HashMap 存储这些对象。</p>\n<p><strong>应用实例：</strong> 1、JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。 2、数据库的数据池。</p>\n<p><strong>优点：</strong>大大减少对象的创建，降低系统的内存，使效率提高。</p>\n<p><strong>缺点：</strong>提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</p>\n<p><strong>使用场景：</strong> 1、系统有大量相似对象。 2、需要缓冲池的场景。</p>\n<p><strong>注意事项：</strong> 1、注意划分外部状态和内部状态，否则可能会引起线程安全问题。 2、这些类必须有一个工厂对象加以控制。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现<sunfy-line></h2><p>我们将创建一个 <em>Shape</em> 接口和实现了 <em>Shape</em> 接口的实体类 <em>Circle</em>。下一步是定义工厂类 <em>ShapeFactory</em>。</p>\n<p><em>ShapeFactory</em> 有一个 <em>Circle</em> 的 <em>HashMap</em>，其中键名为 <em>Circle</em> 对象的颜色。无论何时接收到请求，都会创建一个特定颜色的圆。<em>ShapeFactory</em> 检查它的 <em>HashMap</em> 中的 circle 对象，如果找到 <em>Circle</em> 对象，则返回该对象，否则将创建一个存储在 hashmap 中以备后续使用的新对象，并把该对象返回到客户端。</p>\n<p><em>FlyWeightPatternDemo</em> 类使用 <em>ShapeFactory</em> 来获取 <em>Shape</em> 对象。它将向 <em>ShapeFactory</em> 传递信息（<em>red / green / blue/ black / white</em>），以便获取它所需对象的颜色。</p>\n<p><img src=\"../../../../img/Flyweight/image-20211029094602279.png\" alt=\"image-20211029094602279\"></p>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤 1\"></a>步骤 1</h3><p>创建一个接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-2\"><a href=\"#步骤-2\" class=\"headerlink\" title=\"步骤 2\"></a>步骤 2</h3><p>创建实现接口的实体类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String color;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> radius;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Circle</span><span class=\"params\">(String color)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.color = color;     </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setX</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setY</span><span class=\"params\">(<span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRadius</span><span class=\"params\">(<span class=\"keyword\">int</span> radius)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Circle: Draw() [Color : \"</span> + color </span><br><span class=\"line\">         +<span class=\"string\">\", x : \"</span> + x +<span class=\"string\">\", y :\"</span> + y +<span class=\"string\">\", radius :\"</span> + radius);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-3\"><a href=\"#步骤-3\" class=\"headerlink\" title=\"步骤 3\"></a>步骤 3</h3><p>创建一个工厂，生成基于给定信息的实体类的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShapeFactory</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> HashMap&lt;String, Shape&gt; circleMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Shape <span class=\"title\">getCircle</span><span class=\"params\">(String color)</span> </span>&#123;</span><br><span class=\"line\">      Circle circle = (Circle)circleMap.get(color);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(circle == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         circle = <span class=\"keyword\">new</span> Circle(color);</span><br><span class=\"line\">         circleMap.put(color, circle);</span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"Creating circle of color : \"</span> + color);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> circle;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-4\"><a href=\"#步骤-4\" class=\"headerlink\" title=\"步骤 4\"></a>步骤 4</h3><p>使用该工厂，通过传递颜色信息来获取实体类的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyweightPatternDemo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String colors[] = </span><br><span class=\"line\">      &#123; <span class=\"string\">\"Red\"</span>, <span class=\"string\">\"Green\"</span>, <span class=\"string\">\"Blue\"</span>, <span class=\"string\">\"White\"</span>, <span class=\"string\">\"Black\"</span> &#125;;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; ++i) &#123;</span><br><span class=\"line\">         Circle circle = </span><br><span class=\"line\">            (Circle)ShapeFactory.getCircle(getRandomColor());</span><br><span class=\"line\">         circle.setX(getRandomX());</span><br><span class=\"line\">         circle.setY(getRandomY());</span><br><span class=\"line\">         circle.setRadius(<span class=\"number\">100</span>);</span><br><span class=\"line\">         circle.draw();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getRandomColor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> colors[(<span class=\"keyword\">int</span>)(Math.random()*colors.length)];</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getRandomX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)(Math.random()*<span class=\"number\">100</span> );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getRandomY</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)(Math.random()*<span class=\"number\">100</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-5\"><a href=\"#步骤-5\" class=\"headerlink\" title=\"步骤 5\"></a>步骤 5</h3><p>执行程序，输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating circle of color : Black</span><br><span class=\"line\">Circle: Draw() [Color : Black, x : 36, y :71, radius :100</span><br><span class=\"line\">Creating circle of color : Green</span><br><span class=\"line\">Circle: Draw() [Color : Green, x : 27, y :27, radius :100</span><br><span class=\"line\">Creating circle of color : White</span><br><span class=\"line\">Circle: Draw() [Color : White, x : 64, y :10, radius :100</span><br><span class=\"line\">Creating circle of color : Red</span><br><span class=\"line\">Circle: Draw() [Color : Red, x : 15, y :44, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Green, x : 19, y :10, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Green, x : 94, y :32, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : White, x : 69, y :98, radius :100</span><br><span class=\"line\">Creating circle of color : Blue</span><br><span class=\"line\">Circle: Draw() [Color : Blue, x : 13, y :4, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Green, x : 21, y :21, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Blue, x : 55, y :86, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : White, x : 90, y :70, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Green, x : 78, y :3, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Green, x : 64, y :89, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Blue, x : 3, y :91, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Blue, x : 62, y :82, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Green, x : 97, y :61, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Green, x : 86, y :12, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Green, x : 38, y :93, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Red, x : 76, y :82, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Blue, x : 95, y :82, radius :100</span><br></pre></td></tr></table></figure>\n","more":"<p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p>\n<p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。我们将通过创建 5 个对象来画出 20 个分布于不同位置的圆来演示这种模式。由于只有 5 种可用的颜色，所以 color 属性被用来检查现有的 <em>Circle</em> 对象。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><strong>意图：</strong>运用共享技术有效地支持大量细粒度的对象。</p>\n<p><strong>主要解决：</strong>在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。</p>\n<p><strong>何时使用：</strong> 1、系统中有大量对象。 2、这些对象消耗大量内存。 3、这些对象的状态大部分可以外部化。 4、这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。 5、系统不依赖于这些对象身份，这些对象是不可分辨的。</p>\n<p><strong>如何解决：</strong>用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。</p>\n<p><strong>关键代码：</strong>用 HashMap 存储这些对象。</p>\n<p><strong>应用实例：</strong> 1、JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。 2、数据库的数据池。</p>\n<p><strong>优点：</strong>大大减少对象的创建，降低系统的内存，使效率提高。</p>\n<p><strong>缺点：</strong>提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</p>\n<p><strong>使用场景：</strong> 1、系统有大量相似对象。 2、需要缓冲池的场景。</p>\n<p><strong>注意事项：</strong> 1、注意划分外部状态和内部状态，否则可能会引起线程安全问题。 2、这些类必须有一个工厂对象加以控制。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现<sunfy-line></h2><p>我们将创建一个 <em>Shape</em> 接口和实现了 <em>Shape</em> 接口的实体类 <em>Circle</em>。下一步是定义工厂类 <em>ShapeFactory</em>。</p>\n<p><em>ShapeFactory</em> 有一个 <em>Circle</em> 的 <em>HashMap</em>，其中键名为 <em>Circle</em> 对象的颜色。无论何时接收到请求，都会创建一个特定颜色的圆。<em>ShapeFactory</em> 检查它的 <em>HashMap</em> 中的 circle 对象，如果找到 <em>Circle</em> 对象，则返回该对象，否则将创建一个存储在 hashmap 中以备后续使用的新对象，并把该对象返回到客户端。</p>\n<p><em>FlyWeightPatternDemo</em> 类使用 <em>ShapeFactory</em> 来获取 <em>Shape</em> 对象。它将向 <em>ShapeFactory</em> 传递信息（<em>red / green / blue/ black / white</em>），以便获取它所需对象的颜色。</p>\n<p><img src=\"../../../../img/Flyweight/image-20211029094602279.png\" alt=\"image-20211029094602279\"></p>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤 1\"></a>步骤 1</h3><p>创建一个接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-2\"><a href=\"#步骤-2\" class=\"headerlink\" title=\"步骤 2\"></a>步骤 2</h3><p>创建实现接口的实体类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String color;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> radius;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Circle</span><span class=\"params\">(String color)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.color = color;     </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setX</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setY</span><span class=\"params\">(<span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRadius</span><span class=\"params\">(<span class=\"keyword\">int</span> radius)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Circle: Draw() [Color : \"</span> + color </span><br><span class=\"line\">         +<span class=\"string\">\", x : \"</span> + x +<span class=\"string\">\", y :\"</span> + y +<span class=\"string\">\", radius :\"</span> + radius);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-3\"><a href=\"#步骤-3\" class=\"headerlink\" title=\"步骤 3\"></a>步骤 3</h3><p>创建一个工厂，生成基于给定信息的实体类的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShapeFactory</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> HashMap&lt;String, Shape&gt; circleMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Shape <span class=\"title\">getCircle</span><span class=\"params\">(String color)</span> </span>&#123;</span><br><span class=\"line\">      Circle circle = (Circle)circleMap.get(color);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(circle == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         circle = <span class=\"keyword\">new</span> Circle(color);</span><br><span class=\"line\">         circleMap.put(color, circle);</span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"Creating circle of color : \"</span> + color);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> circle;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-4\"><a href=\"#步骤-4\" class=\"headerlink\" title=\"步骤 4\"></a>步骤 4</h3><p>使用该工厂，通过传递颜色信息来获取实体类的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyweightPatternDemo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String colors[] = </span><br><span class=\"line\">      &#123; <span class=\"string\">\"Red\"</span>, <span class=\"string\">\"Green\"</span>, <span class=\"string\">\"Blue\"</span>, <span class=\"string\">\"White\"</span>, <span class=\"string\">\"Black\"</span> &#125;;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; ++i) &#123;</span><br><span class=\"line\">         Circle circle = </span><br><span class=\"line\">            (Circle)ShapeFactory.getCircle(getRandomColor());</span><br><span class=\"line\">         circle.setX(getRandomX());</span><br><span class=\"line\">         circle.setY(getRandomY());</span><br><span class=\"line\">         circle.setRadius(<span class=\"number\">100</span>);</span><br><span class=\"line\">         circle.draw();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getRandomColor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> colors[(<span class=\"keyword\">int</span>)(Math.random()*colors.length)];</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getRandomX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)(Math.random()*<span class=\"number\">100</span> );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getRandomY</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)(Math.random()*<span class=\"number\">100</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-5\"><a href=\"#步骤-5\" class=\"headerlink\" title=\"步骤 5\"></a>步骤 5</h3><p>执行程序，输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating circle of color : Black</span><br><span class=\"line\">Circle: Draw() [Color : Black, x : 36, y :71, radius :100</span><br><span class=\"line\">Creating circle of color : Green</span><br><span class=\"line\">Circle: Draw() [Color : Green, x : 27, y :27, radius :100</span><br><span class=\"line\">Creating circle of color : White</span><br><span class=\"line\">Circle: Draw() [Color : White, x : 64, y :10, radius :100</span><br><span class=\"line\">Creating circle of color : Red</span><br><span class=\"line\">Circle: Draw() [Color : Red, x : 15, y :44, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Green, x : 19, y :10, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Green, x : 94, y :32, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : White, x : 69, y :98, radius :100</span><br><span class=\"line\">Creating circle of color : Blue</span><br><span class=\"line\">Circle: Draw() [Color : Blue, x : 13, y :4, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Green, x : 21, y :21, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Blue, x : 55, y :86, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : White, x : 90, y :70, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Green, x : 78, y :3, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Green, x : 64, y :89, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Blue, x : 3, y :91, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Blue, x : 62, y :82, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Green, x : 97, y :61, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Green, x : 86, y :12, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Green, x : 38, y :93, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Red, x : 76, y :82, radius :100</span><br><span class=\"line\">Circle: Draw() [Color : Blue, x : 95, y :82, radius :100</span><br></pre></td></tr></table></figure>\n","next":{"title":"SpringBoot集成Druid","path":"api/articles/resource-Spring-SpringBoot-SpringBoot集成Druid.json","image":"/img/header_img/spring/springDruid.png","num_read":1705,"num_like":581,"num_collection":750,"num_comments":48},"prev":{"title":"java设计模式之组合模式","path":"api/articles/resource-designpattern-structure-Composite.json","image":"/img/header_img/Design/Composite.png","num_read":228,"num_like":882,"num_collection":365,"num_comments":54},"categories":[{"name":"设计模式","path":"api/categories/设计模式.json","pathContent":"api/categories/设计模式","description":"简单快捷、解决方案","cover":"https://sunfy9.gitee.io/project/photo/project/design.jpg"}],"tags":[]}