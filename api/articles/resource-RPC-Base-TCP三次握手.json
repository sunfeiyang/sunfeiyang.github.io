{"title":"TCP 为什么要三次握手?","num_read":905,"num_like":940,"num_collection":482,"num_comments":219,"slug":"resource-RPC-Base-TCP三次握手","date":"2022-07-14T16:00:00.000Z","img":"/img/header_img/rpc/tcp三次握手.png","format":"gallery","_id":"clhrbp2fr00g5o5lgc4g43a9s","project":"RPC","type":"banner","subtitle":"为了准确无误地把数据送达目标处，TCP 协议采用了三次握手策略。","site":{"data":{}},"updated":"2022-09-20T02:04:58.600Z","author":"Sunfy","comments":true,"path":"api/articles/resource-RPC-Base-TCP三次握手.json","webPath":"2022/07/15/resource-RPC-Base-TCP三次握手/","permalink":"https://sunfy9.gitee.io/2022/07/15/resource-RPC-Base-TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/","excerpt":null,"covers":["../../../../img/TCP三次握手/image-20220811173538526.png","../../../../img/TCP三次握手/image-20220811173603750.png","../../../../img/TCP三次握手/image-20220811173630654.png","../../../../img/TCP三次握手/image-20220811173648547.png","../../../../img/2022/end.gif"],"keywords":"sunfy, hexo-theme-snail","content":"<h3 id=\"建立连接-TCP-三次握手\"><a href=\"#建立连接-TCP-三次握手\" class=\"headerlink\" title=\"建立连接-TCP 三次握手\"></a>建立连接-TCP 三次握手</h3><p><img src=\"../../../../img/TCP三次握手/image-20220811173538526.png\" alt=\"image-20220811173538526\" style=\"zoom:50%;\" /></p>\n<p>图解 TCP 三次握手</p>\n<ul>\n<li><strong>一次握手</strong>:客户端发送带有 SYN（SEQ=x） 标志的数据包 -&gt; 服务端，然后客户端进入 <strong>SYN_SEND</strong> 状态，等待服务器的确认；</li>\n<li><strong>二次握手</strong>:服务端发送带有 SYN+ACK(SEQ=y,ACK=x+1) 标志的数据包 -&gt; 客户端,然后服务端进入 <strong>SYN_RECV</strong> 状态</li>\n<li><strong>三次握手</strong>:客户端发送带有带有 ACK 标志的数据包–&gt;服务端，然后客户端和服务器端都进入<strong>ESTABLISHED</strong> 状态，完成 TCP 三次握手。<sunfy-line></li>\n</ul>\n<p><strong>当建立了 3 次握手之后，客户端和服务端就可以传输数据啦！</strong></p>\n<p>再来张详细的图片吧！这张图片画的太好了，哈哈，但是不是我画的。</p>\n<p><img src=\"../../../../img/TCP三次握手/image-20220811173603750.png\" alt=\"image-20220811173603750\" style=\"zoom:50%;\" /></p>\n<p>图解TCP三次握手-详尽版</p>\n<h4 id=\"为什么要三次握手\"><a href=\"#为什么要三次握手\" class=\"headerlink\" title=\"为什么要三次握手?\"></a>为什么要三次握手?</h4><p><strong>三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的。</strong></p>\n<ul>\n<li><strong>第一次握手</strong> ：Client 什么都不能确认；Server 确认了对方发送正常，自己接收正常</li>\n<li><strong>第二次握手</strong> ：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：对方发送正常，自己接收正常</li>\n<li><strong>第三次握手</strong> ：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送、接收正常</li>\n</ul>\n<p>三次握手就能确认双方收发功能都正常，缺一不可。</p>\n<h4 id=\"第-2-次握手传回了-ACK，为什么还要传回-SYN？\"><a href=\"#第-2-次握手传回了-ACK，为什么还要传回-SYN？\" class=\"headerlink\" title=\"第 2 次握手传回了 ACK，为什么还要传回 SYN？\"></a>第 2 次握手传回了 ACK，为什么还要传回 SYN？</h4><p>接收端传回发送端所发送的 ACK 是为了告诉客户端，我接收到的信息确实就是你所发送的信号了，这表明从客户端到服务端的通信是正常的。而回传 SYN 则是为了建立并确认从服务端到客户端的通信。”</p>\n<blockquote>\n<p>SYN 同步序列编号(Synchronize Sequence Numbers) 是 TCP/IP 建立连接时使用的握手信号。在客户机和服务器之间建立正常的 TCP 网络连接时，客户机首先发出一个 SYN 消息，服务器使用 SYN-ACK 应答表示接收到了这个消息，最后客户机再以 ACK(Acknowledgement）消息响应。这样在客户机和服务器之间才能建立起可靠的 TCP 连接，数据才可以在客户机和服务器之间传递。</p>\n</blockquote>\n<h3 id=\"断开连接-TCP-四次挥手\"><a href=\"#断开连接-TCP-四次挥手\" class=\"headerlink\" title=\"断开连接-TCP 四次挥手\"></a>断开连接-TCP 四次挥手</h3><p><img src=\"../../../../img/TCP三次握手/image-20220811173630654.png\" alt=\"image-20220811173630654\" style=\"zoom:50%;\" /></p>\n<p>图解TCP四次挥手</p>\n<p>断开一个 TCP 连接则需要“四次挥手”：</p>\n<ul>\n<li><strong>第一次挥手</strong> ：客户端发送一个 FIN（SEQ=X） 标志的数据包-&gt;服务端，用来关闭客户端到服务器的数据传送。然后，客户端进入 <strong>FIN-WAIT-1</strong> 状态。</li>\n<li><strong>第二次挥手</strong> ：服务器收到这个 FIN（SEQ=X） 标志的数据包，它发送一个 ACK （SEQ=X+1）标志的数据包-&gt;客户端 。然后，此时服务端进入<strong>CLOSE-WAIT</strong>状态，客户端进入<strong>FIN-WAIT-2</strong>状态。</li>\n<li><strong>第三次挥手</strong> ：服务端关闭与客户端的连接并发送一个 FIN (SEQ=y)标志的数据包-&gt;客户端请求关闭连接，然后，服务端进入<strong>LAST-ACK</strong>状态。</li>\n<li><strong>第四次挥手</strong> ：客户端发送 ACK (SEQ=y+1)标志的数据包-&gt;服务端并且进入<strong>TIME-WAIT</strong>状态，服务端在收到 ACK (SEQ=y+1)标志的数据包后进入 CLOSE 状态。此时，如果客户端等待 <strong>2MSL</strong> 后依然没有收到回复，就证明服务端已正常关闭，随后，客户端也可以关闭连接了。</li>\n</ul>\n<p><strong>只要四次挥手没有结束，客户端和服务端就可以继续传输数据！</strong></p>\n<p>再继来张详细的图片吧！这张图片画的太好了，哈哈，但是不是我画的。</p>\n<p><img src=\"../../../../img/TCP三次握手/image-20220811173648547.png\" alt=\"image-20220811173648547\" style=\"zoom:50%;\" /></p>\n<p>图解TCP四次挥手</p>\n<h4 id=\"为什么要四次挥手\"><a href=\"#为什么要四次挥手\" class=\"headerlink\" title=\"为什么要四次挥手\"></a>为什么要四次挥手</h4><p>任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送的时候，则发出连接释放通知，对方确认后就完全关闭了 TCP 连接。</p>\n<p>举个例子：A 和 B 打电话，通话即将结束后。</p>\n<ul>\n<li><strong>第一次挥手</strong> ：A 说“我没啥要说的了”</li>\n<li><strong>第二次挥手</strong> ：B 回答“我知道了”，但是 B 可能还会有要说的话，A 不能要求 B 跟着自己的节奏结束通话</li>\n<li><strong>第三次挥手</strong> ：于是 B 可能又巴拉巴拉说了一通，最后 B 说“我说完了”</li>\n<li><strong>第四次挥手</strong> ：A 回答“知道了”，这样通话才算结束。</li>\n</ul>\n<h4 id=\"为什么不能把服务器发送的-ACK-和-FIN-合并起来，变成三次挥手？\"><a href=\"#为什么不能把服务器发送的-ACK-和-FIN-合并起来，变成三次挥手？\" class=\"headerlink\" title=\"为什么不能把服务器发送的 ACK 和 FIN 合并起来，变成三次挥手？\"></a>为什么不能把服务器发送的 ACK 和 FIN 合并起来，变成三次挥手？</h4><p>因为服务器收到客户端断开连接的请求时，可能还有一些数据没有发完，这时先回复 ACK，表示接收到了断开连接的请求。等到数据发完之后再发 FIN，断开服务器到客户端的数据传送。</p>\n<h4 id=\"如果第二次挥手时服务器的-ACK-没有送达客户端，会怎样？\"><a href=\"#如果第二次挥手时服务器的-ACK-没有送达客户端，会怎样？\" class=\"headerlink\" title=\"如果第二次挥手时服务器的 ACK 没有送达客户端，会怎样？\"></a>如果第二次挥手时服务器的 ACK 没有送达客户端，会怎样？</h4><p>客户端没有收到 ACK 确认，会重新发送 FIN 请求。</p>\n<h4 id=\"为什么第四次挥手客户端需要等待-2-MSL（报文段最长寿命）时间后才进入-CLOSED-状态？\"><a href=\"#为什么第四次挥手客户端需要等待-2-MSL（报文段最长寿命）时间后才进入-CLOSED-状态？\" class=\"headerlink\" title=\"为什么第四次挥手客户端需要等待 2*MSL（报文段最长寿命）时间后才进入 CLOSED 状态？\"></a>为什么第四次挥手客户端需要等待 2*MSL（报文段最长寿命）时间后才进入 CLOSED 状态？</h4><p>第四次挥手时，客户端发送给服务器的 ACK 有可能丢失，如果服务端没有因为某些原因而没有收到 ACK 的话，服务端就会重发 FIN，如果客户端在 2*MSL 的时间内收到了 FIN，就会重新发送 ACK 并再次等待 2MSL，防止 Server 没有收到 ACK 而不断重发 FIN。</p>\n<blockquote>\n<p><strong>MSL(Maximum Segment Lifetime)</strong> : 一个片段在网络中最大的存活时间，2MSL 就是一个发送和一个回复所需的最大时间。如果直到 2MSL，Client 都没有再次收到 FIN，那么 Client 推断 ACK 已经被成功接收，则结束 TCP 连接。</p>\n</blockquote>\n<p><img src=\"../../../../img/2022/end.gif\" alt=\"end\"></p>\n","more":"<h3 id=\"建立连接-TCP-三次握手\"><a href=\"#建立连接-TCP-三次握手\" class=\"headerlink\" title=\"建立连接-TCP 三次握手\"></a>建立连接-TCP 三次握手</h3><p><img src=\"../../../../img/TCP三次握手/image-20220811173538526.png\" alt=\"image-20220811173538526\" style=\"zoom:50%;\" /></p>\n<p>图解 TCP 三次握手</p>\n<ul>\n<li><strong>一次握手</strong>:客户端发送带有 SYN（SEQ=x） 标志的数据包 -&gt; 服务端，然后客户端进入 <strong>SYN_SEND</strong> 状态，等待服务器的确认；</li>\n<li><strong>二次握手</strong>:服务端发送带有 SYN+ACK(SEQ=y,ACK=x+1) 标志的数据包 -&gt; 客户端,然后服务端进入 <strong>SYN_RECV</strong> 状态</li>\n<li><strong>三次握手</strong>:客户端发送带有带有 ACK 标志的数据包–&gt;服务端，然后客户端和服务器端都进入<strong>ESTABLISHED</strong> 状态，完成 TCP 三次握手。<sunfy-line></li>\n</ul>\n<p><strong>当建立了 3 次握手之后，客户端和服务端就可以传输数据啦！</strong></p>\n<p>再来张详细的图片吧！这张图片画的太好了，哈哈，但是不是我画的。</p>\n<p><img src=\"../../../../img/TCP三次握手/image-20220811173603750.png\" alt=\"image-20220811173603750\" style=\"zoom:50%;\" /></p>\n<p>图解TCP三次握手-详尽版</p>\n<h4 id=\"为什么要三次握手\"><a href=\"#为什么要三次握手\" class=\"headerlink\" title=\"为什么要三次握手?\"></a>为什么要三次握手?</h4><p><strong>三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的。</strong></p>\n<ul>\n<li><strong>第一次握手</strong> ：Client 什么都不能确认；Server 确认了对方发送正常，自己接收正常</li>\n<li><strong>第二次握手</strong> ：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：对方发送正常，自己接收正常</li>\n<li><strong>第三次握手</strong> ：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送、接收正常</li>\n</ul>\n<p>三次握手就能确认双方收发功能都正常，缺一不可。</p>\n<h4 id=\"第-2-次握手传回了-ACK，为什么还要传回-SYN？\"><a href=\"#第-2-次握手传回了-ACK，为什么还要传回-SYN？\" class=\"headerlink\" title=\"第 2 次握手传回了 ACK，为什么还要传回 SYN？\"></a>第 2 次握手传回了 ACK，为什么还要传回 SYN？</h4><p>接收端传回发送端所发送的 ACK 是为了告诉客户端，我接收到的信息确实就是你所发送的信号了，这表明从客户端到服务端的通信是正常的。而回传 SYN 则是为了建立并确认从服务端到客户端的通信。”</p>\n<blockquote>\n<p>SYN 同步序列编号(Synchronize Sequence Numbers) 是 TCP/IP 建立连接时使用的握手信号。在客户机和服务器之间建立正常的 TCP 网络连接时，客户机首先发出一个 SYN 消息，服务器使用 SYN-ACK 应答表示接收到了这个消息，最后客户机再以 ACK(Acknowledgement）消息响应。这样在客户机和服务器之间才能建立起可靠的 TCP 连接，数据才可以在客户机和服务器之间传递。</p>\n</blockquote>\n<h3 id=\"断开连接-TCP-四次挥手\"><a href=\"#断开连接-TCP-四次挥手\" class=\"headerlink\" title=\"断开连接-TCP 四次挥手\"></a>断开连接-TCP 四次挥手</h3><p><img src=\"../../../../img/TCP三次握手/image-20220811173630654.png\" alt=\"image-20220811173630654\" style=\"zoom:50%;\" /></p>\n<p>图解TCP四次挥手</p>\n<p>断开一个 TCP 连接则需要“四次挥手”：</p>\n<ul>\n<li><strong>第一次挥手</strong> ：客户端发送一个 FIN（SEQ=X） 标志的数据包-&gt;服务端，用来关闭客户端到服务器的数据传送。然后，客户端进入 <strong>FIN-WAIT-1</strong> 状态。</li>\n<li><strong>第二次挥手</strong> ：服务器收到这个 FIN（SEQ=X） 标志的数据包，它发送一个 ACK （SEQ=X+1）标志的数据包-&gt;客户端 。然后，此时服务端进入<strong>CLOSE-WAIT</strong>状态，客户端进入<strong>FIN-WAIT-2</strong>状态。</li>\n<li><strong>第三次挥手</strong> ：服务端关闭与客户端的连接并发送一个 FIN (SEQ=y)标志的数据包-&gt;客户端请求关闭连接，然后，服务端进入<strong>LAST-ACK</strong>状态。</li>\n<li><strong>第四次挥手</strong> ：客户端发送 ACK (SEQ=y+1)标志的数据包-&gt;服务端并且进入<strong>TIME-WAIT</strong>状态，服务端在收到 ACK (SEQ=y+1)标志的数据包后进入 CLOSE 状态。此时，如果客户端等待 <strong>2MSL</strong> 后依然没有收到回复，就证明服务端已正常关闭，随后，客户端也可以关闭连接了。</li>\n</ul>\n<p><strong>只要四次挥手没有结束，客户端和服务端就可以继续传输数据！</strong></p>\n<p>再继来张详细的图片吧！这张图片画的太好了，哈哈，但是不是我画的。</p>\n<p><img src=\"../../../../img/TCP三次握手/image-20220811173648547.png\" alt=\"image-20220811173648547\" style=\"zoom:50%;\" /></p>\n<p>图解TCP四次挥手</p>\n<h4 id=\"为什么要四次挥手\"><a href=\"#为什么要四次挥手\" class=\"headerlink\" title=\"为什么要四次挥手\"></a>为什么要四次挥手</h4><p>任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送的时候，则发出连接释放通知，对方确认后就完全关闭了 TCP 连接。</p>\n<p>举个例子：A 和 B 打电话，通话即将结束后。</p>\n<ul>\n<li><strong>第一次挥手</strong> ：A 说“我没啥要说的了”</li>\n<li><strong>第二次挥手</strong> ：B 回答“我知道了”，但是 B 可能还会有要说的话，A 不能要求 B 跟着自己的节奏结束通话</li>\n<li><strong>第三次挥手</strong> ：于是 B 可能又巴拉巴拉说了一通，最后 B 说“我说完了”</li>\n<li><strong>第四次挥手</strong> ：A 回答“知道了”，这样通话才算结束。</li>\n</ul>\n<h4 id=\"为什么不能把服务器发送的-ACK-和-FIN-合并起来，变成三次挥手？\"><a href=\"#为什么不能把服务器发送的-ACK-和-FIN-合并起来，变成三次挥手？\" class=\"headerlink\" title=\"为什么不能把服务器发送的 ACK 和 FIN 合并起来，变成三次挥手？\"></a>为什么不能把服务器发送的 ACK 和 FIN 合并起来，变成三次挥手？</h4><p>因为服务器收到客户端断开连接的请求时，可能还有一些数据没有发完，这时先回复 ACK，表示接收到了断开连接的请求。等到数据发完之后再发 FIN，断开服务器到客户端的数据传送。</p>\n<h4 id=\"如果第二次挥手时服务器的-ACK-没有送达客户端，会怎样？\"><a href=\"#如果第二次挥手时服务器的-ACK-没有送达客户端，会怎样？\" class=\"headerlink\" title=\"如果第二次挥手时服务器的 ACK 没有送达客户端，会怎样？\"></a>如果第二次挥手时服务器的 ACK 没有送达客户端，会怎样？</h4><p>客户端没有收到 ACK 确认，会重新发送 FIN 请求。</p>\n<h4 id=\"为什么第四次挥手客户端需要等待-2-MSL（报文段最长寿命）时间后才进入-CLOSED-状态？\"><a href=\"#为什么第四次挥手客户端需要等待-2-MSL（报文段最长寿命）时间后才进入-CLOSED-状态？\" class=\"headerlink\" title=\"为什么第四次挥手客户端需要等待 2*MSL（报文段最长寿命）时间后才进入 CLOSED 状态？\"></a>为什么第四次挥手客户端需要等待 2*MSL（报文段最长寿命）时间后才进入 CLOSED 状态？</h4><p>第四次挥手时，客户端发送给服务器的 ACK 有可能丢失，如果服务端没有因为某些原因而没有收到 ACK 的话，服务端就会重发 FIN，如果客户端在 2*MSL 的时间内收到了 FIN，就会重新发送 ACK 并再次等待 2MSL，防止 Server 没有收到 ACK 而不断重发 FIN。</p>\n<blockquote>\n<p><strong>MSL(Maximum Segment Lifetime)</strong> : 一个片段在网络中最大的存活时间，2MSL 就是一个发送和一个回复所需的最大时间。如果直到 2MSL，Client 都没有再次收到 FIN，那么 Client 推断 ACK 已经被成功接收，则结束 TCP 连接。</p>\n</blockquote>\n<p><img src=\"../../../../img/2022/end.gif\" alt=\"end\"></p>\n","next":{"title":"关于2>&1 &的详细解释","path":"api/articles/resource-MicroService-other-关于2-1-的详细解释.json","image":"/img/header_img/MicroService/MicroService.PNG","num_read":1789,"num_like":628,"num_collection":299,"num_comments":143},"prev":{"title":"更优雅的发HTTP请求(RestTemplate)","path":"api/articles/resource-java-advanced-RestTemplate.json","image":"/img/header_img/java/RestTemplate.png","num_read":1590,"num_like":389,"num_collection":362,"num_comments":174},"categories":[{"name":"RPC远程调用","path":"api/categories/RPC远程调用.json","pathContent":"api/categories/RPC远程调用","description":"RPC（Remote Procedure Call）远程过程调用，简单的理解是一个节点请求另一个节点提供的服务","cover":"https://sunfy9.gitee.io/project/photo/project/rpc.jpg"}],"tags":[{"name":"TCP","path":"api/tags/TCP.json","pathContent":"api/tags/TCP","description":"[TCP]暂未设置说明","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"}]}