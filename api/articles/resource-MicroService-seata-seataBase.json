{"title":"分布式事务Seata使用及原理","num_read":370,"num_like":164,"num_collection":189,"num_comments":123,"slug":"resource-MicroService-seata-seataBase","date":"2021-08-28T16:00:00.000Z","img":"/img/header_img/MicroService/seata-install.png","format":"max","_id":"clhrbp2dz00cdo5lghe4h2yen","project":"MicroService","type":"hot","subtitle":"Seata 是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。","hot":"collection","site":{"data":{}},"updated":"2022-09-20T01:57:37.552Z","author":"Sunfy","comments":true,"path":"api/articles/resource-MicroService-seata-seataBase.json","webPath":"2021/08/29/resource-MicroService-seata-seataBase/","permalink":"https://sunfy9.gitee.io/2021/08/29/resource-MicroService-seata-seataBase/","excerpt":null,"covers":["../../../../img/seataBase/image-20210827141633355.png","../../../../img/seataBase/clipboard-16300452251964.png","../../../../img/seataBase/clipboard-16300452281265.png","../../../../img/seataBase/clipboard-16300452495016.png","../../../../img/seataBase/clipboard-16300452525887.png","../../../../img/seataBase/clipboard-16300452554708.png","../../../../img/seataBase/clipboard-163004532039715.png","../../../../img/seataBase/clipboard-163004531728214.png","../../../../img/seataBase/clipboard-163004531511613.png","../../../../img/seataBase/clipboard-163004531236812.png","../../../../img/seataBase/clipboard-163004530935811.png","../../../../img/seataBase/clipboard-163004530707410.png","../../../../img/seataBase/clipboard-16300453038429.png","../../../../img/seataBase/clipboard-16300521258072.png","../../../../img/seataBase/clipboard-163004532735316.png","../../../../img/seataBase/clipboard-163004537610817.png","../../../../img/seataBase/clipboard-163004538172618.png","../../../../img/seataBase/clipboard-163004538531519.png","../../../../img/seataBase/clipboard-163004544898220.png","../../../../img/seataBase/clipboard-16300452017182-163004559446021.png","../../../../img/seataBase/clipboard-16300452072473.png","../../../../img/seataBase/17825.jpeg","../../../../img/seataBase/clipboard-16300521028261.png","../../../../img/seataBase/clipboard-16300451877821.png"],"keywords":"sunfy, hexo-theme-snail","content":"<h1 id=\"Seata-是什么\"><a href=\"#Seata-是什么\" class=\"headerlink\" title=\"Seata 是什么\"></a>Seata 是什么</h1><p><img src=\"../../../../img/seataBase/image-20210827141633355.png\" alt=\"image-20210827141633355\"></p>\n<p><code>Seata</code> 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。<code>Seata</code> 将为用户提供了 <code>AT</code>、<code>TCC</code>、<code>SAGA</code> 和 <code>XA</code> 事务模式，为用户打造一站式的分布式解决方案。<code>AT</code>模式是阿里首推的模式，阿里云上有商用版本的<code>GTS（Global Transaction Service 全局事务服务）</code></p>\n<ul>\n<li>官网：<a href=\"https://seata.io/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">https://seata.io/zh-cn/index.html</a></li>\n<li>源码: <a href=\"https://github.com/seata/seata\" target=\"_blank\" rel=\"noopener\">https://github.com/seata/seata</a></li>\n<li>官方Demo: <a href=\"https://github.com/seata/seata-samples\" target=\"_blank\" rel=\"noopener\">https://github.com/seata/seata-samples</a></li>\n</ul>\n<h2 id=\"Seata的三大角色\"><a href=\"#Seata的三大角色\" class=\"headerlink\" title=\"Seata的三大角色\"></a><strong>Seata的三大角色</strong></h2><p>在 Seata 的架构中，一共有三个角色：<sunfy-line></p>\n<ul>\n<li><p><strong>TC (Transaction Coordinator) - 事务协调者：</strong>维护全局和分支事务的状态，驱动全局事务提交或回滚。</p>\n</li>\n<li><p><strong>TM (Transaction Manager) - 事务管理器：</strong>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p>\n</li>\n<li><p><strong>RM (Resource Manager) - 资源管理器：</strong>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p>\n</li>\n</ul>\n<p>其中，<strong>TC 为单独部署的 Server 服务端，TM 和 RM 为嵌入到应用中的 Client 客户端。</strong></p>\n<p>在 Seata 中，一个分布式事务的生命周期如下：</p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300452251964.png\" alt=\"img\"></p>\n<ul>\n<li><code>TM</code> 请求 <code>TC</code> 开启一个全局事务。<code>TC</code> 会生成一个 <code>XID</code> 作为该全局事务的编号。<code>XID</code>会在微服务的调用链路中传播，保证将多个微服务的子事务关联在一起。</li>\n<li><code>RM</code> 请求 <code>TC</code> 将本地事务注册为全局事务的分支事务，通过全局事务的 <code>XID</code> 进行关联。</li>\n<li><code>TM</code> 请求 <code>TC</code> 告诉 <code>XID</code> 对应的全局事务是进行提交还是回滚。</li>\n<li><code>TC</code> 驱动 <code>RM</code> 们将 <code>XID</code> 对应的自己的本地事务进行提交还是回滚。</li>\n</ul>\n<p><a href=\"[Seata 是什么](https://seata.io/zh-cn/docs/overview/what-is-seata.html\">seata三种模式</a>)</p>\n<h2 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a><strong>设计思路</strong></h2><p>AT模式的核心是对业务无侵入，是一种改进后的<strong><code>两阶段提交</code></strong>，其设计思路如图</p>\n<h3 id=\"第一阶段\"><a href=\"#第一阶段\" class=\"headerlink\" title=\"第一阶段\"></a><strong>第一阶段</strong></h3><p>业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。核心在于对业务sql进行解析，转换成undolog，并同时入库，这是怎么做的呢？先抛出一个概念DataSourceProxy代理数据源，通过名字大家大概也能基本猜到是什么个操作，后面做具体分析</p>\n<p>参考官方文档： <a href=\"https://seata.io/zh-cn/docs/dev/mode/at-mode.html\" target=\"_blank\" rel=\"noopener\">https://seata.io/zh-cn/docs/dev/mode/at-mode.html</a></p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300452281265.png\" alt=\"img\"></p>\n<h3 id=\"第二阶段\"><a href=\"#第二阶段\" class=\"headerlink\" title=\"第二阶段\"></a><strong>第二阶段</strong></h3><p>分布式事务操作成功，则TC通知RM异步删除undolog</p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300452495016.png\" alt=\"img\"></p>\n<p>分布式事务操作失败，TM向TC发送回滚请求，RM 收到协调器TC发来的回滚请求，通过 XID 和 Branch ID 找到相应的回滚日志记录，通过回滚记录生成反向的更新 SQL 并执行，以完成分支的回滚。</p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300452525887.png\" alt=\"img\"></p>\n<p><strong>整体执行流程</strong></p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300452554708.png\" alt=\"img\"></p>\n<h2 id=\"设计亮点\"><a href=\"#设计亮点\" class=\"headerlink\" title=\"设计亮点\"></a><strong>设计亮点</strong></h2><p>相比与其它分布式事务框架，Seata架构的亮点主要有几个:</p>\n<ul>\n<li>应用层基于SQL解析实现了自动补偿，从而最大程度的降低业务侵入性；</li>\n<li>将分布式事务中TC（事务协调者）独立部署，负责事务的注册、回滚；</li>\n<li>通过全局锁实现了写隔离与读隔离。</li>\n</ul>\n<h2 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a><strong>存在的问题</strong></h2><p><strong>性能损耗</strong></p>\n<p>一条Update的SQL，则需要全局事务xid获取（与TC通讯）、before image（解析SQL，查询一次数据库）、after image（查询一次数据库）、insert undo log（写一次数据库）、before commit（与TC通讯，判断锁冲突），这些操作都需要一次远程通讯RPC，而且是同步的。另外undo log写入时blob字段的插入性能也是不高的。每条写SQL都会增加这么多开销,粗略估计会增加5倍响应时间。</p>\n<p><strong>性价比</strong></p>\n<p>为了进行自动补偿，需要对所有交易生成前后镜像并持久化，可是在实际业务场景下，这个是成功率有多高，或者说分布式事务失败需要回滚的有多少比率？按照二八原则预估，为了20%的交易回滚，需要将80%的成功交易的响应时间增加5倍，这样的代价相比于让应用开发一个补偿交易是否是值得？</p>\n<p><strong>全局锁</strong></p>\n<p><strong>热点数据</strong></p>\n<p>相比XA，Seata 虽然在一阶段成功后会释放数据库锁，但一阶段在commit前全局锁的判定也拉长了对数据锁的占有时间，这个开销比XA的prepare低多少需要根据实际业务场景进行测试。全局锁的引入实现了隔离性，但带来的问题就是阻塞，降低并发性，尤其是热点数据，这个问题会更加严重。</p>\n<p><strong>回滚锁释放时间</strong></p>\n<p>Seata在回滚时，需要先删除各节点的undo log，然后才能释放TC内存中的锁，所以如果第二阶段是回滚，释放锁的时间会更长。</p>\n<p><strong>死锁问题</strong></p>\n<p>Seata的引入全局锁会额外增加死锁的风险，但如果出现死锁，会不断进行重试，最后靠等待全局锁超时，这种方式并不优雅，也延长了对数据库锁的占有时间。</p>\n<h1 id=\"Seata快速开始\"><a href=\"#Seata快速开始\" class=\"headerlink\" title=\"Seata快速开始\"></a><strong>Seata快速开始</strong></h1><h2 id=\"Seata-Server（TC）环境搭建\"><a href=\"#Seata-Server（TC）环境搭建\" class=\"headerlink\" title=\"Seata Server（TC）环境搭建\"></a><strong>Seata Server（TC）环境搭建</strong></h2><p><a href=\"https://seata.io/zh-cn/docs/ops/deploy-guide-beginner.html\" target=\"_blank\" rel=\"noopener\"><strong>https://seata.io/zh-cn/docs/ops/deploy-guide-beginner.html</strong></a></p>\n<p>Server端存储模式（store.mode）支持三种：</p>\n<ul>\n<li>file：单机模式，全局事务会话信息内存中读写并持久化本地文件root.data，性能较高</li>\n<li>db：高可用模式，全局事务会话信息通过db共享，相应性能差些</li>\n<li>redis：Seata-Server 1.3及以上版本支持,性能较高,存在事务信息丢失风险,请提前配置适合当前场景的redis持久化配置</li>\n</ul>\n<p>资源目录：<a href=\"https://github.com/seata/seata/tree/1.4.0/script\" target=\"_blank\" rel=\"noopener\">https://github.com/seata/seata/tree/1.4.0/script</a></p>\n<ul>\n<li>client</li>\n</ul>\n<p>存放client端sql脚本，参数配置</p>\n<ul>\n<li>config-center</li>\n</ul>\n<p>各个配置中心参数导入脚本，config.txt(包含server和client，原名nacos-config.txt)为通用参数文件</p>\n<ul>\n<li>server</li>\n</ul>\n<p>server端数据库脚本及各个容器配置</p>\n<p><strong>db存储模式+Nacos(注册&amp;配置中心)部署</strong></p>\n<p><strong>步骤一：下载安装包</strong></p>\n<p><a href=\"https://github.com/seata/seata/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/seata/seata/releases</a></p>\n<p><img src=\"../../../../img/seataBase/clipboard-163004532039715.png\" alt=\"img\"></p>\n<p><strong>步骤二：建表(仅db模式)</strong></p>\n<p>全局事务会话信息由3块内容构成，全局事务—&gt;分支事务—&gt;全局锁，对应表global_table、branch_table、lock_table</p>\n<p>创建数据库seata，执行sql脚本，文件在script/server/db/mysql.sql（seata源码）中</p>\n<p><img src=\"../../../../img/seataBase/clipboard-163004531728214.png\" alt=\"img\"></p>\n<p><strong>步骤三：修改store.mode</strong></p>\n<p>启动包: seata—&gt;conf—&gt;file.conf，修改store.mode=”db”</p>\n<p>源码: 根目录—&gt;seata-server—&gt;resources—&gt;file.conf，修改store.mode=”db”</p>\n<p><img src=\"../../../../img/seataBase/clipboard-163004531511613.png\" alt=\"img\"></p>\n<p><strong>步骤四：修改数据库连接</strong></p>\n<p>启动包: seata—&gt;conf—&gt;file.conf，修改store.db相关属性。</p>\n<p>源码: 根目录—&gt;seata-server—&gt;resources—&gt;file.conf，修改store.db相关属性。</p>\n<p><img src=\"../../../../img/seataBase/clipboard-163004531236812.png\" alt=\"img\"></p>\n<p>此时可以调到步骤七：直接启动Seata Server，注册中心和配置中心都是file</p>\n<p><strong>步骤五：配置Nacos注册中心</strong></p>\n<p>将Seata Server注册到Nacos，修改conf目录下的registry.conf配置</p>\n<p><img src=\"../../../../img/seataBase/clipboard-163004530935811.png\" alt=\"img\"></p>\n<p>然后启动注册中心Nacos Server</p>\n<p>#进入Nacos安装目录，linux单机启动 bin/startup.sh -m standalone # windows单机启动 bin/startup.bat</p>\n<p><strong>步骤六：配置Nacos配置中心</strong></p>\n<p><img src=\"../../../../img/seataBase/clipboard-163004530707410.png\" alt=\"img\"></p>\n<p>注意：如果配置了seata server使用nacos作为配置中心，则配置信息会从nacos读取，file.conf可以不用配置。 客户端配置registry.conf使用nacos时也要注意group要和seata server中的group一致，默认group是”DEFAULT_GROUP”</p>\n<p>获取/seata/script/config-center/config.txt，修改配置信息</p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300453038429.png\" alt=\"img\"></p>\n<p>配置事务分组， 要与客户端配置的事务分组一致</p>\n<p>（客户端properties配置：spring.cloud.alibaba.seata.tx‐service‐group=my_test_tx_group）</p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300521258072.png\" alt=\"img\"></p>\n<p>配置参数同步到Nacos</p>\n<p>shell: </p>\n<p>sh ${SEATAPATH}/script/config-center/nacos/nacos-config.sh -h localhost -p 8848 -g SEATA_GROUP -t 5a3c7d6c-f497-4d68-a71a-2e5e3340b3ca</p>\n<p>参数说明：</p>\n<p>-h: host，默认值 localhost</p>\n<p>-p: port，默认值 8848</p>\n<p>-g: 配置分组，默认值为 ‘SEATA_GROUP’</p>\n<p>-t: 租户信息，对应 Nacos 的命名空间ID字段, 默认值为空 ‘’</p>\n<p><img src=\"../../../../img/seataBase/clipboard-163004532735316.png\" alt=\"img\"></p>\n<p>精简配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">service.vgroupMapping.my_test_tx_group</span>=<span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"meta\">service.default.grouplist</span>=<span class=\"string\">127.0.0.1:8091</span></span><br><span class=\"line\"><span class=\"meta\">service.enableDegrade</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">service.disableGlobalTransaction</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">store.mode</span>=<span class=\"string\">db</span></span><br><span class=\"line\"><span class=\"meta\">store.db.datasource</span>=<span class=\"string\">druid</span></span><br><span class=\"line\"><span class=\"meta\">store.db.dbType</span>=<span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"meta\">store.db.driverClassName</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"meta\">store.db.url</span>=<span class=\"string\">jdbc:mysql://127.0.0.1:3306/seata?useUnicode=true</span></span><br><span class=\"line\"><span class=\"meta\">store.db.user</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">store.db.password</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">store.db.minConn</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"meta\">store.db.maxConn</span>=<span class=\"string\">30</span></span><br><span class=\"line\"><span class=\"meta\">store.db.globalTable</span>=<span class=\"string\">global_table</span></span><br><span class=\"line\"><span class=\"meta\">store.db.branchTable</span>=<span class=\"string\">branch_table</span></span><br><span class=\"line\"><span class=\"meta\">store.db.queryLimit</span>=<span class=\"string\">100</span></span><br><span class=\"line\"><span class=\"meta\">store.db.lockTable</span>=<span class=\"string\">lock_table</span></span><br><span class=\"line\"><span class=\"meta\">store.db.maxWait</span>=<span class=\"string\">5000</span></span><br></pre></td></tr></table></figure>\n<p><strong>步骤七：启动Seata Server</strong></p>\n<ul>\n<li>源码启动: 执行server模块下io.seata.server.Server.java的main方法</li>\n<li>命令启动: bin/seata-server.sh -h 127.0.0.1 -p 8091 -m db -n 1 -e test</li>\n</ul>\n<p><img src=\"../../../../img/seataBase/clipboard-163004537610817.png\" alt=\"img\"></p>\n<p>启动Seata Server</p>\n<p>bin/seata-server.sh</p>\n<p>启动成功，默认端口8091</p>\n<p><img src=\"../../../../img/seataBase/clipboard-163004538172618.png\" alt=\"img\"></p>\n<p>在注册中心中可以查看到seata-server注册成功</p>\n<p><img src=\"../../../../img/seataBase/clipboard-163004538531519.png\" alt=\"img\"></p>\n<h2 id=\"Seata-Client快速开始\"><a href=\"#Seata-Client快速开始\" class=\"headerlink\" title=\"Seata Client快速开始\"></a><strong>Seata Client快速开始</strong></h2><p><strong>编程式事务实现（GlobalTransaction API）</strong></p>\n<p>Demo：seata-samples/api</p>\n<p>客户端环境配置</p>\n<ol>\n<li>修改jdbc.properties配置</li>\n<li>registry.conf中指定registry.type=”file” , config.type=”file”</li>\n</ol>\n<p>基于GlobalTransaction API的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> SQLException, TransactionException, InterruptedException </span>&#123;</span><br><span class=\"line\">    String userId = <span class=\"string\">\"U100001\"</span>;</span><br><span class=\"line\">    String commodityCode = <span class=\"string\">\"C00321\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> commodityCount = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> money = <span class=\"number\">999</span>;</span><br><span class=\"line\">    AccountService accountService = <span class=\"keyword\">new</span> AccountServiceImpl();</span><br><span class=\"line\">    StorageService storageService = <span class=\"keyword\">new</span> StorageServiceImpl();</span><br><span class=\"line\">    OrderService orderService = <span class=\"keyword\">new</span> OrderServiceImpl();</span><br><span class=\"line\">    orderService.setAccountService(accountService);</span><br><span class=\"line\">    <span class=\"comment\">//reset data  重置数据</span></span><br><span class=\"line\">    accountService.reset(userId, String.valueOf(money));</span><br><span class=\"line\">    storageService.reset(commodityCode, String.valueOf(commodityCount));</span><br><span class=\"line\">    orderService.reset(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">//init seata; only once</span></span><br><span class=\"line\">    String applicationId = <span class=\"string\">\"api\"</span>;</span><br><span class=\"line\">    String txServiceGroup = <span class=\"string\">\"my_test_tx_group\"</span>;</span><br><span class=\"line\">    TMClient.init(applicationId, txServiceGroup);</span><br><span class=\"line\">    RMClient.init(applicationId, txServiceGroup);</span><br><span class=\"line\">    <span class=\"comment\">//trx  开启全局事务</span></span><br><span class=\"line\">    GlobalTransaction tx = GlobalTransactionContext.getCurrentOrCreate();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        tx.begin(<span class=\"number\">60000</span>, <span class=\"string\">\"testBiz\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"begin trx, xid is \"</span> + tx.getXid());</span><br><span class=\"line\">        <span class=\"comment\">//biz operate 3 dataSources</span></span><br><span class=\"line\">        <span class=\"comment\">//set &gt;=5 will be rollback(200*5&gt;999) else will be commit</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> opCount = <span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 扣减库存</span></span><br><span class=\"line\">        storageService.deduct(commodityCode, opCount);</span><br><span class=\"line\">        <span class=\"comment\">// 创建订单 ，扣款 money = opCount * 200</span></span><br><span class=\"line\">        orderService.create(userId, commodityCode, opCount);</span><br><span class=\"line\">        <span class=\"comment\">//check data if negative</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> needCommit = ((StorageServiceImpl)storageService).validNegativeCheck(<span class=\"string\">\"count\"</span>, commodityCode)</span><br><span class=\"line\">            &amp;&amp; ((AccountServiceImpl)accountService).validNegativeCheck(<span class=\"string\">\"money\"</span>, userId);</span><br><span class=\"line\">        <span class=\"comment\">//if data negative rollback else commit</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (needCommit) &#123;</span><br><span class=\"line\">            tx.commit();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"rollback trx, cause: data negative, xid is \"</span> + tx.getXid());</span><br><span class=\"line\">            tx.rollback();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception exx) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"rollback trx, cause: \"</span> + exx.getMessage() + <span class=\"string\">\" , xid is \"</span> + tx.getXid());</span><br><span class=\"line\">        tx.rollback();</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> exx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    TimeUnit.SECONDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"声明式事务实现（-GlobalTransactional）\"><a href=\"#声明式事务实现（-GlobalTransactional）\" class=\"headerlink\" title=\"声明式事务实现（@GlobalTransactional）\"></a><strong>声明式事务实现（@GlobalTransactional）</strong></h2><p>业务场景：</p>\n<p>用户下单，整个业务逻辑由三个服务构成：</p>\n<ul>\n<li>仓储服务：对给定的商品扣除库存数量。</li>\n<li>订单服务：根据采购需求创建订单。</li>\n<li>帐户服务：从用户帐户中扣除余额。</li>\n</ul>\n<p><img src=\"../../../../img/seataBase/clipboard-163004544898220.png\" alt=\"img\"></p>\n<p><strong>多数据源场景</strong></p>\n<ol>\n<li>启动seata server服务，指定registry.type=”file” , config.type=”file”</li>\n<li>客户端应用接入seata配置</li>\n</ol>\n<p>1）配置多数据源</p>\n<p>客户端支持多数据源，yml中添加多数据源jdbc配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Order</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.order.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/seata_order?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.order.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.order.password</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.order.driver-class-name</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"comment\"># Storage</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.storage.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/seata_storage?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.storage.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.storage.password</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.storage.driver-class-name</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"comment\"># Account</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.account.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/seata_account?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.account.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.account.password</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.account.driver-class-name</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n<p>2）配置多数据源代理，并支持动态切换数据源</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(<span class=\"string\">\"com.sunfy.mutiple.datasource.mapper\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataSourceProxyConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(<span class=\"string\">\"originOrder\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.datasource.order\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSourceMaster</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(<span class=\"string\">\"originStorage\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.datasource.storage\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSourceStorage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(<span class=\"string\">\"originAccount\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.datasource.account\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSourceAccount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"order\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceProxy <span class=\"title\">masterDataSourceProxy</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"originOrder\"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProxy(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"storage\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceProxy <span class=\"title\">storageDataSourceProxy</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"originStorage\"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProxy(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"account\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceProxy <span class=\"title\">payDataSourceProxy</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"originAccount\"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProxy(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(<span class=\"string\">\"dynamicDataSource\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dynamicDataSource</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"order\"</span>)</span> DataSource dataSourceOrder,</span></span><br><span class=\"line\"><span class=\"function\">                                        @<span class=\"title\">Qualifier</span><span class=\"params\">(<span class=\"string\">\"storage\"</span>)</span> DataSource dataSourceStorage,</span></span><br><span class=\"line\"><span class=\"function\">                                        @<span class=\"title\">Qualifier</span><span class=\"params\">(<span class=\"string\">\"account\"</span>)</span> DataSource dataSourcePay) </span>&#123;</span><br><span class=\"line\">        DynamicRoutingDataSource dynamicRoutingDataSource = <span class=\"keyword\">new</span> DynamicRoutingDataSource();</span><br><span class=\"line\">        <span class=\"comment\">// 数据源的集合</span></span><br><span class=\"line\">        Map&lt;Object, Object&gt; dataSourceMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\">        dataSourceMap.put(DataSourceKey.ORDER.name(), dataSourceOrder);</span><br><span class=\"line\">        dataSourceMap.put(DataSourceKey.STORAGE.name(), dataSourceStorage);</span><br><span class=\"line\">        dataSourceMap.put(DataSourceKey.ACCOUNT.name(), dataSourcePay);</span><br><span class=\"line\">        dynamicRoutingDataSource.setDefaultTargetDataSource(dataSourceOrder);</span><br><span class=\"line\">        dynamicRoutingDataSource.setTargetDataSources(dataSourceMap);</span><br><span class=\"line\">        DynamicDataSourceContextHolder.getDataSourceKeys().addAll(dataSourceMap.keySet());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dynamicRoutingDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"mybatis\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactoryBean <span class=\"title\">sqlSessionFactoryBean</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"dynamicDataSource\"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class=\"line\">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</span><br><span class=\"line\">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sqlSessionFactoryBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicRoutingDataSource</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">determineCurrentLookupKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"当前数据源 [&#123;&#125;]\"</span>, DynamicDataSourceContextHolder.getDataSourceKey());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DynamicDataSourceContextHolder.getDataSourceKey();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicDataSourceContextHolder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;String&gt; CONTEXT_HOLDER = ThreadLocal.withInitial(DataSourceKey.ORDER::name);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;Object&gt; dataSourceKeys = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setDataSourceKey</span><span class=\"params\">(DataSourceKey key)</span> </span>&#123;</span><br><span class=\"line\">        CONTEXT_HOLDER.set(key.name());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getDataSourceKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CONTEXT_HOLDER.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">clearDataSourceKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CONTEXT_HOLDER.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Object&gt; <span class=\"title\">getDataSourceKeys</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataSourceKeys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3）接入seata配置</p>\n<p> registry.conf中指定registry.type=”file” , config.type=”file” ,对应seata-server的registry.conf配置相同</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry &#123;</span><br><span class=\"line\">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br><span class=\"line\">  type = \"file\"</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    name = \"file.conf\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">config &#123;</span><br><span class=\"line\">  # file、nacos 、apollo、zk、consul、etcd3、springCloudConfig</span><br><span class=\"line\">  type = \"file\"</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    name = \"file.conf\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4）指定seata事务分组，用于获取seata server服务实例</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Seata事务分组  从file.conf获取service.vgroupMapping.my_test_tx_group的集群名称default，用于确定seata server的服务实例</span></span><br><span class=\"line\"><span class=\"meta\">spring.cloud.alibaba.seata.tx-service-group</span>=<span class=\"string\">my_test_tx_group</span></span><br></pre></td></tr></table></figure>\n<p>5）OrderServiceImpl作为发起者配置@GlobalTransactional注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"comment\">//@Transactional</span></span><br><span class=\"line\"><span class=\"meta\">@GlobalTransactional</span>(name=<span class=\"string\">\"createOrder\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Order <span class=\"title\">saveOrder</span><span class=\"params\">(OrderVo orderVo)</span></span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">\"=============用户下单=================\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//切换数据源</span></span><br><span class=\"line\">    DynamicDataSourceContextHolder.setDataSourceKey(DataSourceKey.ORDER);</span><br><span class=\"line\">    log.info(<span class=\"string\">\"当前 XID: &#123;&#125;\"</span>, RootContext.getXID());</span><br><span class=\"line\">    <span class=\"comment\">// 保存订单</span></span><br><span class=\"line\">    Order order = <span class=\"keyword\">new</span> Order();</span><br><span class=\"line\">    order.setUserId(orderVo.getUserId());</span><br><span class=\"line\">    order.setCommodityCode(orderVo.getCommodityCode());</span><br><span class=\"line\">    order.setCount(orderVo.getCount());</span><br><span class=\"line\">    order.setMoney(orderVo.getMoney());</span><br><span class=\"line\">    order.setStatus(OrderStatus.INIT.getValue());</span><br><span class=\"line\">    Integer saveOrderRecord = orderMapper.insert(order);</span><br><span class=\"line\">    log.info(<span class=\"string\">\"保存订单&#123;&#125;\"</span>, saveOrderRecord &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"成功\"</span> : <span class=\"string\">\"失败\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//扣减库存</span></span><br><span class=\"line\">    storageService.deduct(orderVo.getCommodityCode(),orderVo.getCount());</span><br><span class=\"line\">    <span class=\"comment\">//扣减余额</span></span><br><span class=\"line\">    accountService.debit(orderVo.getUserId(),orderVo.getMoney());</span><br><span class=\"line\">    log.info(<span class=\"string\">\"=============更新订单状态=================\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//切换数据源</span></span><br><span class=\"line\">    DynamicDataSourceContextHolder.setDataSourceKey(DataSourceKey.ORDER);</span><br><span class=\"line\">    <span class=\"comment\">//更新订单</span></span><br><span class=\"line\">    Integer updateOrderRecord = orderMapper.updateOrderStatus(order.getId(),OrderStatus.SUCCESS.getValue());</span><br><span class=\"line\">    log.info(<span class=\"string\">\"更新订单id:&#123;&#125; &#123;&#125;\"</span>, order.getId(), updateOrderRecord &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"成功\"</span> : <span class=\"string\">\"失败\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> order;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试成功场景</p>\n<p>调用 /order/createOrder 接口，将 money 设置为 10，此时余额为 20，可以下单成功</p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300452017182-163004559446021.png\" alt=\"img\"></p>\n<p>测试失败场景</p>\n<p>设置 money 为 100，此时余额不足，会下单失败，account-service会抛出异常，事务会回滚</p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300452072473.png\" alt=\"img\"></p>\n<h2 id=\"接入微服务应用\"><a href=\"#接入微服务应用\" class=\"headerlink\" title=\"接入微服务应用\"></a><strong>接入微服务应用</strong></h2><p>业务场景：</p>\n<p>用户下单，整个业务逻辑由三个微服务构成：</p>\n<ul>\n<li>仓储服务：对给定的商品扣除库存数量。</li>\n<li>订单服务：根据采购需求创建订单。</li>\n<li>帐户服务：从用户帐户中扣除余额。</li>\n</ul>\n<p><img src=\"../../../../img/seataBase/17825.jpeg\" alt=\"img\"></p>\n<p><strong>1）启动Seata server端，Seata server使用nacos作为配置中心和注册中心</strong></p>\n<p><strong>2）配置微服务整合seata</strong></p>\n<p><strong>第一步：添加pom依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- seata--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.seata<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>seata-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.seata<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>seata-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>第二步： 微服务对应数据库中添加undo_log表</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`undo_log`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  <span class=\"string\">`branch_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`xid`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">100</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`context`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`rollback_info`</span> longblob <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`log_status`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`log_created`</span> datetime <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`log_modified`</span> datetime <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">KEY</span> <span class=\"string\">`ux_undo_log`</span> (<span class=\"string\">`xid`</span>,<span class=\"string\">`branch_id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> AUTO_INCREMENT=<span class=\"number\">1</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>\n<p><strong>第三步：添加代理数据源配置，配置<code>DataSourceProxy</code></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Fox</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 需要用到分布式事务的微服务都需要使用seata DataSourceProxy代理自己的数据源</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(<span class=\"string\">\"com.sunfy.datasource.mapper\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MybatisConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从配置文件获取属性构造datasource，注意前缀，这里用的是druid，根据自己情况配置,</span></span><br><span class=\"line\"><span class=\"comment\">     * 原生datasource前缀取\"spring.datasource\"</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.datasource.druid\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">druidDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        DruidDataSource druidDataSource = <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造datasource代理对象，替换原来的datasource</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> druidDataSource</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(<span class=\"string\">\"dataSource\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceProxy <span class=\"title\">dataSourceProxy</span><span class=\"params\">(DataSource druidDataSource)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProxy(druidDataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"sqlSessionFactory\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">sqlSessionFactoryBean</span><span class=\"params\">(DataSourceProxy dataSourceProxy)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        SqlSessionFactoryBean factoryBean = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</span><br><span class=\"line\">        <span class=\"comment\">//设置代理数据源</span></span><br><span class=\"line\">        factoryBean.setDataSource(dataSourceProxy);</span><br><span class=\"line\">        ResourcePatternResolver resolver = <span class=\"keyword\">new</span> PathMatchingResourcePatternResolver();</span><br><span class=\"line\">        factoryBean.setMapperLocations(resolver.getResources(<span class=\"string\">\"classpath*:mybatis/**/*-mapper.xml\"</span>));</span><br><span class=\"line\">        org.apache.ibatis.session.Configuration configuration=<span class=\"keyword\">new</span> org.apache.ibatis.session.Configuration();</span><br><span class=\"line\">        <span class=\"comment\">//使用jdbc的getGeneratedKeys获取数据库自增主键值</span></span><br><span class=\"line\">        configuration.setUseGeneratedKeys(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//使用列别名替换列名</span></span><br><span class=\"line\">        configuration.setUseColumnLabel(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//自动使用驼峰命名属性映射字段，如userId ---&gt; user_id</span></span><br><span class=\"line\">        configuration.setMapUnderscoreToCamelCase(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        factoryBean.setConfiguration(configuration);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> factoryBean.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>第四步：启动类上剔除</strong><code>DataSourceAutoConfiguration</code>，用于解决数据源的循环依赖问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span>(scanBasePackages = <span class=\"string\">\"com.sunfy\"</span>,exclude = DataSourceAutoConfiguration<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">EnableFeignClients</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">OrderServiceApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(OrderServiceApplication<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">args</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>第五步：修改register.conf,配置nacos作为registry.type&amp;config.type，对应seata server也使用nacos</strong></p>\n<p>注意：需要指定group = “SEATA_GROUP”，因为Seata Server端指定了group = “SEATA_GROUP” ，必须保证一致</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry &#123;</span><br><span class=\"line\">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br><span class=\"line\">  type = \"nacos\"</span><br><span class=\"line\">  nacos &#123;</span><br><span class=\"line\">      serverAddr = \"localhost\"</span><br><span class=\"line\">      namespace = \"\"</span><br><span class=\"line\">      cluster = \"default\"</span><br><span class=\"line\">      group = \"SEATA_GROUP\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">config &#123;</span><br><span class=\"line\">  # file、nacos 、apollo、zk、consul、etcd3、springCloudConfig</span><br><span class=\"line\">  type = \"nacos\"</span><br><span class=\"line\">  nacos &#123;</span><br><span class=\"line\">    serverAddr = \"localhost\"</span><br><span class=\"line\">    namespace = \"\"</span><br><span class=\"line\">    group = \"SEATA_GROUP\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果出现这种问题：</p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300521028261.png\" alt=\"img\"></p>\n<p>一般大多数情况下都是因为配置不匹配导致的：</p>\n<p>1.检查现在使用的seata服务和项目maven中seata的版本是否一致</p>\n<p>2.检查tx-service-group，nacos.cluster，nacos.group参数是否和Seata Server中的配置一致</p>\n<p>跟踪源码：seata/discover包下实现了RegistryService#lookup，用来获取服务列表</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NacosRegistryServiceImpl#lookup</span><br><span class=\"line\">》String clusterName = getServiceGroup(key);  #获取seata server集群名称</span><br><span class=\"line\">》List&lt;Instance&gt; firstAllInstances = getNamingInstance().getAllInstances(getServiceName(), getServiceGroup(), clusters)</span><br></pre></td></tr></table></figure>\n<p><strong>第六步：修改application.yml配置</strong></p>\n<p>配置seata 服务事务分组，要与服务端nacos配置中心中service.vgroup_mapping的后缀对应  </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8020</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">order-service</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\">    <span class=\"attr\">alibaba:</span></span><br><span class=\"line\">      <span class=\"attr\">seata:</span></span><br><span class=\"line\">        <span class=\"attr\">tx-service-group:</span></span><br><span class=\"line\">          <span class=\"string\">my_test_tx_group</span> <span class=\"comment\"># seata 服务事务分组</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">    <span class=\"attr\">druid:</span></span><br><span class=\"line\">      <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/seata_order?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">initial-size:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"attr\">max-active:</span> <span class=\"number\">100</span></span><br><span class=\"line\">      <span class=\"attr\">min-idle:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"attr\">max-wait:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">      <span class=\"attr\">pool-prepared-statements:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">max-pool-prepared-statement-per-connection-size:</span> <span class=\"number\">20</span></span><br><span class=\"line\">      <span class=\"attr\">time-between-eviction-runs-millis:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">      <span class=\"attr\">min-evictable-idle-time-millis:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">      <span class=\"attr\">test-while-idle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">test-on-borrow:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">test-on-return:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">stat-view-servlet:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">url-pattern:</span> <span class=\"string\">/druid/*</span></span><br><span class=\"line\">      <span class=\"attr\">filter:</span></span><br><span class=\"line\">        <span class=\"attr\">stat:</span></span><br><span class=\"line\">          <span class=\"attr\">log-slow-sql:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">slow-sql-millis:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">          <span class=\"attr\">merge-sql:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">wall:</span></span><br><span class=\"line\">          <span class=\"attr\">config:</span></span><br><span class=\"line\">            <span class=\"attr\">multi-statement-allow:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><strong>第七步：微服务发起者（TM 方）需要添加@GlobalTransactional注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"comment\">//@Transactional</span></span><br><span class=\"line\"><span class=\"meta\">@GlobalTransactional</span>(name=<span class=\"string\">\"createOrder\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Order <span class=\"title\">saveOrder</span><span class=\"params\">(OrderVo orderVo)</span></span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">\"=============用户下单=================\"</span>);</span><br><span class=\"line\">    log.info(<span class=\"string\">\"当前 XID: &#123;&#125;\"</span>, RootContext.getXID());</span><br><span class=\"line\">    <span class=\"comment\">// 保存订单</span></span><br><span class=\"line\">    Order order = <span class=\"keyword\">new</span> Order();</span><br><span class=\"line\">    order.setUserId(orderVo.getUserId());</span><br><span class=\"line\">    order.setCommodityCode(orderVo.getCommodityCode());</span><br><span class=\"line\">    order.setCount(orderVo.getCount());</span><br><span class=\"line\">    order.setMoney(orderVo.getMoney());</span><br><span class=\"line\">    order.setStatus(OrderStatus.INIT.getValue());</span><br><span class=\"line\">    Integer saveOrderRecord = orderMapper.insert(order);</span><br><span class=\"line\">    log.info(<span class=\"string\">\"保存订单&#123;&#125;\"</span>, saveOrderRecord &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"成功\"</span> : <span class=\"string\">\"失败\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//扣减库存</span></span><br><span class=\"line\">    storageFeignService.deduct(orderVo.getCommodityCode(),orderVo.getCount());</span><br><span class=\"line\">    <span class=\"comment\">//扣减余额</span></span><br><span class=\"line\">    accountFeignService.debit(orderVo.getUserId(),orderVo.getMoney());</span><br><span class=\"line\">    <span class=\"comment\">//更新订单</span></span><br><span class=\"line\">    Integer updateOrderRecord = orderMapper.updateOrderStatus(order.getId(),OrderStatus.SUCCESS.getValue());</span><br><span class=\"line\">    log.info(<span class=\"string\">\"更新订单id:&#123;&#125; &#123;&#125;\"</span>, order.getId(), updateOrderRecord &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"成功\"</span> : <span class=\"string\">\"失败\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> order;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>测试</strong></p>\n<p>分布式事务成功，模拟正常下单、扣库存，扣余额</p>\n<p>分布式事务失败，模拟下单扣库存成功、扣余额失败，事务是否回滚</p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300451877821.png\" alt=\"img\"></p>\n","more":"<h1 id=\"Seata-是什么\"><a href=\"#Seata-是什么\" class=\"headerlink\" title=\"Seata 是什么\"></a>Seata 是什么</h1><p><img src=\"../../../../img/seataBase/image-20210827141633355.png\" alt=\"image-20210827141633355\"></p>\n<p><code>Seata</code> 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。<code>Seata</code> 将为用户提供了 <code>AT</code>、<code>TCC</code>、<code>SAGA</code> 和 <code>XA</code> 事务模式，为用户打造一站式的分布式解决方案。<code>AT</code>模式是阿里首推的模式，阿里云上有商用版本的<code>GTS（Global Transaction Service 全局事务服务）</code></p>\n<ul>\n<li>官网：<a href=\"https://seata.io/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">https://seata.io/zh-cn/index.html</a></li>\n<li>源码: <a href=\"https://github.com/seata/seata\" target=\"_blank\" rel=\"noopener\">https://github.com/seata/seata</a></li>\n<li>官方Demo: <a href=\"https://github.com/seata/seata-samples\" target=\"_blank\" rel=\"noopener\">https://github.com/seata/seata-samples</a></li>\n</ul>\n<h2 id=\"Seata的三大角色\"><a href=\"#Seata的三大角色\" class=\"headerlink\" title=\"Seata的三大角色\"></a><strong>Seata的三大角色</strong></h2><p>在 Seata 的架构中，一共有三个角色：<sunfy-line></p>\n<ul>\n<li><p><strong>TC (Transaction Coordinator) - 事务协调者：</strong>维护全局和分支事务的状态，驱动全局事务提交或回滚。</p>\n</li>\n<li><p><strong>TM (Transaction Manager) - 事务管理器：</strong>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p>\n</li>\n<li><p><strong>RM (Resource Manager) - 资源管理器：</strong>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p>\n</li>\n</ul>\n<p>其中，<strong>TC 为单独部署的 Server 服务端，TM 和 RM 为嵌入到应用中的 Client 客户端。</strong></p>\n<p>在 Seata 中，一个分布式事务的生命周期如下：</p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300452251964.png\" alt=\"img\"></p>\n<ul>\n<li><code>TM</code> 请求 <code>TC</code> 开启一个全局事务。<code>TC</code> 会生成一个 <code>XID</code> 作为该全局事务的编号。<code>XID</code>会在微服务的调用链路中传播，保证将多个微服务的子事务关联在一起。</li>\n<li><code>RM</code> 请求 <code>TC</code> 将本地事务注册为全局事务的分支事务，通过全局事务的 <code>XID</code> 进行关联。</li>\n<li><code>TM</code> 请求 <code>TC</code> 告诉 <code>XID</code> 对应的全局事务是进行提交还是回滚。</li>\n<li><code>TC</code> 驱动 <code>RM</code> 们将 <code>XID</code> 对应的自己的本地事务进行提交还是回滚。</li>\n</ul>\n<p><a href=\"[Seata 是什么](https://seata.io/zh-cn/docs/overview/what-is-seata.html\">seata三种模式</a>)</p>\n<h2 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a><strong>设计思路</strong></h2><p>AT模式的核心是对业务无侵入，是一种改进后的<strong><code>两阶段提交</code></strong>，其设计思路如图</p>\n<h3 id=\"第一阶段\"><a href=\"#第一阶段\" class=\"headerlink\" title=\"第一阶段\"></a><strong>第一阶段</strong></h3><p>业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。核心在于对业务sql进行解析，转换成undolog，并同时入库，这是怎么做的呢？先抛出一个概念DataSourceProxy代理数据源，通过名字大家大概也能基本猜到是什么个操作，后面做具体分析</p>\n<p>参考官方文档： <a href=\"https://seata.io/zh-cn/docs/dev/mode/at-mode.html\" target=\"_blank\" rel=\"noopener\">https://seata.io/zh-cn/docs/dev/mode/at-mode.html</a></p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300452281265.png\" alt=\"img\"></p>\n<h3 id=\"第二阶段\"><a href=\"#第二阶段\" class=\"headerlink\" title=\"第二阶段\"></a><strong>第二阶段</strong></h3><p>分布式事务操作成功，则TC通知RM异步删除undolog</p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300452495016.png\" alt=\"img\"></p>\n<p>分布式事务操作失败，TM向TC发送回滚请求，RM 收到协调器TC发来的回滚请求，通过 XID 和 Branch ID 找到相应的回滚日志记录，通过回滚记录生成反向的更新 SQL 并执行，以完成分支的回滚。</p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300452525887.png\" alt=\"img\"></p>\n<p><strong>整体执行流程</strong></p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300452554708.png\" alt=\"img\"></p>\n<h2 id=\"设计亮点\"><a href=\"#设计亮点\" class=\"headerlink\" title=\"设计亮点\"></a><strong>设计亮点</strong></h2><p>相比与其它分布式事务框架，Seata架构的亮点主要有几个:</p>\n<ul>\n<li>应用层基于SQL解析实现了自动补偿，从而最大程度的降低业务侵入性；</li>\n<li>将分布式事务中TC（事务协调者）独立部署，负责事务的注册、回滚；</li>\n<li>通过全局锁实现了写隔离与读隔离。</li>\n</ul>\n<h2 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a><strong>存在的问题</strong></h2><p><strong>性能损耗</strong></p>\n<p>一条Update的SQL，则需要全局事务xid获取（与TC通讯）、before image（解析SQL，查询一次数据库）、after image（查询一次数据库）、insert undo log（写一次数据库）、before commit（与TC通讯，判断锁冲突），这些操作都需要一次远程通讯RPC，而且是同步的。另外undo log写入时blob字段的插入性能也是不高的。每条写SQL都会增加这么多开销,粗略估计会增加5倍响应时间。</p>\n<p><strong>性价比</strong></p>\n<p>为了进行自动补偿，需要对所有交易生成前后镜像并持久化，可是在实际业务场景下，这个是成功率有多高，或者说分布式事务失败需要回滚的有多少比率？按照二八原则预估，为了20%的交易回滚，需要将80%的成功交易的响应时间增加5倍，这样的代价相比于让应用开发一个补偿交易是否是值得？</p>\n<p><strong>全局锁</strong></p>\n<p><strong>热点数据</strong></p>\n<p>相比XA，Seata 虽然在一阶段成功后会释放数据库锁，但一阶段在commit前全局锁的判定也拉长了对数据锁的占有时间，这个开销比XA的prepare低多少需要根据实际业务场景进行测试。全局锁的引入实现了隔离性，但带来的问题就是阻塞，降低并发性，尤其是热点数据，这个问题会更加严重。</p>\n<p><strong>回滚锁释放时间</strong></p>\n<p>Seata在回滚时，需要先删除各节点的undo log，然后才能释放TC内存中的锁，所以如果第二阶段是回滚，释放锁的时间会更长。</p>\n<p><strong>死锁问题</strong></p>\n<p>Seata的引入全局锁会额外增加死锁的风险，但如果出现死锁，会不断进行重试，最后靠等待全局锁超时，这种方式并不优雅，也延长了对数据库锁的占有时间。</p>\n<h1 id=\"Seata快速开始\"><a href=\"#Seata快速开始\" class=\"headerlink\" title=\"Seata快速开始\"></a><strong>Seata快速开始</strong></h1><h2 id=\"Seata-Server（TC）环境搭建\"><a href=\"#Seata-Server（TC）环境搭建\" class=\"headerlink\" title=\"Seata Server（TC）环境搭建\"></a><strong>Seata Server（TC）环境搭建</strong></h2><p><a href=\"https://seata.io/zh-cn/docs/ops/deploy-guide-beginner.html\" target=\"_blank\" rel=\"noopener\"><strong>https://seata.io/zh-cn/docs/ops/deploy-guide-beginner.html</strong></a></p>\n<p>Server端存储模式（store.mode）支持三种：</p>\n<ul>\n<li>file：单机模式，全局事务会话信息内存中读写并持久化本地文件root.data，性能较高</li>\n<li>db：高可用模式，全局事务会话信息通过db共享，相应性能差些</li>\n<li>redis：Seata-Server 1.3及以上版本支持,性能较高,存在事务信息丢失风险,请提前配置适合当前场景的redis持久化配置</li>\n</ul>\n<p>资源目录：<a href=\"https://github.com/seata/seata/tree/1.4.0/script\" target=\"_blank\" rel=\"noopener\">https://github.com/seata/seata/tree/1.4.0/script</a></p>\n<ul>\n<li>client</li>\n</ul>\n<p>存放client端sql脚本，参数配置</p>\n<ul>\n<li>config-center</li>\n</ul>\n<p>各个配置中心参数导入脚本，config.txt(包含server和client，原名nacos-config.txt)为通用参数文件</p>\n<ul>\n<li>server</li>\n</ul>\n<p>server端数据库脚本及各个容器配置</p>\n<p><strong>db存储模式+Nacos(注册&amp;配置中心)部署</strong></p>\n<p><strong>步骤一：下载安装包</strong></p>\n<p><a href=\"https://github.com/seata/seata/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/seata/seata/releases</a></p>\n<p><img src=\"../../../../img/seataBase/clipboard-163004532039715.png\" alt=\"img\"></p>\n<p><strong>步骤二：建表(仅db模式)</strong></p>\n<p>全局事务会话信息由3块内容构成，全局事务—&gt;分支事务—&gt;全局锁，对应表global_table、branch_table、lock_table</p>\n<p>创建数据库seata，执行sql脚本，文件在script/server/db/mysql.sql（seata源码）中</p>\n<p><img src=\"../../../../img/seataBase/clipboard-163004531728214.png\" alt=\"img\"></p>\n<p><strong>步骤三：修改store.mode</strong></p>\n<p>启动包: seata—&gt;conf—&gt;file.conf，修改store.mode=”db”</p>\n<p>源码: 根目录—&gt;seata-server—&gt;resources—&gt;file.conf，修改store.mode=”db”</p>\n<p><img src=\"../../../../img/seataBase/clipboard-163004531511613.png\" alt=\"img\"></p>\n<p><strong>步骤四：修改数据库连接</strong></p>\n<p>启动包: seata—&gt;conf—&gt;file.conf，修改store.db相关属性。</p>\n<p>源码: 根目录—&gt;seata-server—&gt;resources—&gt;file.conf，修改store.db相关属性。</p>\n<p><img src=\"../../../../img/seataBase/clipboard-163004531236812.png\" alt=\"img\"></p>\n<p>此时可以调到步骤七：直接启动Seata Server，注册中心和配置中心都是file</p>\n<p><strong>步骤五：配置Nacos注册中心</strong></p>\n<p>将Seata Server注册到Nacos，修改conf目录下的registry.conf配置</p>\n<p><img src=\"../../../../img/seataBase/clipboard-163004530935811.png\" alt=\"img\"></p>\n<p>然后启动注册中心Nacos Server</p>\n<p>#进入Nacos安装目录，linux单机启动 bin/startup.sh -m standalone # windows单机启动 bin/startup.bat</p>\n<p><strong>步骤六：配置Nacos配置中心</strong></p>\n<p><img src=\"../../../../img/seataBase/clipboard-163004530707410.png\" alt=\"img\"></p>\n<p>注意：如果配置了seata server使用nacos作为配置中心，则配置信息会从nacos读取，file.conf可以不用配置。 客户端配置registry.conf使用nacos时也要注意group要和seata server中的group一致，默认group是”DEFAULT_GROUP”</p>\n<p>获取/seata/script/config-center/config.txt，修改配置信息</p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300453038429.png\" alt=\"img\"></p>\n<p>配置事务分组， 要与客户端配置的事务分组一致</p>\n<p>（客户端properties配置：spring.cloud.alibaba.seata.tx‐service‐group=my_test_tx_group）</p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300521258072.png\" alt=\"img\"></p>\n<p>配置参数同步到Nacos</p>\n<p>shell: </p>\n<p>sh ${SEATAPATH}/script/config-center/nacos/nacos-config.sh -h localhost -p 8848 -g SEATA_GROUP -t 5a3c7d6c-f497-4d68-a71a-2e5e3340b3ca</p>\n<p>参数说明：</p>\n<p>-h: host，默认值 localhost</p>\n<p>-p: port，默认值 8848</p>\n<p>-g: 配置分组，默认值为 ‘SEATA_GROUP’</p>\n<p>-t: 租户信息，对应 Nacos 的命名空间ID字段, 默认值为空 ‘’</p>\n<p><img src=\"../../../../img/seataBase/clipboard-163004532735316.png\" alt=\"img\"></p>\n<p>精简配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">service.vgroupMapping.my_test_tx_group</span>=<span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"meta\">service.default.grouplist</span>=<span class=\"string\">127.0.0.1:8091</span></span><br><span class=\"line\"><span class=\"meta\">service.enableDegrade</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">service.disableGlobalTransaction</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"meta\">store.mode</span>=<span class=\"string\">db</span></span><br><span class=\"line\"><span class=\"meta\">store.db.datasource</span>=<span class=\"string\">druid</span></span><br><span class=\"line\"><span class=\"meta\">store.db.dbType</span>=<span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"meta\">store.db.driverClassName</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"meta\">store.db.url</span>=<span class=\"string\">jdbc:mysql://127.0.0.1:3306/seata?useUnicode=true</span></span><br><span class=\"line\"><span class=\"meta\">store.db.user</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">store.db.password</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">store.db.minConn</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"meta\">store.db.maxConn</span>=<span class=\"string\">30</span></span><br><span class=\"line\"><span class=\"meta\">store.db.globalTable</span>=<span class=\"string\">global_table</span></span><br><span class=\"line\"><span class=\"meta\">store.db.branchTable</span>=<span class=\"string\">branch_table</span></span><br><span class=\"line\"><span class=\"meta\">store.db.queryLimit</span>=<span class=\"string\">100</span></span><br><span class=\"line\"><span class=\"meta\">store.db.lockTable</span>=<span class=\"string\">lock_table</span></span><br><span class=\"line\"><span class=\"meta\">store.db.maxWait</span>=<span class=\"string\">5000</span></span><br></pre></td></tr></table></figure>\n<p><strong>步骤七：启动Seata Server</strong></p>\n<ul>\n<li>源码启动: 执行server模块下io.seata.server.Server.java的main方法</li>\n<li>命令启动: bin/seata-server.sh -h 127.0.0.1 -p 8091 -m db -n 1 -e test</li>\n</ul>\n<p><img src=\"../../../../img/seataBase/clipboard-163004537610817.png\" alt=\"img\"></p>\n<p>启动Seata Server</p>\n<p>bin/seata-server.sh</p>\n<p>启动成功，默认端口8091</p>\n<p><img src=\"../../../../img/seataBase/clipboard-163004538172618.png\" alt=\"img\"></p>\n<p>在注册中心中可以查看到seata-server注册成功</p>\n<p><img src=\"../../../../img/seataBase/clipboard-163004538531519.png\" alt=\"img\"></p>\n<h2 id=\"Seata-Client快速开始\"><a href=\"#Seata-Client快速开始\" class=\"headerlink\" title=\"Seata Client快速开始\"></a><strong>Seata Client快速开始</strong></h2><p><strong>编程式事务实现（GlobalTransaction API）</strong></p>\n<p>Demo：seata-samples/api</p>\n<p>客户端环境配置</p>\n<ol>\n<li>修改jdbc.properties配置</li>\n<li>registry.conf中指定registry.type=”file” , config.type=”file”</li>\n</ol>\n<p>基于GlobalTransaction API的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> SQLException, TransactionException, InterruptedException </span>&#123;</span><br><span class=\"line\">    String userId = <span class=\"string\">\"U100001\"</span>;</span><br><span class=\"line\">    String commodityCode = <span class=\"string\">\"C00321\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> commodityCount = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> money = <span class=\"number\">999</span>;</span><br><span class=\"line\">    AccountService accountService = <span class=\"keyword\">new</span> AccountServiceImpl();</span><br><span class=\"line\">    StorageService storageService = <span class=\"keyword\">new</span> StorageServiceImpl();</span><br><span class=\"line\">    OrderService orderService = <span class=\"keyword\">new</span> OrderServiceImpl();</span><br><span class=\"line\">    orderService.setAccountService(accountService);</span><br><span class=\"line\">    <span class=\"comment\">//reset data  重置数据</span></span><br><span class=\"line\">    accountService.reset(userId, String.valueOf(money));</span><br><span class=\"line\">    storageService.reset(commodityCode, String.valueOf(commodityCount));</span><br><span class=\"line\">    orderService.reset(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">//init seata; only once</span></span><br><span class=\"line\">    String applicationId = <span class=\"string\">\"api\"</span>;</span><br><span class=\"line\">    String txServiceGroup = <span class=\"string\">\"my_test_tx_group\"</span>;</span><br><span class=\"line\">    TMClient.init(applicationId, txServiceGroup);</span><br><span class=\"line\">    RMClient.init(applicationId, txServiceGroup);</span><br><span class=\"line\">    <span class=\"comment\">//trx  开启全局事务</span></span><br><span class=\"line\">    GlobalTransaction tx = GlobalTransactionContext.getCurrentOrCreate();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        tx.begin(<span class=\"number\">60000</span>, <span class=\"string\">\"testBiz\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"begin trx, xid is \"</span> + tx.getXid());</span><br><span class=\"line\">        <span class=\"comment\">//biz operate 3 dataSources</span></span><br><span class=\"line\">        <span class=\"comment\">//set &gt;=5 will be rollback(200*5&gt;999) else will be commit</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> opCount = <span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 扣减库存</span></span><br><span class=\"line\">        storageService.deduct(commodityCode, opCount);</span><br><span class=\"line\">        <span class=\"comment\">// 创建订单 ，扣款 money = opCount * 200</span></span><br><span class=\"line\">        orderService.create(userId, commodityCode, opCount);</span><br><span class=\"line\">        <span class=\"comment\">//check data if negative</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> needCommit = ((StorageServiceImpl)storageService).validNegativeCheck(<span class=\"string\">\"count\"</span>, commodityCode)</span><br><span class=\"line\">            &amp;&amp; ((AccountServiceImpl)accountService).validNegativeCheck(<span class=\"string\">\"money\"</span>, userId);</span><br><span class=\"line\">        <span class=\"comment\">//if data negative rollback else commit</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (needCommit) &#123;</span><br><span class=\"line\">            tx.commit();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"rollback trx, cause: data negative, xid is \"</span> + tx.getXid());</span><br><span class=\"line\">            tx.rollback();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception exx) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"rollback trx, cause: \"</span> + exx.getMessage() + <span class=\"string\">\" , xid is \"</span> + tx.getXid());</span><br><span class=\"line\">        tx.rollback();</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> exx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    TimeUnit.SECONDS.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"声明式事务实现（-GlobalTransactional）\"><a href=\"#声明式事务实现（-GlobalTransactional）\" class=\"headerlink\" title=\"声明式事务实现（@GlobalTransactional）\"></a><strong>声明式事务实现（@GlobalTransactional）</strong></h2><p>业务场景：</p>\n<p>用户下单，整个业务逻辑由三个服务构成：</p>\n<ul>\n<li>仓储服务：对给定的商品扣除库存数量。</li>\n<li>订单服务：根据采购需求创建订单。</li>\n<li>帐户服务：从用户帐户中扣除余额。</li>\n</ul>\n<p><img src=\"../../../../img/seataBase/clipboard-163004544898220.png\" alt=\"img\"></p>\n<p><strong>多数据源场景</strong></p>\n<ol>\n<li>启动seata server服务，指定registry.type=”file” , config.type=”file”</li>\n<li>客户端应用接入seata配置</li>\n</ol>\n<p>1）配置多数据源</p>\n<p>客户端支持多数据源，yml中添加多数据源jdbc配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Order</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.order.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/seata_order?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.order.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.order.password</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.order.driver-class-name</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"comment\"># Storage</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.storage.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/seata_storage?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.storage.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.storage.password</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.storage.driver-class-name</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"comment\"># Account</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.account.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/seata_account?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.account.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.account.password</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.account.driver-class-name</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n<p>2）配置多数据源代理，并支持动态切换数据源</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(<span class=\"string\">\"com.sunfy.mutiple.datasource.mapper\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataSourceProxyConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(<span class=\"string\">\"originOrder\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.datasource.order\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSourceMaster</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(<span class=\"string\">\"originStorage\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.datasource.storage\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSourceStorage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(<span class=\"string\">\"originAccount\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.datasource.account\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dataSourceAccount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"order\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceProxy <span class=\"title\">masterDataSourceProxy</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"originOrder\"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProxy(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"storage\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceProxy <span class=\"title\">storageDataSourceProxy</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"originStorage\"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProxy(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"account\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceProxy <span class=\"title\">payDataSourceProxy</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"originAccount\"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProxy(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(<span class=\"string\">\"dynamicDataSource\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">dynamicDataSource</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"order\"</span>)</span> DataSource dataSourceOrder,</span></span><br><span class=\"line\"><span class=\"function\">                                        @<span class=\"title\">Qualifier</span><span class=\"params\">(<span class=\"string\">\"storage\"</span>)</span> DataSource dataSourceStorage,</span></span><br><span class=\"line\"><span class=\"function\">                                        @<span class=\"title\">Qualifier</span><span class=\"params\">(<span class=\"string\">\"account\"</span>)</span> DataSource dataSourcePay) </span>&#123;</span><br><span class=\"line\">        DynamicRoutingDataSource dynamicRoutingDataSource = <span class=\"keyword\">new</span> DynamicRoutingDataSource();</span><br><span class=\"line\">        <span class=\"comment\">// 数据源的集合</span></span><br><span class=\"line\">        Map&lt;Object, Object&gt; dataSourceMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\">        dataSourceMap.put(DataSourceKey.ORDER.name(), dataSourceOrder);</span><br><span class=\"line\">        dataSourceMap.put(DataSourceKey.STORAGE.name(), dataSourceStorage);</span><br><span class=\"line\">        dataSourceMap.put(DataSourceKey.ACCOUNT.name(), dataSourcePay);</span><br><span class=\"line\">        dynamicRoutingDataSource.setDefaultTargetDataSource(dataSourceOrder);</span><br><span class=\"line\">        dynamicRoutingDataSource.setTargetDataSources(dataSourceMap);</span><br><span class=\"line\">        DynamicDataSourceContextHolder.getDataSourceKeys().addAll(dataSourceMap.keySet());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dynamicRoutingDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"mybatis\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactoryBean <span class=\"title\">sqlSessionFactoryBean</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"dynamicDataSource\"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class=\"line\">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</span><br><span class=\"line\">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sqlSessionFactoryBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicRoutingDataSource</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">determineCurrentLookupKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"当前数据源 [&#123;&#125;]\"</span>, DynamicDataSourceContextHolder.getDataSourceKey());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DynamicDataSourceContextHolder.getDataSourceKey();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicDataSourceContextHolder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;String&gt; CONTEXT_HOLDER = ThreadLocal.withInitial(DataSourceKey.ORDER::name);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;Object&gt; dataSourceKeys = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setDataSourceKey</span><span class=\"params\">(DataSourceKey key)</span> </span>&#123;</span><br><span class=\"line\">        CONTEXT_HOLDER.set(key.name());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getDataSourceKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CONTEXT_HOLDER.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">clearDataSourceKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CONTEXT_HOLDER.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Object&gt; <span class=\"title\">getDataSourceKeys</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataSourceKeys;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3）接入seata配置</p>\n<p> registry.conf中指定registry.type=”file” , config.type=”file” ,对应seata-server的registry.conf配置相同</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry &#123;</span><br><span class=\"line\">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br><span class=\"line\">  type = \"file\"</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    name = \"file.conf\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">config &#123;</span><br><span class=\"line\">  # file、nacos 、apollo、zk、consul、etcd3、springCloudConfig</span><br><span class=\"line\">  type = \"file\"</span><br><span class=\"line\">  file &#123;</span><br><span class=\"line\">    name = \"file.conf\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4）指定seata事务分组，用于获取seata server服务实例</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Seata事务分组  从file.conf获取service.vgroupMapping.my_test_tx_group的集群名称default，用于确定seata server的服务实例</span></span><br><span class=\"line\"><span class=\"meta\">spring.cloud.alibaba.seata.tx-service-group</span>=<span class=\"string\">my_test_tx_group</span></span><br></pre></td></tr></table></figure>\n<p>5）OrderServiceImpl作为发起者配置@GlobalTransactional注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"comment\">//@Transactional</span></span><br><span class=\"line\"><span class=\"meta\">@GlobalTransactional</span>(name=<span class=\"string\">\"createOrder\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Order <span class=\"title\">saveOrder</span><span class=\"params\">(OrderVo orderVo)</span></span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">\"=============用户下单=================\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//切换数据源</span></span><br><span class=\"line\">    DynamicDataSourceContextHolder.setDataSourceKey(DataSourceKey.ORDER);</span><br><span class=\"line\">    log.info(<span class=\"string\">\"当前 XID: &#123;&#125;\"</span>, RootContext.getXID());</span><br><span class=\"line\">    <span class=\"comment\">// 保存订单</span></span><br><span class=\"line\">    Order order = <span class=\"keyword\">new</span> Order();</span><br><span class=\"line\">    order.setUserId(orderVo.getUserId());</span><br><span class=\"line\">    order.setCommodityCode(orderVo.getCommodityCode());</span><br><span class=\"line\">    order.setCount(orderVo.getCount());</span><br><span class=\"line\">    order.setMoney(orderVo.getMoney());</span><br><span class=\"line\">    order.setStatus(OrderStatus.INIT.getValue());</span><br><span class=\"line\">    Integer saveOrderRecord = orderMapper.insert(order);</span><br><span class=\"line\">    log.info(<span class=\"string\">\"保存订单&#123;&#125;\"</span>, saveOrderRecord &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"成功\"</span> : <span class=\"string\">\"失败\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//扣减库存</span></span><br><span class=\"line\">    storageService.deduct(orderVo.getCommodityCode(),orderVo.getCount());</span><br><span class=\"line\">    <span class=\"comment\">//扣减余额</span></span><br><span class=\"line\">    accountService.debit(orderVo.getUserId(),orderVo.getMoney());</span><br><span class=\"line\">    log.info(<span class=\"string\">\"=============更新订单状态=================\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//切换数据源</span></span><br><span class=\"line\">    DynamicDataSourceContextHolder.setDataSourceKey(DataSourceKey.ORDER);</span><br><span class=\"line\">    <span class=\"comment\">//更新订单</span></span><br><span class=\"line\">    Integer updateOrderRecord = orderMapper.updateOrderStatus(order.getId(),OrderStatus.SUCCESS.getValue());</span><br><span class=\"line\">    log.info(<span class=\"string\">\"更新订单id:&#123;&#125; &#123;&#125;\"</span>, order.getId(), updateOrderRecord &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"成功\"</span> : <span class=\"string\">\"失败\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> order;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试成功场景</p>\n<p>调用 /order/createOrder 接口，将 money 设置为 10，此时余额为 20，可以下单成功</p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300452017182-163004559446021.png\" alt=\"img\"></p>\n<p>测试失败场景</p>\n<p>设置 money 为 100，此时余额不足，会下单失败，account-service会抛出异常，事务会回滚</p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300452072473.png\" alt=\"img\"></p>\n<h2 id=\"接入微服务应用\"><a href=\"#接入微服务应用\" class=\"headerlink\" title=\"接入微服务应用\"></a><strong>接入微服务应用</strong></h2><p>业务场景：</p>\n<p>用户下单，整个业务逻辑由三个微服务构成：</p>\n<ul>\n<li>仓储服务：对给定的商品扣除库存数量。</li>\n<li>订单服务：根据采购需求创建订单。</li>\n<li>帐户服务：从用户帐户中扣除余额。</li>\n</ul>\n<p><img src=\"../../../../img/seataBase/17825.jpeg\" alt=\"img\"></p>\n<p><strong>1）启动Seata server端，Seata server使用nacos作为配置中心和注册中心</strong></p>\n<p><strong>2）配置微服务整合seata</strong></p>\n<p><strong>第一步：添加pom依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- seata--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.seata<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>seata-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.seata<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>seata-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>第二步： 微服务对应数据库中添加undo_log表</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`undo_log`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  <span class=\"string\">`branch_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`xid`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">100</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`context`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`rollback_info`</span> longblob <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`log_status`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`log_created`</span> datetime <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`log_modified`</span> datetime <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">KEY</span> <span class=\"string\">`ux_undo_log`</span> (<span class=\"string\">`xid`</span>,<span class=\"string\">`branch_id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> AUTO_INCREMENT=<span class=\"number\">1</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>\n<p><strong>第三步：添加代理数据源配置，配置<code>DataSourceProxy</code></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Fox</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 需要用到分布式事务的微服务都需要使用seata DataSourceProxy代理自己的数据源</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan</span>(<span class=\"string\">\"com.sunfy.datasource.mapper\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MybatisConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从配置文件获取属性构造datasource，注意前缀，这里用的是druid，根据自己情况配置,</span></span><br><span class=\"line\"><span class=\"comment\">     * 原生datasource前缀取\"spring.datasource\"</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.datasource.druid\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">druidDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        DruidDataSource druidDataSource = <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造datasource代理对象，替换原来的datasource</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> druidDataSource</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(<span class=\"string\">\"dataSource\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceProxy <span class=\"title\">dataSourceProxy</span><span class=\"params\">(DataSource druidDataSource)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProxy(druidDataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"sqlSessionFactory\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">sqlSessionFactoryBean</span><span class=\"params\">(DataSourceProxy dataSourceProxy)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        SqlSessionFactoryBean factoryBean = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</span><br><span class=\"line\">        <span class=\"comment\">//设置代理数据源</span></span><br><span class=\"line\">        factoryBean.setDataSource(dataSourceProxy);</span><br><span class=\"line\">        ResourcePatternResolver resolver = <span class=\"keyword\">new</span> PathMatchingResourcePatternResolver();</span><br><span class=\"line\">        factoryBean.setMapperLocations(resolver.getResources(<span class=\"string\">\"classpath*:mybatis/**/*-mapper.xml\"</span>));</span><br><span class=\"line\">        org.apache.ibatis.session.Configuration configuration=<span class=\"keyword\">new</span> org.apache.ibatis.session.Configuration();</span><br><span class=\"line\">        <span class=\"comment\">//使用jdbc的getGeneratedKeys获取数据库自增主键值</span></span><br><span class=\"line\">        configuration.setUseGeneratedKeys(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//使用列别名替换列名</span></span><br><span class=\"line\">        configuration.setUseColumnLabel(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//自动使用驼峰命名属性映射字段，如userId ---&gt; user_id</span></span><br><span class=\"line\">        configuration.setMapUnderscoreToCamelCase(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        factoryBean.setConfiguration(configuration);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> factoryBean.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>第四步：启动类上剔除</strong><code>DataSourceAutoConfiguration</code>，用于解决数据源的循环依赖问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span>(scanBasePackages = <span class=\"string\">\"com.sunfy\"</span>,exclude = DataSourceAutoConfiguration<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">EnableFeignClients</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">OrderServiceApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(OrderServiceApplication<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">args</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>第五步：修改register.conf,配置nacos作为registry.type&amp;config.type，对应seata server也使用nacos</strong></p>\n<p>注意：需要指定group = “SEATA_GROUP”，因为Seata Server端指定了group = “SEATA_GROUP” ，必须保证一致</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry &#123;</span><br><span class=\"line\">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br><span class=\"line\">  type = \"nacos\"</span><br><span class=\"line\">  nacos &#123;</span><br><span class=\"line\">      serverAddr = \"localhost\"</span><br><span class=\"line\">      namespace = \"\"</span><br><span class=\"line\">      cluster = \"default\"</span><br><span class=\"line\">      group = \"SEATA_GROUP\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">config &#123;</span><br><span class=\"line\">  # file、nacos 、apollo、zk、consul、etcd3、springCloudConfig</span><br><span class=\"line\">  type = \"nacos\"</span><br><span class=\"line\">  nacos &#123;</span><br><span class=\"line\">    serverAddr = \"localhost\"</span><br><span class=\"line\">    namespace = \"\"</span><br><span class=\"line\">    group = \"SEATA_GROUP\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果出现这种问题：</p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300521028261.png\" alt=\"img\"></p>\n<p>一般大多数情况下都是因为配置不匹配导致的：</p>\n<p>1.检查现在使用的seata服务和项目maven中seata的版本是否一致</p>\n<p>2.检查tx-service-group，nacos.cluster，nacos.group参数是否和Seata Server中的配置一致</p>\n<p>跟踪源码：seata/discover包下实现了RegistryService#lookup，用来获取服务列表</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NacosRegistryServiceImpl#lookup</span><br><span class=\"line\">》String clusterName = getServiceGroup(key);  #获取seata server集群名称</span><br><span class=\"line\">》List&lt;Instance&gt; firstAllInstances = getNamingInstance().getAllInstances(getServiceName(), getServiceGroup(), clusters)</span><br></pre></td></tr></table></figure>\n<p><strong>第六步：修改application.yml配置</strong></p>\n<p>配置seata 服务事务分组，要与服务端nacos配置中心中service.vgroup_mapping的后缀对应  </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8020</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">order-service</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\">    <span class=\"attr\">alibaba:</span></span><br><span class=\"line\">      <span class=\"attr\">seata:</span></span><br><span class=\"line\">        <span class=\"attr\">tx-service-group:</span></span><br><span class=\"line\">          <span class=\"string\">my_test_tx_group</span> <span class=\"comment\"># seata 服务事务分组</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">    <span class=\"attr\">druid:</span></span><br><span class=\"line\">      <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/seata_order?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">initial-size:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"attr\">max-active:</span> <span class=\"number\">100</span></span><br><span class=\"line\">      <span class=\"attr\">min-idle:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"attr\">max-wait:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">      <span class=\"attr\">pool-prepared-statements:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">max-pool-prepared-statement-per-connection-size:</span> <span class=\"number\">20</span></span><br><span class=\"line\">      <span class=\"attr\">time-between-eviction-runs-millis:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">      <span class=\"attr\">min-evictable-idle-time-millis:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">      <span class=\"attr\">test-while-idle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">test-on-borrow:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">test-on-return:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">stat-view-servlet:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">url-pattern:</span> <span class=\"string\">/druid/*</span></span><br><span class=\"line\">      <span class=\"attr\">filter:</span></span><br><span class=\"line\">        <span class=\"attr\">stat:</span></span><br><span class=\"line\">          <span class=\"attr\">log-slow-sql:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">slow-sql-millis:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">          <span class=\"attr\">merge-sql:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">wall:</span></span><br><span class=\"line\">          <span class=\"attr\">config:</span></span><br><span class=\"line\">            <span class=\"attr\">multi-statement-allow:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><strong>第七步：微服务发起者（TM 方）需要添加@GlobalTransactional注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"comment\">//@Transactional</span></span><br><span class=\"line\"><span class=\"meta\">@GlobalTransactional</span>(name=<span class=\"string\">\"createOrder\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Order <span class=\"title\">saveOrder</span><span class=\"params\">(OrderVo orderVo)</span></span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">\"=============用户下单=================\"</span>);</span><br><span class=\"line\">    log.info(<span class=\"string\">\"当前 XID: &#123;&#125;\"</span>, RootContext.getXID());</span><br><span class=\"line\">    <span class=\"comment\">// 保存订单</span></span><br><span class=\"line\">    Order order = <span class=\"keyword\">new</span> Order();</span><br><span class=\"line\">    order.setUserId(orderVo.getUserId());</span><br><span class=\"line\">    order.setCommodityCode(orderVo.getCommodityCode());</span><br><span class=\"line\">    order.setCount(orderVo.getCount());</span><br><span class=\"line\">    order.setMoney(orderVo.getMoney());</span><br><span class=\"line\">    order.setStatus(OrderStatus.INIT.getValue());</span><br><span class=\"line\">    Integer saveOrderRecord = orderMapper.insert(order);</span><br><span class=\"line\">    log.info(<span class=\"string\">\"保存订单&#123;&#125;\"</span>, saveOrderRecord &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"成功\"</span> : <span class=\"string\">\"失败\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//扣减库存</span></span><br><span class=\"line\">    storageFeignService.deduct(orderVo.getCommodityCode(),orderVo.getCount());</span><br><span class=\"line\">    <span class=\"comment\">//扣减余额</span></span><br><span class=\"line\">    accountFeignService.debit(orderVo.getUserId(),orderVo.getMoney());</span><br><span class=\"line\">    <span class=\"comment\">//更新订单</span></span><br><span class=\"line\">    Integer updateOrderRecord = orderMapper.updateOrderStatus(order.getId(),OrderStatus.SUCCESS.getValue());</span><br><span class=\"line\">    log.info(<span class=\"string\">\"更新订单id:&#123;&#125; &#123;&#125;\"</span>, order.getId(), updateOrderRecord &gt; <span class=\"number\">0</span> ? <span class=\"string\">\"成功\"</span> : <span class=\"string\">\"失败\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> order;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>测试</strong></p>\n<p>分布式事务成功，模拟正常下单、扣库存，扣余额</p>\n<p>分布式事务失败，模拟下单扣库存成功、扣余额失败，事务是否回滚</p>\n<p><img src=\"../../../../img/seataBase/clipboard-16300451877821.png\" alt=\"img\"></p>\n","next":{"title":"数据结构测试题---数组","path":"api/articles/resource-dataStructure-leetcode-leetcode-array.json","image":"/img/header_img/dataStructure/array.jpg","num_read":608,"num_like":733,"num_collection":881,"num_comments":49},"prev":{"title":"数据结构测试题---字符串","path":"api/articles/resource-dataStructure-leetcode-leetcode-str.json","image":"/img/header_img/10.jpg","num_read":766,"num_like":1048,"num_collection":812,"num_comments":66},"categories":[{"name":"微服务","path":"api/categories/微服务.json","pathContent":"api/categories/微服务","description":"一种云原生框架方法，其中单个应用程序由许多松散耦合且可独立部署的较小组件或服务组成","cover":"https://sunfy9.gitee.io/project/photo/project/MicroService.PNG"}],"tags":[{"name":"seata","path":"api/tags/seata.json","pathContent":"api/tags/seata","description":"[seata]暂未设置说明","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"}]}