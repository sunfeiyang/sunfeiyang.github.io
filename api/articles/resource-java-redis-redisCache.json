{"title":"高并发Redis缓存那些事儿","num_read":1008,"num_like":287,"num_collection":504,"num_comments":72,"slug":"resource-java-redis-redisCache","date":"2019-12-05T16:00:00.000Z","img":"/img/header_img/java/redisCaches.png","_id":"clhrbp2dc006xo5lgfzlqbaps","top":true,"type":"hot","site":{"data":{}},"updated":"2022-09-20T01:45:51.822Z","author":"Sunfy","comments":true,"path":"api/articles/resource-java-redis-redisCache.json","webPath":"2019/12/06/resource-java-redis-redisCache/","permalink":"https://sunfy9.gitee.io/2019/12/06/resource-java-redis-redisCache/","excerpt":"Redis缓存常见问题及相应问题的解决方案","covers":["../../../../img/redisCache/image-20201117131001593.png","../../../../img/redisCache/image-20201117131021438.png","../../../../img/redisCache/image-20201117131812003.png","../../../../img/redisCache/image-20201117131856465.png","../../../../img/redisCache/image-20201117132005635.png"],"keywords":"sunfy, hexo-theme-snail","content":"<p>Redis缓存常见问题及相应问题的解决方案<a id=\"more\"></a></p>\n<h2 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h2><p>查询一个根本不存在的数据， 缓存层和存储层都不会命中， 通常出于容错的考虑， 如果从存储层查不到数据则不写入缓存层。缓存穿透将导致不存在的数据每次请求都要到存储层去查询， 失去了缓存保护后端存储的意义。</p>\n<h3 id=\"基本原因\"><a href=\"#基本原因\" class=\"headerlink\" title=\"基本原因\"></a>基本原因</h3><ul>\n<li>自身业务代码或者数据出现问题。</li>\n<li>一些恶意攻击、 爬虫等造成大量空命中。 </li>\n</ul>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>1、缓存空对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">String <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从缓存中获取数据</span></span><br><span class=\"line\">    String cacheValue = cache.get(key);</span><br><span class=\"line\">    <span class=\"comment\">// 缓存为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isBlank(cacheValue)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从存储中获取</span></span><br><span class=\"line\">        String storageValue = storage.get(key);</span><br><span class=\"line\">        cache.set(key, storageValue);</span><br><span class=\"line\">        <span class=\"comment\">// 如果存储数据为空， 需要设置一个过期时间(300秒)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (storageValue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            cache.expire(key, <span class=\"number\">60</span> * <span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> storageValue;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 缓存非空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cacheValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​    2、布隆过滤器：<strong>一个大型的位数组和几个不一样的无偏 hash 函数</strong>。</p>\n<p><img src=\"../../../../img/redisCache/image-20201117131001593.png\" alt=\"image-20201117131001593\"></p>\n<p><img src=\"../../../../img/redisCache/image-20201117131021438.png\" alt=\"image-20201117131021438\"></p>\n<p>示例代码<sunfy-line></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.redisson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>redisson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.6.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.redisson.Redisson;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.redisson.api.RBloomFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.redisson.api.RedissonClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.redisson.config.Config;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedissonBloomFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Config config = <span class=\"keyword\">new</span> Config();</span><br><span class=\"line\">        config.useSingleServer().setAddress(<span class=\"string\">\"redis://localhost:6379\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//构造Redisson</span></span><br><span class=\"line\">        RedissonClient redisson = Redisson.create(config);</span><br><span class=\"line\">        RBloomFilter&lt;String&gt; bloomFilter = redisson.getBloomFilter(<span class=\"string\">\"nameList\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//初始化布隆过滤器：预计元素为100000000L,误差率为3%,根据这两个参数会计算出底层的bit数组大小</span></span><br><span class=\"line\">        bloomFilter.tryInit(<span class=\"number\">100000000L</span>,<span class=\"number\">0.03</span>);</span><br><span class=\"line\">        <span class=\"comment\">//将zhuge插入到布隆过滤器中</span></span><br><span class=\"line\">        bloomFilter.add(<span class=\"string\">\"zhuge\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//判断下面号码是否在布隆过滤器中</span></span><br><span class=\"line\">        System.out.println(bloomFilter.contains(<span class=\"string\">\"guojia\"</span>));<span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(bloomFilter.contains(<span class=\"string\">\"baiqi\"</span>));<span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(bloomFilter.contains(<span class=\"string\">\"zhuge\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用布隆过滤器需要把所有数据提前放入布隆过滤器，并且在增加数据时也要往布隆过滤器里放。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化布隆过滤器</span></span><br><span class=\"line\">RBloomFilter&lt;String&gt; bloomFilter = redisson.getBloomFilter(<span class=\"string\">\"nameList\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//初始化布隆过滤器：预计元素为100000000L,误差率为3%</span></span><br><span class=\"line\">bloomFilter.tryInit(<span class=\"number\">100000000L</span>,<span class=\"number\">0.03</span>);  </span><br><span class=\"line\"><span class=\"comment\">//把所有数据存入布隆过滤器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String key: keys) &#123;</span><br><span class=\"line\">        bloomFilter.put(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从布隆过滤器这一级缓存判断下key是否存在</span></span><br><span class=\"line\">    Boolean exist = bloomFilter.contains(key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!exist)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 从缓存中获取数据</span></span><br><span class=\"line\">    String cacheValue = cache.get(key);</span><br><span class=\"line\">    <span class=\"comment\">// 缓存为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isBlank(cacheValue)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从存储中获取</span></span><br><span class=\"line\">        String storageValue = storage.get(key);</span><br><span class=\"line\">        cache.set(key, storageValue);</span><br><span class=\"line\">        <span class=\"comment\">// 如果存储数据为空， 需要设置一个过期时间(300秒)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (storageValue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            cache.expire(key, <span class=\"number\">60</span> * <span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> storageValue;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 缓存非空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cacheValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：布隆过滤器不能删除数据，如果要删除得重新初始化数据。</strong></p>\n<h2 id=\"缓存失效（缓存击穿）\"><a href=\"#缓存失效（缓存击穿）\" class=\"headerlink\" title=\"缓存失效（缓存击穿）\"></a>缓存失效（缓存击穿）</h2><p>由于大批量缓存在同一时间失效可能导致大量请求同时穿透缓存直达数据库，可能会造成数据库瞬间压力过大甚至挂掉。</p>\n<p>批量缓存数据时增加一个随机过期时间，保证不会在同一时刻有大量的缓存失效。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">String <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从缓存中获取数据</span></span><br><span class=\"line\">    String cacheValue = cache.get(key);</span><br><span class=\"line\">    <span class=\"comment\">// 缓存为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isBlank(cacheValue)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从存储中获取</span></span><br><span class=\"line\">        String storageValue = storage.get(key);</span><br><span class=\"line\">        cache.set(key, storageValue);</span><br><span class=\"line\">        <span class=\"comment\">//设置一个过期时间(300到600之间的一个随机数)</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> expireTime = <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">300</span>)  + <span class=\"number\">300</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (storageValue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            cache.expire(key, expireTime);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> storageValue;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 缓存非空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cacheValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h2><p>缓存层支撑不住或宕掉后， 流量会像奔逃的野牛一样， 打向后端存储层。</p>\n<h3 id=\"预防和解决\"><a href=\"#预防和解决\" class=\"headerlink\" title=\"预防和解决\"></a>预防和解决</h3><ul>\n<li>缓存层服务高可用性，比如使用Redis Sentinel或Redis Cluster。</li>\n<li>依赖隔离组件为后端限流熔断并降级。比如使用Sentinel或<code>Hystrix</code>限流降级组件</li>\n<li>提前演练。 在项目上线前， 演练缓存层宕掉后， 应用以及后端的负载情况以及可能出现的问题， 在此基础上做一些预案设定。</li>\n</ul>\n<h2 id=\"热点缓存key重建优化\"><a href=\"#热点缓存key重建优化\" class=\"headerlink\" title=\"热点缓存key重建优化\"></a>热点缓存key重建优化</h2><h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>缓存失效的瞬间， 有大量线程来重建缓存， 造成后端负载加大， 甚至可能会让应用崩溃。</p>\n<h3 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>解决这个问题主要就是要避免大量线程同时重建缓存。我们可以利用互斥锁来解决，此方法只允许一个线程重建缓存， 其他线程等待重建缓存的线程执行完， 重新从缓存获取数据即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 伪代码</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从Redis中获取数据</span></span><br><span class=\"line\">    String value = redis.get(key);</span><br><span class=\"line\">    <span class=\"comment\">// 如果value为空， 则开始重构缓存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只允许一个线程重建缓存， 使用nx， 并设置过期时间ex</span></span><br><span class=\"line\">        String mutexKey = <span class=\"string\">\"mutext:key:\"</span> + key;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (redis.set(mutexKey, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"ex 180\"</span>, <span class=\"string\">\"nx\"</span>)) &#123;</span><br><span class=\"line\">             <span class=\"comment\">// 从数据源获取数据</span></span><br><span class=\"line\">            value = db.get(key);</span><br><span class=\"line\">            <span class=\"comment\">// 回写Redis， 并设置过期时间</span></span><br><span class=\"line\">            redis.setex(key, timeout, value);</span><br><span class=\"line\">            <span class=\"comment\">// 删除key_mutex</span></span><br><span class=\"line\">            redis.delete(mutexKey);</span><br><span class=\"line\">        &#125;<span class=\"comment\">// 其他线程休息50毫秒后重试</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">50</span>);</span><br><span class=\"line\">            get(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"缓存与数据库双写不一致\"><a href=\"#缓存与数据库双写不一致\" class=\"headerlink\" title=\"缓存与数据库双写不一致\"></a>缓存与数据库双写不一致</h2><p>高并发情况下，同时操作数据库与缓存会存在数据不一致性问题。</p>\n<h3 id=\"双写不一致\"><a href=\"#双写不一致\" class=\"headerlink\" title=\"双写不一致\"></a>双写不一致</h3><p><img src=\"../../../../img/redisCache/image-20201117131812003.png\" alt=\"image-20201117131812003\"></p>\n<h3 id=\"读写并发不一致\"><a href=\"#读写并发不一致\" class=\"headerlink\" title=\"读写并发不一致\"></a>读写并发不一致</h3><p><img src=\"../../../../img/redisCache/image-20201117131856465.png\" alt=\"image-20201117131856465\"></p>\n<h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h3><p>1、并发几率很小的数据(如个人维度的订单数据、用户数据等)，这种几乎不用考虑这个问题，很少会发生缓存不一致，可以给缓存数据加上过期时间，每隔一段时间触发读的主动更新即可。</p>\n<p>2、并发很高，如果业务上能容忍短时间的缓存数据不一致(如商品名称，商品分类菜单等)，缓存加上过期时间依然可以解决大部分业务对于缓存的要求。</p>\n<p>3、如果不能容忍缓存数据不一致，可以通过加<strong>读写锁</strong>保证并发读写或写写的时候按顺序排好队，<strong>读读的时候相当于无锁</strong>。</p>\n<p>4、也可以用阿里开源的canal通过监听数据库的binlog日志及时的去修改缓存，但是引入了新的中间件，增加了系统的复杂度。</p>\n<p><img src=\"../../../../img/redisCache/image-20201117132005635.png\" alt=\"image-20201117132005635\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以上我们针对的都是<strong>读多写少</strong>的情况加入缓存提高性能，如果<strong>写多读多</strong>的情况又不能容忍缓存数据不一致，那就没必要加缓存了，可以直接操作数据库。放入缓存的数据应该是对实时性、一致性要求不是很高的数据。切记不要为了用缓存，同时又要保证绝对的一致性做大量的过度设计和控制，增加系统复杂性！</p>\n","more":"</p>\n<h2 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h2><p>查询一个根本不存在的数据， 缓存层和存储层都不会命中， 通常出于容错的考虑， 如果从存储层查不到数据则不写入缓存层。缓存穿透将导致不存在的数据每次请求都要到存储层去查询， 失去了缓存保护后端存储的意义。</p>\n<h3 id=\"基本原因\"><a href=\"#基本原因\" class=\"headerlink\" title=\"基本原因\"></a>基本原因</h3><ul>\n<li>自身业务代码或者数据出现问题。</li>\n<li>一些恶意攻击、 爬虫等造成大量空命中。 </li>\n</ul>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>1、缓存空对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">String <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从缓存中获取数据</span></span><br><span class=\"line\">    String cacheValue = cache.get(key);</span><br><span class=\"line\">    <span class=\"comment\">// 缓存为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isBlank(cacheValue)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从存储中获取</span></span><br><span class=\"line\">        String storageValue = storage.get(key);</span><br><span class=\"line\">        cache.set(key, storageValue);</span><br><span class=\"line\">        <span class=\"comment\">// 如果存储数据为空， 需要设置一个过期时间(300秒)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (storageValue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            cache.expire(key, <span class=\"number\">60</span> * <span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> storageValue;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 缓存非空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cacheValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​    2、布隆过滤器：<strong>一个大型的位数组和几个不一样的无偏 hash 函数</strong>。</p>\n<p><img src=\"../../../../img/redisCache/image-20201117131001593.png\" alt=\"image-20201117131001593\"></p>\n<p><img src=\"../../../../img/redisCache/image-20201117131021438.png\" alt=\"image-20201117131021438\"></p>\n<p>示例代码<sunfy-line></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.redisson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>redisson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.6.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.redisson.Redisson;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.redisson.api.RBloomFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.redisson.api.RedissonClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.redisson.config.Config;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedissonBloomFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Config config = <span class=\"keyword\">new</span> Config();</span><br><span class=\"line\">        config.useSingleServer().setAddress(<span class=\"string\">\"redis://localhost:6379\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//构造Redisson</span></span><br><span class=\"line\">        RedissonClient redisson = Redisson.create(config);</span><br><span class=\"line\">        RBloomFilter&lt;String&gt; bloomFilter = redisson.getBloomFilter(<span class=\"string\">\"nameList\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//初始化布隆过滤器：预计元素为100000000L,误差率为3%,根据这两个参数会计算出底层的bit数组大小</span></span><br><span class=\"line\">        bloomFilter.tryInit(<span class=\"number\">100000000L</span>,<span class=\"number\">0.03</span>);</span><br><span class=\"line\">        <span class=\"comment\">//将zhuge插入到布隆过滤器中</span></span><br><span class=\"line\">        bloomFilter.add(<span class=\"string\">\"zhuge\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//判断下面号码是否在布隆过滤器中</span></span><br><span class=\"line\">        System.out.println(bloomFilter.contains(<span class=\"string\">\"guojia\"</span>));<span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(bloomFilter.contains(<span class=\"string\">\"baiqi\"</span>));<span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(bloomFilter.contains(<span class=\"string\">\"zhuge\"</span>));<span class=\"comment\">//true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用布隆过滤器需要把所有数据提前放入布隆过滤器，并且在增加数据时也要往布隆过滤器里放。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化布隆过滤器</span></span><br><span class=\"line\">RBloomFilter&lt;String&gt; bloomFilter = redisson.getBloomFilter(<span class=\"string\">\"nameList\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//初始化布隆过滤器：预计元素为100000000L,误差率为3%</span></span><br><span class=\"line\">bloomFilter.tryInit(<span class=\"number\">100000000L</span>,<span class=\"number\">0.03</span>);  </span><br><span class=\"line\"><span class=\"comment\">//把所有数据存入布隆过滤器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String key: keys) &#123;</span><br><span class=\"line\">        bloomFilter.put(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从布隆过滤器这一级缓存判断下key是否存在</span></span><br><span class=\"line\">    Boolean exist = bloomFilter.contains(key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!exist)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 从缓存中获取数据</span></span><br><span class=\"line\">    String cacheValue = cache.get(key);</span><br><span class=\"line\">    <span class=\"comment\">// 缓存为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isBlank(cacheValue)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从存储中获取</span></span><br><span class=\"line\">        String storageValue = storage.get(key);</span><br><span class=\"line\">        cache.set(key, storageValue);</span><br><span class=\"line\">        <span class=\"comment\">// 如果存储数据为空， 需要设置一个过期时间(300秒)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (storageValue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            cache.expire(key, <span class=\"number\">60</span> * <span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> storageValue;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 缓存非空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cacheValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：布隆过滤器不能删除数据，如果要删除得重新初始化数据。</strong></p>\n<h2 id=\"缓存失效（缓存击穿）\"><a href=\"#缓存失效（缓存击穿）\" class=\"headerlink\" title=\"缓存失效（缓存击穿）\"></a>缓存失效（缓存击穿）</h2><p>由于大批量缓存在同一时间失效可能导致大量请求同时穿透缓存直达数据库，可能会造成数据库瞬间压力过大甚至挂掉。</p>\n<p>批量缓存数据时增加一个随机过期时间，保证不会在同一时刻有大量的缓存失效。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">String <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从缓存中获取数据</span></span><br><span class=\"line\">    String cacheValue = cache.get(key);</span><br><span class=\"line\">    <span class=\"comment\">// 缓存为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isBlank(cacheValue)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从存储中获取</span></span><br><span class=\"line\">        String storageValue = storage.get(key);</span><br><span class=\"line\">        cache.set(key, storageValue);</span><br><span class=\"line\">        <span class=\"comment\">//设置一个过期时间(300到600之间的一个随机数)</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> expireTime = <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">300</span>)  + <span class=\"number\">300</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (storageValue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            cache.expire(key, expireTime);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> storageValue;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 缓存非空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cacheValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h2><p>缓存层支撑不住或宕掉后， 流量会像奔逃的野牛一样， 打向后端存储层。</p>\n<h3 id=\"预防和解决\"><a href=\"#预防和解决\" class=\"headerlink\" title=\"预防和解决\"></a>预防和解决</h3><ul>\n<li>缓存层服务高可用性，比如使用Redis Sentinel或Redis Cluster。</li>\n<li>依赖隔离组件为后端限流熔断并降级。比如使用Sentinel或<code>Hystrix</code>限流降级组件</li>\n<li>提前演练。 在项目上线前， 演练缓存层宕掉后， 应用以及后端的负载情况以及可能出现的问题， 在此基础上做一些预案设定。</li>\n</ul>\n<h2 id=\"热点缓存key重建优化\"><a href=\"#热点缓存key重建优化\" class=\"headerlink\" title=\"热点缓存key重建优化\"></a>热点缓存key重建优化</h2><h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>缓存失效的瞬间， 有大量线程来重建缓存， 造成后端负载加大， 甚至可能会让应用崩溃。</p>\n<h3 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>解决这个问题主要就是要避免大量线程同时重建缓存。我们可以利用互斥锁来解决，此方法只允许一个线程重建缓存， 其他线程等待重建缓存的线程执行完， 重新从缓存获取数据即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 伪代码</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从Redis中获取数据</span></span><br><span class=\"line\">    String value = redis.get(key);</span><br><span class=\"line\">    <span class=\"comment\">// 如果value为空， 则开始重构缓存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只允许一个线程重建缓存， 使用nx， 并设置过期时间ex</span></span><br><span class=\"line\">        String mutexKey = <span class=\"string\">\"mutext:key:\"</span> + key;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (redis.set(mutexKey, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"ex 180\"</span>, <span class=\"string\">\"nx\"</span>)) &#123;</span><br><span class=\"line\">             <span class=\"comment\">// 从数据源获取数据</span></span><br><span class=\"line\">            value = db.get(key);</span><br><span class=\"line\">            <span class=\"comment\">// 回写Redis， 并设置过期时间</span></span><br><span class=\"line\">            redis.setex(key, timeout, value);</span><br><span class=\"line\">            <span class=\"comment\">// 删除key_mutex</span></span><br><span class=\"line\">            redis.delete(mutexKey);</span><br><span class=\"line\">        &#125;<span class=\"comment\">// 其他线程休息50毫秒后重试</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">50</span>);</span><br><span class=\"line\">            get(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"缓存与数据库双写不一致\"><a href=\"#缓存与数据库双写不一致\" class=\"headerlink\" title=\"缓存与数据库双写不一致\"></a>缓存与数据库双写不一致</h2><p>高并发情况下，同时操作数据库与缓存会存在数据不一致性问题。</p>\n<h3 id=\"双写不一致\"><a href=\"#双写不一致\" class=\"headerlink\" title=\"双写不一致\"></a>双写不一致</h3><p><img src=\"../../../../img/redisCache/image-20201117131812003.png\" alt=\"image-20201117131812003\"></p>\n<h3 id=\"读写并发不一致\"><a href=\"#读写并发不一致\" class=\"headerlink\" title=\"读写并发不一致\"></a>读写并发不一致</h3><p><img src=\"../../../../img/redisCache/image-20201117131856465.png\" alt=\"image-20201117131856465\"></p>\n<h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h3><p>1、并发几率很小的数据(如个人维度的订单数据、用户数据等)，这种几乎不用考虑这个问题，很少会发生缓存不一致，可以给缓存数据加上过期时间，每隔一段时间触发读的主动更新即可。</p>\n<p>2、并发很高，如果业务上能容忍短时间的缓存数据不一致(如商品名称，商品分类菜单等)，缓存加上过期时间依然可以解决大部分业务对于缓存的要求。</p>\n<p>3、如果不能容忍缓存数据不一致，可以通过加<strong>读写锁</strong>保证并发读写或写写的时候按顺序排好队，<strong>读读的时候相当于无锁</strong>。</p>\n<p>4、也可以用阿里开源的canal通过监听数据库的binlog日志及时的去修改缓存，但是引入了新的中间件，增加了系统的复杂度。</p>\n<p><img src=\"../../../../img/redisCache/image-20201117132005635.png\" alt=\"image-20201117132005635\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以上我们针对的都是<strong>读多写少</strong>的情况加入缓存提高性能，如果<strong>写多读多</strong>的情况又不能容忍缓存数据不一致，那就没必要加缓存了，可以直接操作数据库。放入缓存的数据应该是对实时性、一致性要求不是很高的数据。切记不要为了用缓存，同时又要保证绝对的一致性做大量的过度设计和控制，增加系统复杂性！</p>","next":{"title":"批量修改文件后缀名","path":"api/articles/resource-system-Windows-renameFileSuffix.json","image":"/img/header_img/16.gif","num_read":80,"num_like":436,"num_collection":682,"num_comments":119},"prev":{"title":"IDEA JRebel 破解最简单的使用","path":"api/articles/resource-tools-IDEA-IDEA-JRebel.json","image":"/img/header_img/tools/idea/idea.png","num_read":768,"num_like":534,"num_collection":123,"num_comments":117},"categories":[{"name":"分布式中间件","path":"api/categories/分布式中间件.json","pathContent":"api/categories/分布式中间件","description":"包含Zookeeper、Redis、等相关内容","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"}],"tags":[{"name":"Redis","path":"api/tags/Redis.json","pathContent":"api/tags/Redis","description":"[Redis]暂未设置说明","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"}]}