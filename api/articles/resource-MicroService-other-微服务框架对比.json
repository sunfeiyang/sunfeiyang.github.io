{"title":"微服务各种框架简介对比","num_read":1734,"num_like":61,"num_collection":684,"num_comments":165,"slug":"resource-MicroService-other-微服务框架对比","date":"2021-09-04T16:00:00.000Z","img":"/img/header_img/MicroService/contrast.png","_id":"clhrbp2e000cmo5lg9dq35zfe","project":"MicroService","type":"hot","subtitle":"网关路由|服务注册发现|分布式配置中心|服务调用|客户端负载均衡|断路器|分布式事务|授权","hot":"read","site":{"data":{}},"updated":"2022-01-12T05:19:10.000Z","author":"Sunfy","comments":true,"path":"api/articles/resource-MicroService-other-微服务框架对比.json","webPath":"2021/09/05/resource-MicroService-other-微服务框架对比/","permalink":"https://sunfy9.gitee.io/2021/09/05/resource-MicroService-other-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/","excerpt":null,"covers":null,"keywords":"sunfy, hexo-theme-snail","content":"<h1 id=\"服务网关路由（Routing）\"><a href=\"#服务网关路由（Routing）\" class=\"headerlink\" title=\"服务网关路由（Routing）\"></a>服务网关路由（Routing）</h1><h2 id=\"SpringCloud-gateway\"><a href=\"#SpringCloud-gateway\" class=\"headerlink\" title=\"SpringCloud gateway\"></a><code>SpringCloud gateway</code></h2><p>This project provides a library for building an API Gateway on top of Spring WebFlux. Spring Cloud Gateway aims to provide a simple, yet effective way to route to APIs and provide cross cutting concerns to them such as: security, monitoring/metrics, and resiliency.</p>\n<blockquote>\n<p>这个项目提供了一个在Spring WebFlux上构建API网关的库。Spring Cloud Gateway旨在提供一种简单而有效的方式来路由到api，并为它们提供横切关注点，如:安全性、监控/指标和弹性。</p>\n</blockquote>\n<ul>\n<li>官网-<a href=\"https://spring.io/projects/spring-cloud-gateway\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects/spring-cloud-gateway</a></li>\n</ul>\n<h2 id=\"Zuul\"><a href=\"#Zuul\" class=\"headerlink\" title=\"Zuul\"></a><code>Zuul</code></h2><p>Spring Cloud Netflix: Spring Cloud Netflix provides Netflix OSS integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms. With a few simple annotations you can quickly enable and configure the common patterns inside your application and build large distributed systems with battle-tested Netflix components. The patterns provided include Service Discovery (Eureka), Circuit Breaker (Hystrix), Intelligent Routing (Zuul) and Client Side Load Balancing (Ribbon)..</p>\n<blockquote>\n<p>Spring Cloud Netflix通过自动配置和绑定到Spring环境和其他Spring编程模型习语，为Spring Boot应用提供了Netflix OSS集成。通过一些简单的注释，您可以在应用程序中快速启用和配置通用模式，并使用经过战斗考验的Netflix组件构建大型分布式系统。提供的模式包括服务发现(Eureka)、断路器(Hystrix)、智能路由(Zuul)和客户端负载均衡(Ribbon)。</p>\n</blockquote>\n<ul>\n<li>网址-<a href=\"https://spring.io/projects/spring-cloud-netflix\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects/spring-cloud-netflix</a><sunfy-line></li>\n</ul>\n<h1 id=\"服务注册发现（Service-register-and-discovery）\"><a href=\"#服务注册发现（Service-register-and-discovery）\" class=\"headerlink\" title=\"服务注册发现（Service register and discovery）\"></a>服务注册发现（Service register and discovery）</h1><h2 id=\"Nacos\"><a href=\"#Nacos\" class=\"headerlink\" title=\"Nacos\"></a><code>Nacos</code></h2><p>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p>\n<ul>\n<li>官网-<a href=\"https://nacos.io/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">https://nacos.io/zh-cn/index.html</a></li>\n</ul>\n<h2 id=\"Eureka\"><a href=\"#Eureka\" class=\"headerlink\" title=\"Eureka\"></a><code>Eureka</code></h2><p>Spring Cloud Netflix: Spring Cloud Netflix provides Netflix OSS integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms. With a few simple annotations you can quickly enable and configure the common patterns inside your application and build large distributed systems with battle-tested Netflix components. The patterns provided include Service Discovery (Eureka), Circuit Breaker (Hystrix), Intelligent Routing (Zuul) and Client Side Load Balancing (Ribbon)..</p>\n<blockquote>\n<p>Spring Cloud Netflix通过自动配置和绑定到Spring环境和其他Spring编程模型习语，为Spring Boot应用提供了Netflix OSS集成。通过一些简单的注释，您可以在应用程序中快速启用和配置通用模式，并使用经过战斗考验的Netflix组件构建大型分布式系统。提供的模式包括服务发现(Eureka)、断路器(Hystrix)、智能路由(Zuul)和客户端负载均衡(Ribbon)。</p>\n</blockquote>\n<ul>\n<li>网址-<a href=\"https://spring.io/projects/spring-cloud-netflix\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects/spring-cloud-netflix</a></li>\n</ul>\n<h2 id=\"Zookeeper\"><a href=\"#Zookeeper\" class=\"headerlink\" title=\"Zookeeper\"></a><code>Zookeeper</code></h2><p>Apache ZooKeeper is an effort to develop and maintain an open-source server which enables highly reliable distributed coordination.</p>\n<blockquote>\n<p>Apache ZooKeeper致力于开发和维护开源服务器，以实现高度可靠的分布式协调。</p>\n</blockquote>\n<ul>\n<li>官网-<a href=\"https://zookeeper.apache.org/\" target=\"_blank\" rel=\"noopener\">https://zookeeper.apache.org/</a></li>\n<li><a href=\"https://spring.io/projects/spring-cloud-zookeeper\" target=\"_blank\" rel=\"noopener\">Spring Cloud Zookeeper</a></li>\n</ul>\n<h2 id=\"Consul\"><a href=\"#Consul\" class=\"headerlink\" title=\"Consul\"></a><code>Consul</code></h2><p>Spring Cloud Consul provides <a href=\"https://consul.io/\" target=\"_blank\" rel=\"noopener\">Consul</a> integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms. With a few simple annotations you can quickly enable and configure the common patterns inside your application and build large distributed systems with Hashicorp’s Consul. The patterns provided include Service Discovery, Distributed Configuration and Control Bus.</p>\n<blockquote>\n<p>Spring Cloud Consul通过自动配置和绑定到Spring环境和其他Spring编程模型习语为Spring Boot应用程序提供Consul集成。通过一些简单的注释，您可以在应用程序中快速启用和配置公共模式，并使用Hashicorp的Consul构建大型分布式系统。提供的模式包括服务发现、分布式配置和控制总线。</p>\n</blockquote>\n<ul>\n<li>官网-<a href=\"https://spring.io/projects/spring-cloud-consul\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects/spring-cloud-consul</a></li>\n</ul>\n<h1 id=\"分布式配置中心（Distributed-confiuration）\"><a href=\"#分布式配置中心（Distributed-confiuration）\" class=\"headerlink\" title=\"分布式配置中心（Distributed confiuration）\"></a>分布式配置中心（Distributed confiuration）</h1><h2 id=\"SpringCloud-config\"><a href=\"#SpringCloud-config\" class=\"headerlink\" title=\"SpringCloud config\"></a><code>SpringCloud config</code></h2><p>Spring Cloud Config provides server and client-side support for externalized configuration in a distributed system. With the Config Server you have a central place to manage external properties for applications across all environments. The concepts on both client and server map identically to the Spring <code>Environment</code> and <code>PropertySource</code> abstractions, so they fit very well with Spring applications, but can be used with any application running in any language. As an application moves through the deployment pipeline from dev to test and into production you can manage the configuration between those environments and be certain that applications have everything they need to run when they migrate. The default implementation of the server storage backend uses git so it easily supports labelled versions of configuration environments, as well as being accessible to a wide range of tooling for managing the content. It is easy to add alternative implementations and plug them in with Spring configuration.</p>\n<blockquote>\n<p>Spring Cloud Config为分布式系统中的外部化配置提供服务器和客户端支持。有了Config Server，您就有了一个中心位置来管理跨所有环境的应用程序的外部属性。客户机和服务器上的概念都与Spring Environment和PropertySource抽象相对应，因此它们非常适合Spring应用程序，但可以用于以任何语言运行的任何应用程序。当应用程序通过部署管道从开发到测试再到生产时，您可以管理这些环境之间的配置，并确保应用程序在迁移时拥有运行所需的一切。服务器存储后端的默认实现使用git，所以它很容易支持标签版本的配置环境，以及用于管理内容的各种工具。添加替代实现并将它们与Spring配置一起插入是很容易的。</p>\n</blockquote>\n<ul>\n<li>官网-<a href=\"https://spring.io/projects/spring-cloud-config\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects/spring-cloud-config</a></li>\n</ul>\n<h2 id=\"Nacos-1\"><a href=\"#Nacos-1\" class=\"headerlink\" title=\"Nacos\"></a><code>Nacos</code></h2><p><a href=\"#Nacos\">站内地址</a></p>\n<h2 id=\"Zookeeper-1\"><a href=\"#Zookeeper-1\" class=\"headerlink\" title=\"Zookeeper\"></a><code>Zookeeper</code></h2><p><a href=\"#Zookeeper\">站内地址</a></p>\n<h1 id=\"服务调用（Service-Call）\"><a href=\"#服务调用（Service-Call）\" class=\"headerlink\" title=\"服务调用（Service Call）\"></a>服务调用（Service Call）</h1><h2 id=\"RestTemplate\"><a href=\"#RestTemplate\" class=\"headerlink\" title=\"RestTemplate\"></a><code>RestTemplate</code></h2><h2 id=\"Feign\"><a href=\"#Feign\" class=\"headerlink\" title=\"Feign\"></a><code>Feign</code></h2><h2 id=\"OpenFeign\"><a href=\"#OpenFeign\" class=\"headerlink\" title=\"OpenFeign\"></a><code>OpenFeign</code></h2><p>声明式、模板化的HTTP客户端</p>\n<h2 id=\"Spring-Cloud-OpenFeign\"><a href=\"#Spring-Cloud-OpenFeign\" class=\"headerlink\" title=\"Spring Cloud OpenFeign\"></a><code>Spring Cloud OpenFeign</code></h2><p>This project provides <a href=\"https://github.com/OpenFeign/feign\" target=\"_blank\" rel=\"noopener\">OpenFeign</a> integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms.</p>\n<blockquote>\n<p>该项目通过自动配置和绑定到Spring Environment和其他Spring编程模型习语，为Spring Boot应用程序提供OpenFeign集成。</p>\n</blockquote>\n<ul>\n<li>网址-<a href=\"https://spring.io/projects/spring-cloud-openfeign\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects/spring-cloud-openfeign</a></li>\n</ul>\n<h1 id=\"客户端负载均衡（Loading-blance）\"><a href=\"#客户端负载均衡（Loading-blance）\" class=\"headerlink\" title=\"客户端负载均衡（Loading blance）\"></a>客户端负载均衡（Loading blance）</h1><h2 id=\"Ribbon\"><a href=\"#Ribbon\" class=\"headerlink\" title=\"Ribbon\"></a><code>Ribbon</code></h2><p>客户端负载均衡</p>\n<p>Spring Cloud Netflix: Spring Cloud Netflix provides Netflix OSS integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms. With a few simple annotations you can quickly enable and configure the common patterns inside your application and build large distributed systems with battle-tested Netflix components. The patterns provided include Service Discovery (Eureka), Circuit Breaker (Hystrix), Intelligent Routing (Zuul) and Client Side Load Balancing (Ribbon)..</p>\n<blockquote>\n<p>Spring Cloud Netflix通过自动配置和绑定到Spring环境和其他Spring编程模型习语，为Spring Boot应用提供了Netflix OSS集成。通过一些简单的注释，您可以在应用程序中快速启用和配置通用模式，并使用经过战斗考验的Netflix组件构建大型分布式系统。提供的模式包括服务发现(Eureka)、断路器(Hystrix)、智能路由(Zuul)和客户端负载均衡(Ribbon)。</p>\n</blockquote>\n<ul>\n<li>网址-<a href=\"https://spring.io/projects/spring-cloud-netflix\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects/spring-cloud-netflix</a></li>\n</ul>\n<h1 id=\"断路器（Circit-Breakers）\"><a href=\"#断路器（Circit-Breakers）\" class=\"headerlink\" title=\"断路器（Circit Breakers）\"></a>断路器（Circit Breakers）</h1><h2 id=\"Hystrix（停止开发）\"><a href=\"#Hystrix（停止开发）\" class=\"headerlink\" title=\"Hystrix（停止开发）\"></a><code>Hystrix</code>（停止开发）</h2><p>在分布式系统中，服务与服务之间依赖错综复杂，一种不可避免的情况就是某些服务将会出现失败。Hystrix是一个库，它提供了服务与服务之间的容错功能，“容错”主要体现在延迟和异常上，从而做到控制分布式系统中的联动故障。Hystrix通过隔离服务的访问点，阻止联动故障，并提供故障的解决方案，从而提高了这个分布式系统的弹性。</p>\n<p>Spring Cloud Netflix: Spring Cloud Netflix provides Netflix OSS integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms. With a few simple annotations you can quickly enable and configure the common patterns inside your application and build large distributed systems with battle-tested Netflix components. The patterns provided include Service Discovery (Eureka), Circuit Breaker (Hystrix), Intelligent Routing (Zuul) and Client Side Load Balancing (Ribbon)..</p>\n<blockquote>\n<p>Spring Cloud Netflix通过自动配置和绑定到Spring环境和其他Spring编程模型习语，为Spring Boot应用提供了Netflix OSS集成。通过一些简单的注释，您可以在应用程序中快速启用和配置通用模式，并使用经过战斗考验的Netflix组件构建大型分布式系统。提供的模式包括服务发现(Eureka)、断路器(Hystrix)、智能路由(Zuul)和客户端负载均衡(Ribbon)。</p>\n</blockquote>\n<ul>\n<li>网址-<a href=\"https://spring.io/projects/spring-cloud-netflix\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects/spring-cloud-netflix</a></li>\n</ul>\n<h2 id=\"Sentinel\"><a href=\"#Sentinel\" class=\"headerlink\" title=\"Sentinel\"></a><code>Sentinel</code></h2><p>As distributed systems are becoming increasingly popular, the reliability between services is becoming more important than ever before. Sentinel is a powerful flow control component that takes “flow” as the breakthrough point and covers multiple fields including flow control, concurrency limiting, circuit breaking, and adaptive system protection to guarantee the reliability of microservices.</p>\n<blockquote>\n<p>随着分布式系统越来越受欢迎，服务之间的可靠性变得比以往任何时候都更加重要。Sentinel是一款功能强大的流量控制组件，以“流”为突破点，涵盖流量控制、并发限制、断路、自适应系统保护等多个领域，保证微服务的可靠性。</p>\n</blockquote>\n<ul>\n<li>源码地址-<a href=\"https://github.com/alibaba/Sentinel\" target=\"_blank\" rel=\"noopener\">GitHub - alibaba/Sentinel: A powerful flow control component enabling reliability, resilience and monitoring for microservices. (面向云原生微服务的高可用流控防护组件)</a></li>\n<li>官网地址-<a href=\"https://github.com/alibaba/Sentinel\" target=\"_blank\" rel=\"noopener\">GitHub - alibaba/Sentinel: A powerful flow control component enabling reliability, resilience and monitoring for microservices. (面向云原生微服务的高可用流控防护组件)</a></li>\n</ul>\n<p>二者的对比-<a href=\"https://github.com/alibaba/Sentinel/wiki/Sentinel-与-Hystrix-的对比\" target=\"_blank\" rel=\"noopener\">Sentinel 与 Hystrix 的对比 · alibaba/Sentinel Wiki · GitHub</a></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Sentinel</th>\n<th>Hystrix</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>隔离策略</td>\n<td>信号量隔离</td>\n<td>线程池隔离/信号量隔离</td>\n</tr>\n<tr>\n<td>熔断降级策略</td>\n<td>基于响应时间或失败比率</td>\n<td>基于失败比率</td>\n</tr>\n<tr>\n<td>实时指标实现</td>\n<td>滑动窗口</td>\n<td>滑动窗口（基于 RxJava）</td>\n</tr>\n<tr>\n<td>规则配置</td>\n<td>支持多种数据源</td>\n<td>支持多种数据源</td>\n</tr>\n<tr>\n<td>扩展性</td>\n<td>多个扩展点</td>\n<td>插件的形式</td>\n</tr>\n<tr>\n<td>基于注解的支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>限流</td>\n<td>基于 QPS，支持基于调用关系的限流</td>\n<td>有限的支持</td>\n</tr>\n<tr>\n<td>流量整形</td>\n<td>支持慢启动、匀速器模式</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>系统负载保护</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>控制台</td>\n<td>开箱即用，可配置规则、查看秒级监控、机器发现等</td>\n<td>不完善</td>\n</tr>\n<tr>\n<td>常见框架的适配</td>\n<td>Servlet、Spring Cloud、Dubbo、gRPC 等</td>\n<td>Servlet、Spring Cloud Netflix</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"分布式事务（Distributed-transaction）\"><a href=\"#分布式事务（Distributed-transaction）\" class=\"headerlink\" title=\"分布式事务（Distributed transaction）\"></a>分布式事务（Distributed transaction）</h1><h2 id=\"Seata\"><a href=\"#Seata\" class=\"headerlink\" title=\"Seata\"></a><code>Seata</code></h2><p>Seata 是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</p>\n<ul>\n<li>官网-<a href=\"https://seata.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://seata.io/zh-cn/</a></li>\n</ul>\n<h1 id=\"授权（authorization）\"><a href=\"#授权（authorization）\" class=\"headerlink\" title=\"授权（authorization）\"></a>授权（authorization）</h1><h2 id=\"Shiro\"><a href=\"#Shiro\" class=\"headerlink\" title=\"Shiro\"></a><code>Shiro</code></h2><p><strong>Apache Shiro™</strong> is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.</p>\n<blockquote>\n<p>Apache Shiro™是一个功能强大且易于使用的Java安全框架，可执行身份验证、授权、加密和会话管理。通过Shiro易于理解的API，您可以快速、轻松地保护任何应用程序——从最小的移动应用程序到最大的web和企业应用程序。</p>\n</blockquote>\n<ul>\n<li>官网-<a href=\"https://shiro.apache.org/\" target=\"_blank\" rel=\"noopener\">https://shiro.apache.org/</a></li>\n</ul>\n<h2 id=\"SpringSecurity\"><a href=\"#SpringSecurity\" class=\"headerlink\" title=\"SpringSecurity\"></a><code>SpringSecurity</code></h2><p>Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.</p>\n<p>Spring Security is a framework that focuses on providing both authentication and authorization to Java applications. Like all Spring projects, the real power of Spring Security is found in how easily it can be extended to meet custom requirements</p>\n<blockquote>\n<p>Spring Security是一个强大的、高度可定制的身份验证和访问控制框架。它是保护基于spring的应用程序的事实上的标准。</p>\n<p>Spring Security是一个专注于为Java应用程序提供身份验证和授权的框架。与所有Spring项目一样，Spring Security的真正强大之处在于它可以很容易地扩展以满足定制需求</p>\n</blockquote>\n<ul>\n<li>官网-<a href=\"https://spring.io/projects/spring-security\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects/spring-security</a></li>\n</ul>\n","more":"<h1 id=\"服务网关路由（Routing）\"><a href=\"#服务网关路由（Routing）\" class=\"headerlink\" title=\"服务网关路由（Routing）\"></a>服务网关路由（Routing）</h1><h2 id=\"SpringCloud-gateway\"><a href=\"#SpringCloud-gateway\" class=\"headerlink\" title=\"SpringCloud gateway\"></a><code>SpringCloud gateway</code></h2><p>This project provides a library for building an API Gateway on top of Spring WebFlux. Spring Cloud Gateway aims to provide a simple, yet effective way to route to APIs and provide cross cutting concerns to them such as: security, monitoring/metrics, and resiliency.</p>\n<blockquote>\n<p>这个项目提供了一个在Spring WebFlux上构建API网关的库。Spring Cloud Gateway旨在提供一种简单而有效的方式来路由到api，并为它们提供横切关注点，如:安全性、监控/指标和弹性。</p>\n</blockquote>\n<ul>\n<li>官网-<a href=\"https://spring.io/projects/spring-cloud-gateway\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects/spring-cloud-gateway</a></li>\n</ul>\n<h2 id=\"Zuul\"><a href=\"#Zuul\" class=\"headerlink\" title=\"Zuul\"></a><code>Zuul</code></h2><p>Spring Cloud Netflix: Spring Cloud Netflix provides Netflix OSS integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms. With a few simple annotations you can quickly enable and configure the common patterns inside your application and build large distributed systems with battle-tested Netflix components. The patterns provided include Service Discovery (Eureka), Circuit Breaker (Hystrix), Intelligent Routing (Zuul) and Client Side Load Balancing (Ribbon)..</p>\n<blockquote>\n<p>Spring Cloud Netflix通过自动配置和绑定到Spring环境和其他Spring编程模型习语，为Spring Boot应用提供了Netflix OSS集成。通过一些简单的注释，您可以在应用程序中快速启用和配置通用模式，并使用经过战斗考验的Netflix组件构建大型分布式系统。提供的模式包括服务发现(Eureka)、断路器(Hystrix)、智能路由(Zuul)和客户端负载均衡(Ribbon)。</p>\n</blockquote>\n<ul>\n<li>网址-<a href=\"https://spring.io/projects/spring-cloud-netflix\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects/spring-cloud-netflix</a><sunfy-line></li>\n</ul>\n<h1 id=\"服务注册发现（Service-register-and-discovery）\"><a href=\"#服务注册发现（Service-register-and-discovery）\" class=\"headerlink\" title=\"服务注册发现（Service register and discovery）\"></a>服务注册发现（Service register and discovery）</h1><h2 id=\"Nacos\"><a href=\"#Nacos\" class=\"headerlink\" title=\"Nacos\"></a><code>Nacos</code></h2><p>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p>\n<ul>\n<li>官网-<a href=\"https://nacos.io/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">https://nacos.io/zh-cn/index.html</a></li>\n</ul>\n<h2 id=\"Eureka\"><a href=\"#Eureka\" class=\"headerlink\" title=\"Eureka\"></a><code>Eureka</code></h2><p>Spring Cloud Netflix: Spring Cloud Netflix provides Netflix OSS integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms. With a few simple annotations you can quickly enable and configure the common patterns inside your application and build large distributed systems with battle-tested Netflix components. The patterns provided include Service Discovery (Eureka), Circuit Breaker (Hystrix), Intelligent Routing (Zuul) and Client Side Load Balancing (Ribbon)..</p>\n<blockquote>\n<p>Spring Cloud Netflix通过自动配置和绑定到Spring环境和其他Spring编程模型习语，为Spring Boot应用提供了Netflix OSS集成。通过一些简单的注释，您可以在应用程序中快速启用和配置通用模式，并使用经过战斗考验的Netflix组件构建大型分布式系统。提供的模式包括服务发现(Eureka)、断路器(Hystrix)、智能路由(Zuul)和客户端负载均衡(Ribbon)。</p>\n</blockquote>\n<ul>\n<li>网址-<a href=\"https://spring.io/projects/spring-cloud-netflix\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects/spring-cloud-netflix</a></li>\n</ul>\n<h2 id=\"Zookeeper\"><a href=\"#Zookeeper\" class=\"headerlink\" title=\"Zookeeper\"></a><code>Zookeeper</code></h2><p>Apache ZooKeeper is an effort to develop and maintain an open-source server which enables highly reliable distributed coordination.</p>\n<blockquote>\n<p>Apache ZooKeeper致力于开发和维护开源服务器，以实现高度可靠的分布式协调。</p>\n</blockquote>\n<ul>\n<li>官网-<a href=\"https://zookeeper.apache.org/\" target=\"_blank\" rel=\"noopener\">https://zookeeper.apache.org/</a></li>\n<li><a href=\"https://spring.io/projects/spring-cloud-zookeeper\" target=\"_blank\" rel=\"noopener\">Spring Cloud Zookeeper</a></li>\n</ul>\n<h2 id=\"Consul\"><a href=\"#Consul\" class=\"headerlink\" title=\"Consul\"></a><code>Consul</code></h2><p>Spring Cloud Consul provides <a href=\"https://consul.io/\" target=\"_blank\" rel=\"noopener\">Consul</a> integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms. With a few simple annotations you can quickly enable and configure the common patterns inside your application and build large distributed systems with Hashicorp’s Consul. The patterns provided include Service Discovery, Distributed Configuration and Control Bus.</p>\n<blockquote>\n<p>Spring Cloud Consul通过自动配置和绑定到Spring环境和其他Spring编程模型习语为Spring Boot应用程序提供Consul集成。通过一些简单的注释，您可以在应用程序中快速启用和配置公共模式，并使用Hashicorp的Consul构建大型分布式系统。提供的模式包括服务发现、分布式配置和控制总线。</p>\n</blockquote>\n<ul>\n<li>官网-<a href=\"https://spring.io/projects/spring-cloud-consul\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects/spring-cloud-consul</a></li>\n</ul>\n<h1 id=\"分布式配置中心（Distributed-confiuration）\"><a href=\"#分布式配置中心（Distributed-confiuration）\" class=\"headerlink\" title=\"分布式配置中心（Distributed confiuration）\"></a>分布式配置中心（Distributed confiuration）</h1><h2 id=\"SpringCloud-config\"><a href=\"#SpringCloud-config\" class=\"headerlink\" title=\"SpringCloud config\"></a><code>SpringCloud config</code></h2><p>Spring Cloud Config provides server and client-side support for externalized configuration in a distributed system. With the Config Server you have a central place to manage external properties for applications across all environments. The concepts on both client and server map identically to the Spring <code>Environment</code> and <code>PropertySource</code> abstractions, so they fit very well with Spring applications, but can be used with any application running in any language. As an application moves through the deployment pipeline from dev to test and into production you can manage the configuration between those environments and be certain that applications have everything they need to run when they migrate. The default implementation of the server storage backend uses git so it easily supports labelled versions of configuration environments, as well as being accessible to a wide range of tooling for managing the content. It is easy to add alternative implementations and plug them in with Spring configuration.</p>\n<blockquote>\n<p>Spring Cloud Config为分布式系统中的外部化配置提供服务器和客户端支持。有了Config Server，您就有了一个中心位置来管理跨所有环境的应用程序的外部属性。客户机和服务器上的概念都与Spring Environment和PropertySource抽象相对应，因此它们非常适合Spring应用程序，但可以用于以任何语言运行的任何应用程序。当应用程序通过部署管道从开发到测试再到生产时，您可以管理这些环境之间的配置，并确保应用程序在迁移时拥有运行所需的一切。服务器存储后端的默认实现使用git，所以它很容易支持标签版本的配置环境，以及用于管理内容的各种工具。添加替代实现并将它们与Spring配置一起插入是很容易的。</p>\n</blockquote>\n<ul>\n<li>官网-<a href=\"https://spring.io/projects/spring-cloud-config\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects/spring-cloud-config</a></li>\n</ul>\n<h2 id=\"Nacos-1\"><a href=\"#Nacos-1\" class=\"headerlink\" title=\"Nacos\"></a><code>Nacos</code></h2><p><a href=\"#Nacos\">站内地址</a></p>\n<h2 id=\"Zookeeper-1\"><a href=\"#Zookeeper-1\" class=\"headerlink\" title=\"Zookeeper\"></a><code>Zookeeper</code></h2><p><a href=\"#Zookeeper\">站内地址</a></p>\n<h1 id=\"服务调用（Service-Call）\"><a href=\"#服务调用（Service-Call）\" class=\"headerlink\" title=\"服务调用（Service Call）\"></a>服务调用（Service Call）</h1><h2 id=\"RestTemplate\"><a href=\"#RestTemplate\" class=\"headerlink\" title=\"RestTemplate\"></a><code>RestTemplate</code></h2><h2 id=\"Feign\"><a href=\"#Feign\" class=\"headerlink\" title=\"Feign\"></a><code>Feign</code></h2><h2 id=\"OpenFeign\"><a href=\"#OpenFeign\" class=\"headerlink\" title=\"OpenFeign\"></a><code>OpenFeign</code></h2><p>声明式、模板化的HTTP客户端</p>\n<h2 id=\"Spring-Cloud-OpenFeign\"><a href=\"#Spring-Cloud-OpenFeign\" class=\"headerlink\" title=\"Spring Cloud OpenFeign\"></a><code>Spring Cloud OpenFeign</code></h2><p>This project provides <a href=\"https://github.com/OpenFeign/feign\" target=\"_blank\" rel=\"noopener\">OpenFeign</a> integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms.</p>\n<blockquote>\n<p>该项目通过自动配置和绑定到Spring Environment和其他Spring编程模型习语，为Spring Boot应用程序提供OpenFeign集成。</p>\n</blockquote>\n<ul>\n<li>网址-<a href=\"https://spring.io/projects/spring-cloud-openfeign\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects/spring-cloud-openfeign</a></li>\n</ul>\n<h1 id=\"客户端负载均衡（Loading-blance）\"><a href=\"#客户端负载均衡（Loading-blance）\" class=\"headerlink\" title=\"客户端负载均衡（Loading blance）\"></a>客户端负载均衡（Loading blance）</h1><h2 id=\"Ribbon\"><a href=\"#Ribbon\" class=\"headerlink\" title=\"Ribbon\"></a><code>Ribbon</code></h2><p>客户端负载均衡</p>\n<p>Spring Cloud Netflix: Spring Cloud Netflix provides Netflix OSS integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms. With a few simple annotations you can quickly enable and configure the common patterns inside your application and build large distributed systems with battle-tested Netflix components. The patterns provided include Service Discovery (Eureka), Circuit Breaker (Hystrix), Intelligent Routing (Zuul) and Client Side Load Balancing (Ribbon)..</p>\n<blockquote>\n<p>Spring Cloud Netflix通过自动配置和绑定到Spring环境和其他Spring编程模型习语，为Spring Boot应用提供了Netflix OSS集成。通过一些简单的注释，您可以在应用程序中快速启用和配置通用模式，并使用经过战斗考验的Netflix组件构建大型分布式系统。提供的模式包括服务发现(Eureka)、断路器(Hystrix)、智能路由(Zuul)和客户端负载均衡(Ribbon)。</p>\n</blockquote>\n<ul>\n<li>网址-<a href=\"https://spring.io/projects/spring-cloud-netflix\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects/spring-cloud-netflix</a></li>\n</ul>\n<h1 id=\"断路器（Circit-Breakers）\"><a href=\"#断路器（Circit-Breakers）\" class=\"headerlink\" title=\"断路器（Circit Breakers）\"></a>断路器（Circit Breakers）</h1><h2 id=\"Hystrix（停止开发）\"><a href=\"#Hystrix（停止开发）\" class=\"headerlink\" title=\"Hystrix（停止开发）\"></a><code>Hystrix</code>（停止开发）</h2><p>在分布式系统中，服务与服务之间依赖错综复杂，一种不可避免的情况就是某些服务将会出现失败。Hystrix是一个库，它提供了服务与服务之间的容错功能，“容错”主要体现在延迟和异常上，从而做到控制分布式系统中的联动故障。Hystrix通过隔离服务的访问点，阻止联动故障，并提供故障的解决方案，从而提高了这个分布式系统的弹性。</p>\n<p>Spring Cloud Netflix: Spring Cloud Netflix provides Netflix OSS integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms. With a few simple annotations you can quickly enable and configure the common patterns inside your application and build large distributed systems with battle-tested Netflix components. The patterns provided include Service Discovery (Eureka), Circuit Breaker (Hystrix), Intelligent Routing (Zuul) and Client Side Load Balancing (Ribbon)..</p>\n<blockquote>\n<p>Spring Cloud Netflix通过自动配置和绑定到Spring环境和其他Spring编程模型习语，为Spring Boot应用提供了Netflix OSS集成。通过一些简单的注释，您可以在应用程序中快速启用和配置通用模式，并使用经过战斗考验的Netflix组件构建大型分布式系统。提供的模式包括服务发现(Eureka)、断路器(Hystrix)、智能路由(Zuul)和客户端负载均衡(Ribbon)。</p>\n</blockquote>\n<ul>\n<li>网址-<a href=\"https://spring.io/projects/spring-cloud-netflix\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects/spring-cloud-netflix</a></li>\n</ul>\n<h2 id=\"Sentinel\"><a href=\"#Sentinel\" class=\"headerlink\" title=\"Sentinel\"></a><code>Sentinel</code></h2><p>As distributed systems are becoming increasingly popular, the reliability between services is becoming more important than ever before. Sentinel is a powerful flow control component that takes “flow” as the breakthrough point and covers multiple fields including flow control, concurrency limiting, circuit breaking, and adaptive system protection to guarantee the reliability of microservices.</p>\n<blockquote>\n<p>随着分布式系统越来越受欢迎，服务之间的可靠性变得比以往任何时候都更加重要。Sentinel是一款功能强大的流量控制组件，以“流”为突破点，涵盖流量控制、并发限制、断路、自适应系统保护等多个领域，保证微服务的可靠性。</p>\n</blockquote>\n<ul>\n<li>源码地址-<a href=\"https://github.com/alibaba/Sentinel\" target=\"_blank\" rel=\"noopener\">GitHub - alibaba/Sentinel: A powerful flow control component enabling reliability, resilience and monitoring for microservices. (面向云原生微服务的高可用流控防护组件)</a></li>\n<li>官网地址-<a href=\"https://github.com/alibaba/Sentinel\" target=\"_blank\" rel=\"noopener\">GitHub - alibaba/Sentinel: A powerful flow control component enabling reliability, resilience and monitoring for microservices. (面向云原生微服务的高可用流控防护组件)</a></li>\n</ul>\n<p>二者的对比-<a href=\"https://github.com/alibaba/Sentinel/wiki/Sentinel-与-Hystrix-的对比\" target=\"_blank\" rel=\"noopener\">Sentinel 与 Hystrix 的对比 · alibaba/Sentinel Wiki · GitHub</a></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Sentinel</th>\n<th>Hystrix</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>隔离策略</td>\n<td>信号量隔离</td>\n<td>线程池隔离/信号量隔离</td>\n</tr>\n<tr>\n<td>熔断降级策略</td>\n<td>基于响应时间或失败比率</td>\n<td>基于失败比率</td>\n</tr>\n<tr>\n<td>实时指标实现</td>\n<td>滑动窗口</td>\n<td>滑动窗口（基于 RxJava）</td>\n</tr>\n<tr>\n<td>规则配置</td>\n<td>支持多种数据源</td>\n<td>支持多种数据源</td>\n</tr>\n<tr>\n<td>扩展性</td>\n<td>多个扩展点</td>\n<td>插件的形式</td>\n</tr>\n<tr>\n<td>基于注解的支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>限流</td>\n<td>基于 QPS，支持基于调用关系的限流</td>\n<td>有限的支持</td>\n</tr>\n<tr>\n<td>流量整形</td>\n<td>支持慢启动、匀速器模式</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>系统负载保护</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>控制台</td>\n<td>开箱即用，可配置规则、查看秒级监控、机器发现等</td>\n<td>不完善</td>\n</tr>\n<tr>\n<td>常见框架的适配</td>\n<td>Servlet、Spring Cloud、Dubbo、gRPC 等</td>\n<td>Servlet、Spring Cloud Netflix</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"分布式事务（Distributed-transaction）\"><a href=\"#分布式事务（Distributed-transaction）\" class=\"headerlink\" title=\"分布式事务（Distributed transaction）\"></a>分布式事务（Distributed transaction）</h1><h2 id=\"Seata\"><a href=\"#Seata\" class=\"headerlink\" title=\"Seata\"></a><code>Seata</code></h2><p>Seata 是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</p>\n<ul>\n<li>官网-<a href=\"https://seata.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://seata.io/zh-cn/</a></li>\n</ul>\n<h1 id=\"授权（authorization）\"><a href=\"#授权（authorization）\" class=\"headerlink\" title=\"授权（authorization）\"></a>授权（authorization）</h1><h2 id=\"Shiro\"><a href=\"#Shiro\" class=\"headerlink\" title=\"Shiro\"></a><code>Shiro</code></h2><p><strong>Apache Shiro™</strong> is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.</p>\n<blockquote>\n<p>Apache Shiro™是一个功能强大且易于使用的Java安全框架，可执行身份验证、授权、加密和会话管理。通过Shiro易于理解的API，您可以快速、轻松地保护任何应用程序——从最小的移动应用程序到最大的web和企业应用程序。</p>\n</blockquote>\n<ul>\n<li>官网-<a href=\"https://shiro.apache.org/\" target=\"_blank\" rel=\"noopener\">https://shiro.apache.org/</a></li>\n</ul>\n<h2 id=\"SpringSecurity\"><a href=\"#SpringSecurity\" class=\"headerlink\" title=\"SpringSecurity\"></a><code>SpringSecurity</code></h2><p>Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.</p>\n<p>Spring Security is a framework that focuses on providing both authentication and authorization to Java applications. Like all Spring projects, the real power of Spring Security is found in how easily it can be extended to meet custom requirements</p>\n<blockquote>\n<p>Spring Security是一个强大的、高度可定制的身份验证和访问控制框架。它是保护基于spring的应用程序的事实上的标准。</p>\n<p>Spring Security是一个专注于为Java应用程序提供身份验证和授权的框架。与所有Spring项目一样，Spring Security的真正强大之处在于它可以很容易地扩展以满足定制需求</p>\n</blockquote>\n<ul>\n<li>官网-<a href=\"https://spring.io/projects/spring-security\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects/spring-security</a></li>\n</ul>\n","next":{"title":"Spring底层核心原理","path":"api/articles/resource-Spring-Spring-Spring底层核心原理.json","image":"/img/header_img/spring/Principles.PNG","num_read":1432,"num_like":143,"num_collection":742,"num_comments":49},"prev":{"title":"白嫖网站记录","path":"api/articles/resource-tools-other-freeweb.json","image":"/img/header_img/tools/freeweb.jpg","num_read":1019,"num_like":960,"num_collection":170,"num_comments":140},"categories":[{"name":"微服务","path":"api/categories/微服务.json","pathContent":"api/categories/微服务","description":"一种云原生框架方法，其中单个应用程序由许多松散耦合且可独立部署的较小组件或服务组成","cover":"https://sunfy9.gitee.io/project/photo/project/MicroService.PNG"}],"tags":[]}