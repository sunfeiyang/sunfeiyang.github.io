{"title":"SQLSERVER数据库表锁","num_read":1125,"num_like":25,"num_collection":267,"num_comments":150,"slug":"resource-DB-SQLServer-数据库表锁","date":"2022-06-24T16:00:00.000Z","img":"/img/header_img/DB/tablelock.png","_id":"clhrbp2aw0023o5lga8e70y6i","project":"DB","subtitle":"固定服务器|数据库角色|设置示例","hot":"read","site":{"data":{}},"updated":"2022-08-05T04:18:28.000Z","comments":true,"path":"api/articles/resource-DB-SQLServer-数据库表锁.json","webPath":"2022/06/25/resource-DB-SQLServer-数据库表锁/","permalink":"https://sunfy9.gitee.io/2022/06/25/resource-DB-SQLServer-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E9%94%81/","excerpt":null,"covers":null,"keywords":"sunfy, hexo-theme-snail","content":"<h1 id=\"SQL-Server中的锁类型及用法\"><a href=\"#SQL-Server中的锁类型及用法\" class=\"headerlink\" title=\"SQL Server中的锁类型及用法\"></a><a href=\"https://www.cnblogs.com/PongorXi/archive/2011/05/18/2050131.html\" target=\"_blank\" rel=\"noopener\">SQL Server中的锁类型及用法</a></h1><h3 id=\"一-为什么要引入锁\"><a href=\"#一-为什么要引入锁\" class=\"headerlink\" title=\"一. 为什么要引入锁\"></a>一. 为什么要引入锁</h3><p>多个用户同时对数据库的并发操作时会带来以下数据不一致的问题: </p>\n<p><strong><em>丢失更新</em></strong><br>A,B两个用户读同一数据并进行修改,其中一个用户的修改结果破坏了另一个修改的结果,比如订票系统 </p>\n<p><strong><em>脏读</em></strong><br>A用户修改了数据,随后B用户又读出该数据,但A用户因为某些原因取消了对数据的修改,数据恢复原值,此时B得到的数据就与数据库内的数据产生了不一致 </p>\n<p><strong><em>不可重复读</em></strong><br>A用户读取数据,随后B用户读出该数据并修改,此时A用户再读取数据时发现前后两次的值不一致 </p>\n<p>并发控制的主要方法是封锁,锁就是在一段时间内禁止用户做某些操作以避免产生数据不一致 <sunfy-line></p>\n<h3 id=\"二-锁的分类\"><a href=\"#二-锁的分类\" class=\"headerlink\" title=\"二 锁的分类\"></a>二 锁的分类</h3><p>锁的类别有两种分法： </p>\n<ol>\n<li>从数据库系统的角度来看：分为独占锁（即排它锁），共享锁和更新锁 </li>\n</ol>\n<p><code>MS-SQL Server</code> 使用以下资源锁模式。 </p>\n<p><strong><em>锁模式描述</em></strong><br>共享 (S) </p>\n<p>​        用于不更改或不更新数据的操作（只读操作），如 SELECT 语句。<br>更新 (U)</p>\n<p>​        用于可更新的资源中。防止当多个会话在读取、锁定以及随后可能进行的资源更新时发生常见形式的死锁。<br>排它 (X) </p>\n<p>​        用于数据修改操作，例如 INSERT、UPDATE 或 DELETE。确保不会同时同一资源进行多重更新。<br>意向锁</p>\n<p>​        用于建立锁的层次结构。意向锁的类型为：意向共享 (IS)、意向排它 (IX) 以及与意向排它共享 (SIX)。<br>架构锁 在执行依赖于表架构的操作时使用。架构锁的类型为：架构修改 (Sch-M) 和架构稳定性 (Sch-S)。<br>大容量更新 (BU) 向表中大容量复制数据并指定了 TABLOCK 提示时使用。 </p>\n<p>共享锁 </p>\n<p>​        共享 (S) 锁允许并发事务读取 (SELECT) 一个资源。资源上存在共享 (S) 锁时，任何其它事务都不能修改数据。一旦已经读取数据，便立即释放资源上的共享 (S) 锁，除非将事务隔离级别设置为可重复读或更高级别，或者在事务生存周期内用锁定提示保留共享 (S) 锁。 </p>\n<p>更新锁</p>\n<p>​        更新 (U) 锁可以防止通常形式的死锁。一般更新模式由一个事务组成，此事务读取记录，获取资源（页或行）的共享 (S) 锁，然后修改行，此操作要求锁转换为排它 (X) 锁。如果两个事务获得了资源上的共享模式锁，然后试图同时更新数据，则一个事务尝试将锁转换为排它 (X) 锁。共享模式到排它锁的转换必须等待一段时间，因为一个事务的排它锁与其它事务的共享模式锁不兼容；发生锁等待。第二个事务试图获取排它 (X) 锁以进行更新。由于两个事务都要转换为排它 (X) 锁，并且每个事务都等待另一个事务释放共享模式锁，因此发生死锁。 </p>\n<p>若要避免这种潜在的死锁问题，请使用更新 (U) 锁。一次只有一个事务可以获得资源的更新 (U) 锁。如果事务修改资源，则更新 (U) 锁转换为排它 (X) 锁。否则，锁转换为共享锁。 </p>\n<p>排它锁 </p>\n<p>​        排它 (X) 锁可以防止并发事务对资源进行访问。其它事务不能读取或修改排它 (X) 锁锁定的数据。 </p>\n<p>意向锁</p>\n<p>​        意向锁表示 SQL Server 需要在层次结构中的某些底层资源上获取共享 (S) 锁或排它 (X) 锁。例如，放置在表级的共享意向锁表示事务打算在表中的页或行上放置共享 (S) 锁。在表级设置意向锁可防止另一个事务随后在包含那一页的表上获取排它 (X) 锁。意向锁可以提高性能，因为 SQL Server 仅在表级检查意向锁来确定事务是否可以安全地获取该表上的锁。而无须检查表中的每行或每页上的锁以确定事务是否可以锁定整个表。 </p>\n<p>意向锁包括意向共享 (IS)、意向排它 (IX) 以及与意向排它共享 (SIX)。 </p>\n<p>锁模式 描述<br>意向共享 (IS) 通过在各资源上放置 S 锁，表明事务的意向是读取层次结构中的部分（而不是全部）底层资源。<br>意向排它 (IX) 通过在各资源上放置 X 锁，表明事务的意向是修改层次结构中的部分（而不是全部）底层资源。IX 是 IS 的超集。<br>与意向排它共享 (SIX) 通过在各资源上放置 IX 锁，表明事务的意向是读取层次结构中的全部底层资源并修改部分（而不是全部）底层资源。允许顶层资源上的并发 IS 锁。例如，表的 SIX 锁在表上放置一个 SIX 锁（允许并发 IS 锁），在当前所修改页上放置 IX 锁（在已修改行上放置 X 锁）。虽然每个资源在一段时间内只能有一个 SIX 锁，以防止其它事务对资源进行更新，但是其它事务可以通过获取表级的 IS 锁来读取层次结构中的底层资源。 </p>\n<p>独占锁：只允许进行锁定操作的程序使用，其他任何对他的操作均不会被接受。执行数据更新命令时，SQL Server会自动使用独占锁。当对象上有其他锁存在时，无法对其加独占锁。<br>共享锁：共享锁锁定的资源可以被其他用户读取，但其他用户无法修改它，在执行Select时，SQL Server会对对象加共享锁。<br>更新锁：当SQL Server准备更新数据时，它首先对数据对象作更新锁锁定，这样数据将不能被修改，但可以读取。等到SQL Server确定要进行更新数据操作时，他会自动将更新锁换为独占锁，当对象上有其他锁存在时，无法对其加更新锁。 </p>\n<p>\\2. 从程序员的角度看：分为乐观锁和悲观锁。<br>乐观锁：完全依靠数据库来管理锁的工作。<br>悲观锁：程序员自己管理数据或对象上的锁处理。 </p>\n<p>MS-SQLSERVER 使用锁在多个同时在数据库内执行修改的用户间实现悲观并发控制 </p>\n<p>三 锁的粒度<br>锁粒度是被封锁目标的大小,封锁粒度小则并发性高,但开销大,封锁粒度大则并发性低但开销小 </p>\n<p>SQL Server支持的锁粒度可以分为为行、页、键、键范围、索引、表或数据库获取锁 </p>\n<p>资源 描述<br>RID 行标识符。用于单独锁定表中的一行。<br>键 索引中的行锁。用于保护可串行事务中的键范围。<br>页 8 千字节 (KB) 的数据页或索引页。<br>扩展盘区 相邻的八个数据页或索引页构成的一组。<br>表 包括所有数据和索引在内的整个表。<br>DB 数据库。 </p>\n<p>四 锁定时间的长短 </p>\n<p>锁保持的时间长度为保护所请求级别上的资源所需的时间长度。 </p>\n<p>用于保护读取操作的共享锁的保持时间取决于事务隔离级别。采用 READ COMMITTED 的默认事务隔离级别时，只在读取页的期间内控制共享锁。在扫描中，直到在扫描内的下一页上获取锁时才释放锁。如果指定 HOLDLOCK 提示或者将事务隔离级别设置为 REPEATABLE READ 或 SERIALIZABLE，则直到事务结束才释放锁。 </p>\n<p>根据为游标设置的并发选项，游标可以获取共享模式的滚动锁以保护提取。当需要滚动锁时，直到下一次提取或关闭游标（以先发生者为准）时才释放滚动锁。但是，如果指定 HOLDLOCK，则直到事务结束才释放滚动锁。 </p>\n<p>用于保护更新的排它锁将直到事务结束才释放。<br>如果一个连接试图获取一个锁，而该锁与另一个连接所控制的锁冲突，则试图获取锁的连接将一直阻塞到： </p>\n<p>将冲突锁释放而且连接获取了所请求的锁。 </p>\n<p>连接的超时间隔已到期。默认情况下没有超时间隔，但是一些应用程序设置超时间隔以防止无限期等待 </p>\n<p>五 SQL Server 中锁的自定义 </p>\n<p>1 处理死锁和设置死锁优先级 </p>\n<p>死锁就是多个用户申请不同封锁,由于申请者均拥有一部分封锁权而又等待其他用户拥有的部分封锁而引起的无休止的等待 </p>\n<p>可以使用SET DEADLOCK_PRIORITY控制在发生死锁情况时会话的反应方式。如果两个进程都锁定数据，并且直到其它进程释放自己的锁时，每个进程才能释放自己的锁，即发生死锁情况。 </p>\n<p>2 处理超时和设置锁超时持续时间。 </p>\n<p>@@LOCK_TIMEOUT 返回当前会话的当前锁超时设置，单位为毫秒 </p>\n<p>SET LOCK_TIMEOUT 设置允许应用程序设置语句等待阻塞资源的最长时间。当语句等待的时间大于 LOCK_TIMEOUT 设置时，系统将自动取消阻塞的语句，并给应用程序返回”已超过了锁请求超时时段”的 1222 号错误信息 </p>\n<p>示例<br>下例将锁超时期限设置为 1,800 毫秒。<br>SET LOCK_TIMEOUT 1800 </p>\n<p>3) 设置事务隔离级别。 </p>\n<p>4 ) 对 SELECT、INSERT、UPDATE 和 DELETE 语句使用表级锁定提示。 </p>\n<p>5) 配置索引的锁定粒度<br>可以使用 sp_indexoption 系统存储过程来设置用于索引的锁定粒度 </p>\n<p>六 查看锁的信息 </p>\n<p>1 执行 EXEC SP_LOCK 报告有关锁的信息<br>2 查询分析器中按Ctrl+2可以看到锁的信息 </p>\n<p>七 使用注意事项 </p>\n<p>如何避免死锁<br>1 使用事务时，尽量缩短事务的逻辑处理过程，及早提交或回滚事务；<br>2 设置死锁超时参数为合理范围，如：3分钟-10分种；超过时间，自动放弃本次操作，避免进程悬挂；<br>3 优化程序，检查并避免死锁现象出现；<br>4 .对所有的脚本和SP都要仔细测试，在正是版本之前。<br>5 所有的SP都要有错误处理（通过@error）<br>6 一般不要修改SQL SERVER事务的默认级别。不推荐强行加锁 </p>\n<p>解决问题 如何对行 表 数据库加锁 </p>\n<p>八 几个有关锁的问题 </p>\n<p>1 如何锁一个表的某一行 </p>\n<p>SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED </p>\n<p>SELECT * FROM table ROWLOCK WHERE id = 1 </p>\n<p>2 锁定数据库的一个表 </p>\n<p>SELECT * FROM table WITH (HOLDLOCK) </p>\n<p>加锁语句：<br>sybase:<br>update 表 set col1=col1 where 1=0 ;<br>MSSQL:<br>select col1 from 表 (tablockx) where 1=0 ;<br>oracle:<br>LOCK TABLE 表 IN EXCLUSIVE MODE ；<br>加锁后其它人不可操作，直到加锁用户解锁，用commit或rollback解锁 </p>\n<p>几个例子帮助大家加深印象<br>设table1(A,B,C)<br>A B C<br>a1 b1 c1<br>a2 b2 c2<br>a3 b3 c3 </p>\n<p>1）排它锁<br>新建两个连接<br>在第一个连接中执行以下语句<br>begin tran<br>update table1<br>set A=’aa’<br>where B=’b2’<br>waitfor delay ‘00:00:30’ —等待30秒<br>commit tran<br>在第二个连接中执行以下语句<br>begin tran<br>select * from table1<br>where B=’b2’<br>commit tran </p>\n<p>若同时执行上述两个语句，则select查询必须等待update执行完毕才能执行即要等待30秒 </p>\n<p>2）共享锁<br>在第一个连接中执行以下语句<br>begin tran<br>select * from table1 holdlock -holdlock人为加锁<br>where B=’b2’<br>waitfor delay ‘00:00:30’ —等待30秒<br>commit tran </p>\n<p>在第二个连接中执行以下语句<br>begin tran<br>select A,C from table1<br>where B=’b2’<br>update table1<br>set A=’aa’<br>where B=’b2’<br>commit tran </p>\n<p>若同时执行上述两个语句，则第二个连接中的select查询可以执行<br>而update必须等待第一个事务释放共享锁转为排它锁后才能执行 即要等待30秒 </p>\n<p>3）死锁<br>增设table2(D,E)<br>D E<br>d1 e1<br>d2 e2<br>在第一个连接中执行以下语句<br>begin tran<br>update table1<br>set A=’aa’<br>where B=’b2’<br>waitfor delay ‘00:00:30’<br>update table2<br>set D=’d5’<br>where E=’e1’<br>commit tran </p>\n<p>在第二个连接中执行以下语句<br>begin tran<br>update table2<br>set D=’d5’<br>where E=’e1’<br>waitfor delay ‘00:00:10’<br>update table1<br>set A=’aa’<br>where B=’b2’<br>commit tran </p>\n<p>同时执行，系统会检测出死锁，并中止进程 </p>\n<p>补充一点:<br>Sql Server2000支持的表级锁定提示 </p>\n<p>HOLDLOCK 持有共享锁，直到整个事务完成，应该在被锁对象不需要时立即释放，等于SERIALIZABLE事务隔离级别 </p>\n<p>NOLOCK 语句执行时不发出共享锁，允许脏读 ，等于 READ UNCOMMITTED事务隔离级别 </p>\n<p>PAGLOCK 在使用一个表锁的地方用多个页锁 </p>\n<p>READPAST 让sql server跳过任何锁定行，执行事务，适用于READ UNCOMMITTED事务隔离级别只跳过RID锁，不跳过页，区域和表锁 </p>\n<p>ROWLOCK 强制使用行锁 </p>\n<p>TABLOCKX 强制使用独占表级锁，这个锁在事务期间阻止任何其他事务使用这个表 </p>\n<p>UPLOCK 强制在读表时使用更新而不用共享锁 </p>\n<p>应用程序锁:<br>应用程序锁就是客户端代码生成的锁，而不是sql server本身生成的锁 </p>\n<p>处理应用程序锁的两个过程 </p>\n<p>sp_getapplock 锁定应用程序资源 </p>\n<p>sp_releaseapplock 为应用程序资源解锁 </p>\n<p>注意: 锁定数据库的一个表的区别 </p>\n<p>SELECT * FROM table WITH (HOLDLOCK) 其他事务可以读取表，但不能更新删除 </p>\n<p>SELECT * FROM table WITH (TABLOCKX) 其他事务不能读取表,更新和删除</p>\n","more":"<h1 id=\"SQL-Server中的锁类型及用法\"><a href=\"#SQL-Server中的锁类型及用法\" class=\"headerlink\" title=\"SQL Server中的锁类型及用法\"></a><a href=\"https://www.cnblogs.com/PongorXi/archive/2011/05/18/2050131.html\" target=\"_blank\" rel=\"noopener\">SQL Server中的锁类型及用法</a></h1><h3 id=\"一-为什么要引入锁\"><a href=\"#一-为什么要引入锁\" class=\"headerlink\" title=\"一. 为什么要引入锁\"></a>一. 为什么要引入锁</h3><p>多个用户同时对数据库的并发操作时会带来以下数据不一致的问题: </p>\n<p><strong><em>丢失更新</em></strong><br>A,B两个用户读同一数据并进行修改,其中一个用户的修改结果破坏了另一个修改的结果,比如订票系统 </p>\n<p><strong><em>脏读</em></strong><br>A用户修改了数据,随后B用户又读出该数据,但A用户因为某些原因取消了对数据的修改,数据恢复原值,此时B得到的数据就与数据库内的数据产生了不一致 </p>\n<p><strong><em>不可重复读</em></strong><br>A用户读取数据,随后B用户读出该数据并修改,此时A用户再读取数据时发现前后两次的值不一致 </p>\n<p>并发控制的主要方法是封锁,锁就是在一段时间内禁止用户做某些操作以避免产生数据不一致 <sunfy-line></p>\n<h3 id=\"二-锁的分类\"><a href=\"#二-锁的分类\" class=\"headerlink\" title=\"二 锁的分类\"></a>二 锁的分类</h3><p>锁的类别有两种分法： </p>\n<ol>\n<li>从数据库系统的角度来看：分为独占锁（即排它锁），共享锁和更新锁 </li>\n</ol>\n<p><code>MS-SQL Server</code> 使用以下资源锁模式。 </p>\n<p><strong><em>锁模式描述</em></strong><br>共享 (S) </p>\n<p>​        用于不更改或不更新数据的操作（只读操作），如 SELECT 语句。<br>更新 (U)</p>\n<p>​        用于可更新的资源中。防止当多个会话在读取、锁定以及随后可能进行的资源更新时发生常见形式的死锁。<br>排它 (X) </p>\n<p>​        用于数据修改操作，例如 INSERT、UPDATE 或 DELETE。确保不会同时同一资源进行多重更新。<br>意向锁</p>\n<p>​        用于建立锁的层次结构。意向锁的类型为：意向共享 (IS)、意向排它 (IX) 以及与意向排它共享 (SIX)。<br>架构锁 在执行依赖于表架构的操作时使用。架构锁的类型为：架构修改 (Sch-M) 和架构稳定性 (Sch-S)。<br>大容量更新 (BU) 向表中大容量复制数据并指定了 TABLOCK 提示时使用。 </p>\n<p>共享锁 </p>\n<p>​        共享 (S) 锁允许并发事务读取 (SELECT) 一个资源。资源上存在共享 (S) 锁时，任何其它事务都不能修改数据。一旦已经读取数据，便立即释放资源上的共享 (S) 锁，除非将事务隔离级别设置为可重复读或更高级别，或者在事务生存周期内用锁定提示保留共享 (S) 锁。 </p>\n<p>更新锁</p>\n<p>​        更新 (U) 锁可以防止通常形式的死锁。一般更新模式由一个事务组成，此事务读取记录，获取资源（页或行）的共享 (S) 锁，然后修改行，此操作要求锁转换为排它 (X) 锁。如果两个事务获得了资源上的共享模式锁，然后试图同时更新数据，则一个事务尝试将锁转换为排它 (X) 锁。共享模式到排它锁的转换必须等待一段时间，因为一个事务的排它锁与其它事务的共享模式锁不兼容；发生锁等待。第二个事务试图获取排它 (X) 锁以进行更新。由于两个事务都要转换为排它 (X) 锁，并且每个事务都等待另一个事务释放共享模式锁，因此发生死锁。 </p>\n<p>若要避免这种潜在的死锁问题，请使用更新 (U) 锁。一次只有一个事务可以获得资源的更新 (U) 锁。如果事务修改资源，则更新 (U) 锁转换为排它 (X) 锁。否则，锁转换为共享锁。 </p>\n<p>排它锁 </p>\n<p>​        排它 (X) 锁可以防止并发事务对资源进行访问。其它事务不能读取或修改排它 (X) 锁锁定的数据。 </p>\n<p>意向锁</p>\n<p>​        意向锁表示 SQL Server 需要在层次结构中的某些底层资源上获取共享 (S) 锁或排它 (X) 锁。例如，放置在表级的共享意向锁表示事务打算在表中的页或行上放置共享 (S) 锁。在表级设置意向锁可防止另一个事务随后在包含那一页的表上获取排它 (X) 锁。意向锁可以提高性能，因为 SQL Server 仅在表级检查意向锁来确定事务是否可以安全地获取该表上的锁。而无须检查表中的每行或每页上的锁以确定事务是否可以锁定整个表。 </p>\n<p>意向锁包括意向共享 (IS)、意向排它 (IX) 以及与意向排它共享 (SIX)。 </p>\n<p>锁模式 描述<br>意向共享 (IS) 通过在各资源上放置 S 锁，表明事务的意向是读取层次结构中的部分（而不是全部）底层资源。<br>意向排它 (IX) 通过在各资源上放置 X 锁，表明事务的意向是修改层次结构中的部分（而不是全部）底层资源。IX 是 IS 的超集。<br>与意向排它共享 (SIX) 通过在各资源上放置 IX 锁，表明事务的意向是读取层次结构中的全部底层资源并修改部分（而不是全部）底层资源。允许顶层资源上的并发 IS 锁。例如，表的 SIX 锁在表上放置一个 SIX 锁（允许并发 IS 锁），在当前所修改页上放置 IX 锁（在已修改行上放置 X 锁）。虽然每个资源在一段时间内只能有一个 SIX 锁，以防止其它事务对资源进行更新，但是其它事务可以通过获取表级的 IS 锁来读取层次结构中的底层资源。 </p>\n<p>独占锁：只允许进行锁定操作的程序使用，其他任何对他的操作均不会被接受。执行数据更新命令时，SQL Server会自动使用独占锁。当对象上有其他锁存在时，无法对其加独占锁。<br>共享锁：共享锁锁定的资源可以被其他用户读取，但其他用户无法修改它，在执行Select时，SQL Server会对对象加共享锁。<br>更新锁：当SQL Server准备更新数据时，它首先对数据对象作更新锁锁定，这样数据将不能被修改，但可以读取。等到SQL Server确定要进行更新数据操作时，他会自动将更新锁换为独占锁，当对象上有其他锁存在时，无法对其加更新锁。 </p>\n<p>\\2. 从程序员的角度看：分为乐观锁和悲观锁。<br>乐观锁：完全依靠数据库来管理锁的工作。<br>悲观锁：程序员自己管理数据或对象上的锁处理。 </p>\n<p>MS-SQLSERVER 使用锁在多个同时在数据库内执行修改的用户间实现悲观并发控制 </p>\n<p>三 锁的粒度<br>锁粒度是被封锁目标的大小,封锁粒度小则并发性高,但开销大,封锁粒度大则并发性低但开销小 </p>\n<p>SQL Server支持的锁粒度可以分为为行、页、键、键范围、索引、表或数据库获取锁 </p>\n<p>资源 描述<br>RID 行标识符。用于单独锁定表中的一行。<br>键 索引中的行锁。用于保护可串行事务中的键范围。<br>页 8 千字节 (KB) 的数据页或索引页。<br>扩展盘区 相邻的八个数据页或索引页构成的一组。<br>表 包括所有数据和索引在内的整个表。<br>DB 数据库。 </p>\n<p>四 锁定时间的长短 </p>\n<p>锁保持的时间长度为保护所请求级别上的资源所需的时间长度。 </p>\n<p>用于保护读取操作的共享锁的保持时间取决于事务隔离级别。采用 READ COMMITTED 的默认事务隔离级别时，只在读取页的期间内控制共享锁。在扫描中，直到在扫描内的下一页上获取锁时才释放锁。如果指定 HOLDLOCK 提示或者将事务隔离级别设置为 REPEATABLE READ 或 SERIALIZABLE，则直到事务结束才释放锁。 </p>\n<p>根据为游标设置的并发选项，游标可以获取共享模式的滚动锁以保护提取。当需要滚动锁时，直到下一次提取或关闭游标（以先发生者为准）时才释放滚动锁。但是，如果指定 HOLDLOCK，则直到事务结束才释放滚动锁。 </p>\n<p>用于保护更新的排它锁将直到事务结束才释放。<br>如果一个连接试图获取一个锁，而该锁与另一个连接所控制的锁冲突，则试图获取锁的连接将一直阻塞到： </p>\n<p>将冲突锁释放而且连接获取了所请求的锁。 </p>\n<p>连接的超时间隔已到期。默认情况下没有超时间隔，但是一些应用程序设置超时间隔以防止无限期等待 </p>\n<p>五 SQL Server 中锁的自定义 </p>\n<p>1 处理死锁和设置死锁优先级 </p>\n<p>死锁就是多个用户申请不同封锁,由于申请者均拥有一部分封锁权而又等待其他用户拥有的部分封锁而引起的无休止的等待 </p>\n<p>可以使用SET DEADLOCK_PRIORITY控制在发生死锁情况时会话的反应方式。如果两个进程都锁定数据，并且直到其它进程释放自己的锁时，每个进程才能释放自己的锁，即发生死锁情况。 </p>\n<p>2 处理超时和设置锁超时持续时间。 </p>\n<p>@@LOCK_TIMEOUT 返回当前会话的当前锁超时设置，单位为毫秒 </p>\n<p>SET LOCK_TIMEOUT 设置允许应用程序设置语句等待阻塞资源的最长时间。当语句等待的时间大于 LOCK_TIMEOUT 设置时，系统将自动取消阻塞的语句，并给应用程序返回”已超过了锁请求超时时段”的 1222 号错误信息 </p>\n<p>示例<br>下例将锁超时期限设置为 1,800 毫秒。<br>SET LOCK_TIMEOUT 1800 </p>\n<p>3) 设置事务隔离级别。 </p>\n<p>4 ) 对 SELECT、INSERT、UPDATE 和 DELETE 语句使用表级锁定提示。 </p>\n<p>5) 配置索引的锁定粒度<br>可以使用 sp_indexoption 系统存储过程来设置用于索引的锁定粒度 </p>\n<p>六 查看锁的信息 </p>\n<p>1 执行 EXEC SP_LOCK 报告有关锁的信息<br>2 查询分析器中按Ctrl+2可以看到锁的信息 </p>\n<p>七 使用注意事项 </p>\n<p>如何避免死锁<br>1 使用事务时，尽量缩短事务的逻辑处理过程，及早提交或回滚事务；<br>2 设置死锁超时参数为合理范围，如：3分钟-10分种；超过时间，自动放弃本次操作，避免进程悬挂；<br>3 优化程序，检查并避免死锁现象出现；<br>4 .对所有的脚本和SP都要仔细测试，在正是版本之前。<br>5 所有的SP都要有错误处理（通过@error）<br>6 一般不要修改SQL SERVER事务的默认级别。不推荐强行加锁 </p>\n<p>解决问题 如何对行 表 数据库加锁 </p>\n<p>八 几个有关锁的问题 </p>\n<p>1 如何锁一个表的某一行 </p>\n<p>SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED </p>\n<p>SELECT * FROM table ROWLOCK WHERE id = 1 </p>\n<p>2 锁定数据库的一个表 </p>\n<p>SELECT * FROM table WITH (HOLDLOCK) </p>\n<p>加锁语句：<br>sybase:<br>update 表 set col1=col1 where 1=0 ;<br>MSSQL:<br>select col1 from 表 (tablockx) where 1=0 ;<br>oracle:<br>LOCK TABLE 表 IN EXCLUSIVE MODE ；<br>加锁后其它人不可操作，直到加锁用户解锁，用commit或rollback解锁 </p>\n<p>几个例子帮助大家加深印象<br>设table1(A,B,C)<br>A B C<br>a1 b1 c1<br>a2 b2 c2<br>a3 b3 c3 </p>\n<p>1）排它锁<br>新建两个连接<br>在第一个连接中执行以下语句<br>begin tran<br>update table1<br>set A=’aa’<br>where B=’b2’<br>waitfor delay ‘00:00:30’ —等待30秒<br>commit tran<br>在第二个连接中执行以下语句<br>begin tran<br>select * from table1<br>where B=’b2’<br>commit tran </p>\n<p>若同时执行上述两个语句，则select查询必须等待update执行完毕才能执行即要等待30秒 </p>\n<p>2）共享锁<br>在第一个连接中执行以下语句<br>begin tran<br>select * from table1 holdlock -holdlock人为加锁<br>where B=’b2’<br>waitfor delay ‘00:00:30’ —等待30秒<br>commit tran </p>\n<p>在第二个连接中执行以下语句<br>begin tran<br>select A,C from table1<br>where B=’b2’<br>update table1<br>set A=’aa’<br>where B=’b2’<br>commit tran </p>\n<p>若同时执行上述两个语句，则第二个连接中的select查询可以执行<br>而update必须等待第一个事务释放共享锁转为排它锁后才能执行 即要等待30秒 </p>\n<p>3）死锁<br>增设table2(D,E)<br>D E<br>d1 e1<br>d2 e2<br>在第一个连接中执行以下语句<br>begin tran<br>update table1<br>set A=’aa’<br>where B=’b2’<br>waitfor delay ‘00:00:30’<br>update table2<br>set D=’d5’<br>where E=’e1’<br>commit tran </p>\n<p>在第二个连接中执行以下语句<br>begin tran<br>update table2<br>set D=’d5’<br>where E=’e1’<br>waitfor delay ‘00:00:10’<br>update table1<br>set A=’aa’<br>where B=’b2’<br>commit tran </p>\n<p>同时执行，系统会检测出死锁，并中止进程 </p>\n<p>补充一点:<br>Sql Server2000支持的表级锁定提示 </p>\n<p>HOLDLOCK 持有共享锁，直到整个事务完成，应该在被锁对象不需要时立即释放，等于SERIALIZABLE事务隔离级别 </p>\n<p>NOLOCK 语句执行时不发出共享锁，允许脏读 ，等于 READ UNCOMMITTED事务隔离级别 </p>\n<p>PAGLOCK 在使用一个表锁的地方用多个页锁 </p>\n<p>READPAST 让sql server跳过任何锁定行，执行事务，适用于READ UNCOMMITTED事务隔离级别只跳过RID锁，不跳过页，区域和表锁 </p>\n<p>ROWLOCK 强制使用行锁 </p>\n<p>TABLOCKX 强制使用独占表级锁，这个锁在事务期间阻止任何其他事务使用这个表 </p>\n<p>UPLOCK 强制在读表时使用更新而不用共享锁 </p>\n<p>应用程序锁:<br>应用程序锁就是客户端代码生成的锁，而不是sql server本身生成的锁 </p>\n<p>处理应用程序锁的两个过程 </p>\n<p>sp_getapplock 锁定应用程序资源 </p>\n<p>sp_releaseapplock 为应用程序资源解锁 </p>\n<p>注意: 锁定数据库的一个表的区别 </p>\n<p>SELECT * FROM table WITH (HOLDLOCK) 其他事务可以读取表，但不能更新删除 </p>\n<p>SELECT * FROM table WITH (TABLOCKX) 其他事务不能读取表,更新和删除</p>\n","next":{"title":"SQLSERVER数据库索引","path":"api/articles/resource-DB-SQLServer-索引.json","image":"/img/header_img/DB/sqlserverIndex.png","num_read":216,"num_like":783,"num_collection":169,"num_comments":53},"prev":{"title":"java技术栈","path":"api/articles/resource-java-Base-java技术栈.json","image":"/img/header_img/java/java.png","num_read":426,"num_like":720,"num_collection":494,"num_comments":99},"categories":[{"name":"数据库","path":"api/categories/数据库.json","pathContent":"api/categories/数据库","description":"结构化存储格式+事务和并发控制+内存管理+SQL访问接口","cover":"https://sunfy9.gitee.io/project/photo/project/db.jpg"}],"tags":[{"name":"sqlServer","path":"api/tags/sqlServer.json","pathContent":"api/tags/sqlServer","description":"[sqlServer]暂未设置说明","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"}]}