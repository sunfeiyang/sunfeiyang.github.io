{"title":"vue解决跨域问题","num_read":1616,"num_like":191,"num_collection":187,"num_comments":115,"slug":"resource-desk-vue-vue解决跨域问题","date":"2021-07-17T16:00:00.000Z","img":"/img/header_img/desk/vue.gif","_id":"clhrbp2cm005to5lgdj1s1y9i","project":"desk","subtitle":"浏览器的同源策略问题","site":{"data":{}},"updated":"2022-09-20T01:39:44.951Z","author":"Sunfy","comments":true,"path":"api/articles/resource-desk-vue-vue解决跨域问题.json","webPath":"2021/07/18/resource-desk-vue-vue解决跨域问题/","permalink":"https://sunfy9.gitee.io/2021/07/18/resource-desk-vue-vue%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/","excerpt":"vue解决跨域问题","covers":["../../../../img/vue解决跨域问题/1649717-20200227142258131-1409861315.png","../../../../img/vue解决跨域问题/1649717-20200227144905470-1085262547.png","../../../../img/vue解决跨域问题/1649717-20200227145106938-1311841373.png","../../../../img/vue解决跨域问题/1649717-20200227151147818-885350634.png"],"keywords":"sunfy, hexo-theme-snail","content":"<p>vue解决跨域问题<a id=\"more\"></a></p>\n<h3 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h3><p>　　跨域问题的出现是因为浏览器的同源策略问题，所谓同源:就是两个页面具有相同的协议（protocol），主机（host）和端口号（port），它是浏览器最核心也是最基本的功能，如果没有同源策略我们的浏览器将会十分的不安全，随时都可能受到攻击。</p>\n<p>当我们请求一个接口的时候，出现如：Access-Control-Allow-Origin 字眼的时候说明请求跨域了</p>\n<p><img src=\"../../../../img/vue解决跨域问题/1649717-20200227142258131-1409861315.png\" alt=\"img\"></p>\n<h3 id=\"如何解决跨域问题\"><a href=\"#如何解决跨域问题\" class=\"headerlink\" title=\"如何解决跨域问题\"></a>如何解决跨域问题</h3><p>　　1.使用jsonp实现，网页通过script标签向服务器请求json数据，服务器受到请求后，将数据放在一个指定名字的回调函数的参数里面传给前端。<sunfy-line></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"http://www.test.com/getData?callback=getData\"</span>&gt;&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 向服务器test.com发出请求，该请求的查询字符串有一个callback参数，用来指定回调函数的名字</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 处理服务器返回回调函数的数据</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script type=\"text/</span>javascript<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">    // 服务器返回的数据会放到回调函数里面</span></span><br><span class=\"line\"><span class=\"string\">    function getData(res)&#123;</span></span><br><span class=\"line\"><span class=\"string\">        // 处理获得的数据</span></span><br><span class=\"line\"><span class=\"string\">        console.log(res.data)</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　2.使用Jquery ajax实现，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  url: <span class=\"string\">'http://www.test.com:8888/getData'</span>,</span><br><span class=\"line\">  type: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">  dataType: <span class=\"string\">'jsonp'</span>,  <span class=\"comment\">// 请求方式为jsonp</span></span><br><span class=\"line\">  jsonpCallback: <span class=\"string\">\"handleCallback\"</span>,    <span class=\"comment\">// 自定义回调函数名</span></span><br><span class=\"line\">  data: &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>　　3.在vue开发中实现跨域：在vue项目根目录下找到vue.config.js文件（如果没有该文件则自己创建），在proxy中设置跨域</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">   proxy: &#123;  <span class=\"comment\">//配置跨域</span></span><br><span class=\"line\">     <span class=\"string\">'/api'</span>: &#123;</span><br><span class=\"line\">       target: <span class=\"string\">'http://121.121.67.254:8185/'</span>,  <span class=\"comment\">//这里后台的地址模拟的;应该填写你们真实的后台接口</span></span><br><span class=\"line\">       changOrigin: <span class=\"literal\">true</span>,  <span class=\"comment\">//允许跨域</span></span><br><span class=\"line\">       pathRewrite: &#123;</span><br><span class=\"line\">         <span class=\"comment\">/* 重写路径，当我们在浏览器中看到请求的地址为：http://localhost:8080/api/core/getData/userInfo 时</span></span><br><span class=\"line\"><span class=\"comment\">           实际上访问的地址是：http://121.121.67.254:8185/core/getData/userInfo,因为重写了 /api</span></span><br><span class=\"line\"><span class=\"comment\">          */</span></span><br><span class=\"line\">         <span class=\"string\">'^/api'</span>: <span class=\"string\">''</span> </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n<p>　　<strong>在vue中使用proxy进行跨域的原理是：将域名发送给本地的服务器（启动vue项目的服务,loclahost:8080），再由本地的服务器去请求真正的服务器。</strong></p>\n<p>　　以下是我在开发vue项目中实现跨域的步骤：</p>\n<p>　　1.在proxy中设置要访问的地址，并重写/api为空的字符串，因为我们真正请求的地址是没有带/api，这个重写很重要!!!</p>\n<p>　　<img src=\"../../../../img/vue解决跨域问题/1649717-20200227144905470-1085262547.png\" alt=\"img\"></p>\n<p> 　2.在创建axios实例的时候将baseURL设置为/api ,这时候我们的跨域就已经完成了。</p>\n<p>　　<img src=\"../../../../img/vue解决跨域问题/1649717-20200227145106938-1311841373.png\" alt=\"img\"></p>\n<p> 　3. 假如请求的真正地址为：<a href=\"http://121.121.67.254:8185/core/getdata/userInfo,但我们在浏览器上会看到是这样的：\" target=\"_blank\" rel=\"noopener\">http://121.121.67.254:8185/core/getdata/userInfo,但我们在浏览器上会看到是这样的：</a> <a href=\"http://localhost:8080/api/core/getData/userInfo\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/api/core/getData/userInfo</a> ,多了个/api，但并不影响我们请求数据。</p>\n<p>　　<img src=\"../../../../img/vue解决跨域问题/1649717-20200227151147818-885350634.png\" alt=\"img\"></p>\n","more":"</p>\n<h3 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h3><p>　　跨域问题的出现是因为浏览器的同源策略问题，所谓同源:就是两个页面具有相同的协议（protocol），主机（host）和端口号（port），它是浏览器最核心也是最基本的功能，如果没有同源策略我们的浏览器将会十分的不安全，随时都可能受到攻击。</p>\n<p>当我们请求一个接口的时候，出现如：Access-Control-Allow-Origin 字眼的时候说明请求跨域了</p>\n<p><img src=\"../../../../img/vue解决跨域问题/1649717-20200227142258131-1409861315.png\" alt=\"img\"></p>\n<h3 id=\"如何解决跨域问题\"><a href=\"#如何解决跨域问题\" class=\"headerlink\" title=\"如何解决跨域问题\"></a>如何解决跨域问题</h3><p>　　1.使用jsonp实现，网页通过script标签向服务器请求json数据，服务器受到请求后，将数据放在一个指定名字的回调函数的参数里面传给前端。<sunfy-line></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"http://www.test.com/getData?callback=getData\"</span>&gt;&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 向服务器test.com发出请求，该请求的查询字符串有一个callback参数，用来指定回调函数的名字</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 处理服务器返回回调函数的数据</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script type=\"text/</span>javascript<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">    // 服务器返回的数据会放到回调函数里面</span></span><br><span class=\"line\"><span class=\"string\">    function getData(res)&#123;</span></span><br><span class=\"line\"><span class=\"string\">        // 处理获得的数据</span></span><br><span class=\"line\"><span class=\"string\">        console.log(res.data)</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>　　2.使用Jquery ajax实现，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  url: <span class=\"string\">'http://www.test.com:8888/getData'</span>,</span><br><span class=\"line\">  type: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">  dataType: <span class=\"string\">'jsonp'</span>,  <span class=\"comment\">// 请求方式为jsonp</span></span><br><span class=\"line\">  jsonpCallback: <span class=\"string\">\"handleCallback\"</span>,    <span class=\"comment\">// 自定义回调函数名</span></span><br><span class=\"line\">  data: &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>　　3.在vue开发中实现跨域：在vue项目根目录下找到vue.config.js文件（如果没有该文件则自己创建），在proxy中设置跨域</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">   proxy: &#123;  <span class=\"comment\">//配置跨域</span></span><br><span class=\"line\">     <span class=\"string\">'/api'</span>: &#123;</span><br><span class=\"line\">       target: <span class=\"string\">'http://121.121.67.254:8185/'</span>,  <span class=\"comment\">//这里后台的地址模拟的;应该填写你们真实的后台接口</span></span><br><span class=\"line\">       changOrigin: <span class=\"literal\">true</span>,  <span class=\"comment\">//允许跨域</span></span><br><span class=\"line\">       pathRewrite: &#123;</span><br><span class=\"line\">         <span class=\"comment\">/* 重写路径，当我们在浏览器中看到请求的地址为：http://localhost:8080/api/core/getData/userInfo 时</span></span><br><span class=\"line\"><span class=\"comment\">           实际上访问的地址是：http://121.121.67.254:8185/core/getData/userInfo,因为重写了 /api</span></span><br><span class=\"line\"><span class=\"comment\">          */</span></span><br><span class=\"line\">         <span class=\"string\">'^/api'</span>: <span class=\"string\">''</span> </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n<p>　　<strong>在vue中使用proxy进行跨域的原理是：将域名发送给本地的服务器（启动vue项目的服务,loclahost:8080），再由本地的服务器去请求真正的服务器。</strong></p>\n<p>　　以下是我在开发vue项目中实现跨域的步骤：</p>\n<p>　　1.在proxy中设置要访问的地址，并重写/api为空的字符串，因为我们真正请求的地址是没有带/api，这个重写很重要!!!</p>\n<p>　　<img src=\"../../../../img/vue解决跨域问题/1649717-20200227144905470-1085262547.png\" alt=\"img\"></p>\n<p> 　2.在创建axios实例的时候将baseURL设置为/api ,这时候我们的跨域就已经完成了。</p>\n<p>　　<img src=\"../../../../img/vue解决跨域问题/1649717-20200227145106938-1311841373.png\" alt=\"img\"></p>\n<p> 　3. 假如请求的真正地址为：<a href=\"http://121.121.67.254:8185/core/getdata/userInfo,但我们在浏览器上会看到是这样的：\" target=\"_blank\" rel=\"noopener\">http://121.121.67.254:8185/core/getdata/userInfo,但我们在浏览器上会看到是这样的：</a> <a href=\"http://localhost:8080/api/core/getData/userInfo\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/api/core/getData/userInfo</a> ,多了个/api，但并不影响我们请求数据。</p>\n<p>　　<img src=\"../../../../img/vue解决跨域问题/1649717-20200227151147818-885350634.png\" alt=\"img\"></p>","next":{"title":"Java面试题004-JVM中的共享区，哪些可以作为GC ROOT？","path":"api/articles/resource-java-Base-004JVM-gc.json","image":"/img/header_img/4.jpg","num_read":1011,"num_like":898,"num_collection":668,"num_comments":174},"prev":{"title":"面试题-如何回答好Linux常用命令","path":"api/articles/resource-system-Linux-005LinuxCommand.json","image":"/img/header_img/11.jpg","num_read":1180,"num_like":172,"num_collection":594,"num_comments":169},"categories":[{"name":"前端","path":"api/categories/前端.json","pathContent":"api/categories/前端","description":"包含vue、npm、html、Angular、js等相关","cover":"https://sunfy9.gitee.io/project/photo/project/desk.jpg"}],"tags":[{"name":"vue","path":"api/tags/vue.json","pathContent":"api/tags/vue","description":"[vue]暂未设置说明","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"}]}