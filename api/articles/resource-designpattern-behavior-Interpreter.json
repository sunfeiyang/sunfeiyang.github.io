{"title":"java设计模式之解释器模式","num_read":97,"num_like":754,"num_collection":315,"num_comments":29,"slug":"resource-designpattern-behavior-Interpreter","date":"2020-10-10T16:00:00.000Z","img":"/img/header_img/Design/Interpreter.png","_id":"clhrbp2b1003bo5lgfbvy31d4","project":"designPattern","hot":"comments","site":{"data":{}},"updated":"2022-09-20T01:31:25.941Z","author":"Sunfy","comments":true,"path":"api/articles/resource-designpattern-behavior-Interpreter.json","webPath":"2020/10/11/resource-designpattern-behavior-Interpreter/","permalink":"https://sunfy9.gitee.io/2020/10/11/resource-designpattern-behavior-Interpreter/","excerpt":null,"covers":["../../../../img/Interpreter/interpreter_pattern_uml_diagram.jpg"],"keywords":"sunfy, hexo-theme-snail","content":"<p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><strong>意图：</strong>给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</p>\n<p><strong>主要解决：</strong>对于一些固定文法构建一个解释句子的解释器。</p>\n<p><strong>何时使用：</strong>如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</p>\n<p><strong>如何解决：</strong>构建语法树，定义终结符与非终结符。</p>\n<p><strong>关键代码：</strong>构建环境类，包含解释器之外的一些全局信息，一般是 HashMap。</p>\n<p><strong>应用实例：</strong>编译器、运算表达式计算。</p>\n<p><strong>优点：</strong> 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。</p>\n<p><strong>缺点：</strong> 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。</p>\n<p><strong>使用场景：</strong> 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。 3、一个简单语法需要解释的场景。</p>\n<p><strong>注意事项：</strong>可利用场景比较少，JAVA 中如果碰到可以用 expression4J 代替。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现<sunfy-line></h2><p>我们将创建一个接口 <em>Expression</em> 和实现了 <em>Expression</em> 接口的实体类。定义作为上下文中主要解释器的 <em>TerminalExpression</em> 类。其他的类 <em>OrExpression</em>、<em>AndExpression</em> 用于创建组合式表达式。</p>\n<p><em>InterpreterPatternDemo</em>，我们的演示类使用 <em>Expression</em> 类创建规则和演示表达式的解析。</p>\n<p><img src=\"../../../../img/Interpreter/interpreter_pattern_uml_diagram.jpg\" alt=\"解释器模式的 UML 图\"></p>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤 1\"></a>步骤 1</h3><p>创建一个表达式接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Expression</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">interpret</span><span class=\"params\">(String context)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-2\"><a href=\"#步骤-2\" class=\"headerlink\" title=\"步骤 2\"></a>步骤 2</h3><p>创建实现了上述接口的实体类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TerminalExpression</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">private</span> String data;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TerminalExpression</span><span class=\"params\">(String data)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.data = data; </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">interpret</span><span class=\"params\">(String context)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(context.contains(data))&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrExpression</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"keyword\">private</span> Expression expr1 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Expression expr2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OrExpression</span><span class=\"params\">(Expression expr1, Expression expr2)</span> </span>&#123; </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.expr1 = expr1;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.expr2 = expr2;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">interpret</span><span class=\"params\">(String context)</span> </span>&#123;      </span><br><span class=\"line\">      <span class=\"keyword\">return</span> expr1.interpret(context) || expr2.interpret(context);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndExpression</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"keyword\">private</span> Expression expr1 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Expression expr2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AndExpression</span><span class=\"params\">(Expression expr1, Expression expr2)</span> </span>&#123; </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.expr1 = expr1;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.expr2 = expr2;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">interpret</span><span class=\"params\">(String context)</span> </span>&#123;      </span><br><span class=\"line\">      <span class=\"keyword\">return</span> expr1.interpret(context) &amp;&amp; expr2.interpret(context);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-3\"><a href=\"#步骤-3\" class=\"headerlink\" title=\"步骤 3\"></a>步骤 3</h3><p><em>InterpreterPatternDemo</em> 使用 <em>Expression</em> 类来创建规则，并解析它们。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterpreterPatternDemo</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">//规则：Robert 和 John 是男性</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Expression <span class=\"title\">getMaleExpression</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      Expression robert = <span class=\"keyword\">new</span> TerminalExpression(<span class=\"string\">\"Robert\"</span>);</span><br><span class=\"line\">      Expression john = <span class=\"keyword\">new</span> TerminalExpression(<span class=\"string\">\"John\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OrExpression(robert, john);    </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">//规则：Julie 是一个已婚的女性</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Expression <span class=\"title\">getMarriedWomanExpression</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      Expression julie = <span class=\"keyword\">new</span> TerminalExpression(<span class=\"string\">\"Julie\"</span>);</span><br><span class=\"line\">      Expression married = <span class=\"keyword\">new</span> TerminalExpression(<span class=\"string\">\"Married\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AndExpression(julie, married);    </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Expression isMale = getMaleExpression();</span><br><span class=\"line\">      Expression isMarriedWoman = getMarriedWomanExpression();</span><br><span class=\"line\"> </span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"John is male? \"</span> + isMale.interpret(<span class=\"string\">\"John\"</span>));</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Julie is a married women? \"</span> </span><br><span class=\"line\">      + isMarriedWoman.interpret(<span class=\"string\">\"Married Julie\"</span>));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-4\"><a href=\"#步骤-4\" class=\"headerlink\" title=\"步骤 4\"></a>步骤 4</h3><p>执行程序，输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">John is male? true</span><br><span class=\"line\">Julie is a married women? true</span><br></pre></td></tr></table></figure>\n","more":"<p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><strong>意图：</strong>给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</p>\n<p><strong>主要解决：</strong>对于一些固定文法构建一个解释句子的解释器。</p>\n<p><strong>何时使用：</strong>如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</p>\n<p><strong>如何解决：</strong>构建语法树，定义终结符与非终结符。</p>\n<p><strong>关键代码：</strong>构建环境类，包含解释器之外的一些全局信息，一般是 HashMap。</p>\n<p><strong>应用实例：</strong>编译器、运算表达式计算。</p>\n<p><strong>优点：</strong> 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。</p>\n<p><strong>缺点：</strong> 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。</p>\n<p><strong>使用场景：</strong> 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。 3、一个简单语法需要解释的场景。</p>\n<p><strong>注意事项：</strong>可利用场景比较少，JAVA 中如果碰到可以用 expression4J 代替。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现<sunfy-line></h2><p>我们将创建一个接口 <em>Expression</em> 和实现了 <em>Expression</em> 接口的实体类。定义作为上下文中主要解释器的 <em>TerminalExpression</em> 类。其他的类 <em>OrExpression</em>、<em>AndExpression</em> 用于创建组合式表达式。</p>\n<p><em>InterpreterPatternDemo</em>，我们的演示类使用 <em>Expression</em> 类创建规则和演示表达式的解析。</p>\n<p><img src=\"../../../../img/Interpreter/interpreter_pattern_uml_diagram.jpg\" alt=\"解释器模式的 UML 图\"></p>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤 1\"></a>步骤 1</h3><p>创建一个表达式接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Expression</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">interpret</span><span class=\"params\">(String context)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-2\"><a href=\"#步骤-2\" class=\"headerlink\" title=\"步骤 2\"></a>步骤 2</h3><p>创建实现了上述接口的实体类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TerminalExpression</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">private</span> String data;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TerminalExpression</span><span class=\"params\">(String data)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.data = data; </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">interpret</span><span class=\"params\">(String context)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(context.contains(data))&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrExpression</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"keyword\">private</span> Expression expr1 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Expression expr2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OrExpression</span><span class=\"params\">(Expression expr1, Expression expr2)</span> </span>&#123; </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.expr1 = expr1;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.expr2 = expr2;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">interpret</span><span class=\"params\">(String context)</span> </span>&#123;      </span><br><span class=\"line\">      <span class=\"keyword\">return</span> expr1.interpret(context) || expr2.interpret(context);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndExpression</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"keyword\">private</span> Expression expr1 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Expression expr2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AndExpression</span><span class=\"params\">(Expression expr1, Expression expr2)</span> </span>&#123; </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.expr1 = expr1;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.expr2 = expr2;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">interpret</span><span class=\"params\">(String context)</span> </span>&#123;      </span><br><span class=\"line\">      <span class=\"keyword\">return</span> expr1.interpret(context) &amp;&amp; expr2.interpret(context);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-3\"><a href=\"#步骤-3\" class=\"headerlink\" title=\"步骤 3\"></a>步骤 3</h3><p><em>InterpreterPatternDemo</em> 使用 <em>Expression</em> 类来创建规则，并解析它们。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterpreterPatternDemo</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">//规则：Robert 和 John 是男性</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Expression <span class=\"title\">getMaleExpression</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      Expression robert = <span class=\"keyword\">new</span> TerminalExpression(<span class=\"string\">\"Robert\"</span>);</span><br><span class=\"line\">      Expression john = <span class=\"keyword\">new</span> TerminalExpression(<span class=\"string\">\"John\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OrExpression(robert, john);    </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">//规则：Julie 是一个已婚的女性</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Expression <span class=\"title\">getMarriedWomanExpression</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      Expression julie = <span class=\"keyword\">new</span> TerminalExpression(<span class=\"string\">\"Julie\"</span>);</span><br><span class=\"line\">      Expression married = <span class=\"keyword\">new</span> TerminalExpression(<span class=\"string\">\"Married\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AndExpression(julie, married);    </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Expression isMale = getMaleExpression();</span><br><span class=\"line\">      Expression isMarriedWoman = getMarriedWomanExpression();</span><br><span class=\"line\"> </span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"John is male? \"</span> + isMale.interpret(<span class=\"string\">\"John\"</span>));</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Julie is a married women? \"</span> </span><br><span class=\"line\">      + isMarriedWoman.interpret(<span class=\"string\">\"Married Julie\"</span>));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-4\"><a href=\"#步骤-4\" class=\"headerlink\" title=\"步骤 4\"></a>步骤 4</h3><p>执行程序，输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">John is male? true</span><br><span class=\"line\">Julie is a married women? true</span><br></pre></td></tr></table></figure>\n","next":{"title":"SpringBoot自定义staters","path":"api/articles/resource-Spring-SpringBoot-SpringBoot自定义staters.json","image":"/img/header_img/spring/springstaters.PNG","num_read":1687,"num_like":322,"num_collection":436,"num_comments":30},"prev":{"title":"SpringBoot集成Druid","path":"api/articles/resource-Spring-SpringBoot-SpringBoot集成Druid.json","image":"/img/header_img/spring/springDruid.png","num_read":1563,"num_like":439,"num_collection":293,"num_comments":126},"categories":[{"name":"设计模式","path":"api/categories/设计模式.json","pathContent":"api/categories/设计模式","description":"简单快捷、解决方案","cover":"https://sunfy9.gitee.io/project/photo/project/design.jpg"}],"tags":[]}