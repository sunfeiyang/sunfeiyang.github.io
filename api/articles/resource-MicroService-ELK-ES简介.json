{"title":"resource-MicroService-ELK-ES简介","num_read":432,"num_like":38,"num_collection":728,"num_comments":75,"slug":"resource-MicroService-ELK-ES简介","date":"2022-08-17T16:00:00.000Z","img":"/img/header_img/MicroService/ElasticSearch简介.png","format":"gallery","_id":"clhrbp2e200czo5lgauz79x6f","project":"MicroService","type":"banner","subtitle":"当前最流行的开源的企业级搜索引擎","hot":"like","site":{"data":{}},"updated":"2022-09-20T01:50:10.949Z","author":"Sunfy","comments":true,"path":"api/articles/resource-MicroService-ELK-ES简介.json","webPath":"2022/08/18/resource-MicroService-ELK-ES简介/","permalink":"https://sunfy9.gitee.io/2022/08/18/resource-MicroService-ELK-ES%E7%AE%80%E4%BB%8B/","excerpt":null,"covers":["../../../../img/ES简介/截图.png","../../../../img/ES简介/截图-1660805955959.png","../../../../img/ES简介/截图-1660805955962.png","../../../../img/ES简介/截图-1660805955963.png","../../../../img/2022/%E6%88%AA%E5%9B%BE-1660805955963.png","../../../../img/ES简介/截图-1660806069518.png","../../../../img/ES简介/截图-1660806069519.png","../../../../img/ES简介/截图-1660806069520.png"],"keywords":"sunfy, hexo-theme-snail","content":"<h1 id=\"1-ElasticSearch简介\"><a href=\"#1-ElasticSearch简介\" class=\"headerlink\" title=\"1.ElasticSearch简介\"></a><strong>1.ElasticSearch简介</strong></h1><h2 id=\"1-1-ElasticSearch（简称ES）\"><a href=\"#1-1-ElasticSearch（简称ES）\" class=\"headerlink\" title=\"1.1 ElasticSearch（简称ES）\"></a><strong>1.1 ElasticSearch（简称ES）</strong></h2><p>Elasticsearch是用Java开发并且是当前最流行的开源的企业级搜索引擎。</p>\n<p>能够达到实时搜索，稳定，可靠，快速，安装使用方便。</p>\n<p>客户端支持Java、.NET（C#）、PHP、Python、Ruby等多种语言。</p>\n<blockquote>\n<p><strong>官方网站:</strong> <strong><a href=\"https://www.elastic.co/\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/</a></strong><br><strong>下载地址：</strong><a href=\"https://www.elastic.co/cn/start\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/cn/start</a></p>\n</blockquote>\n<p><strong>创始人:</strong>Shay Banon（谢巴农）</p>\n<p><img src=\"../../../../img/ES简介/截图.png\" alt=\"img\"></p>\n<p><strong>应用场景</strong></p>\n<ul>\n<li>搜索引擎</li>\n<li>全文检索</li>\n<li>站内搜索</li>\n<li>…</li>\n</ul>\n<h2 id=\"1-2-ElasticSearch与Lucene的关系\"><a href=\"#1-2-ElasticSearch与Lucene的关系\" class=\"headerlink\" title=\"1.2 ElasticSearch与Lucene的关系\"></a><strong>1.2 ElasticSearch与Lucene的关系</strong></h2><p>Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库（框架）</p>\n<p>但是想要使用Lucene，必须使用Java来作为开发语言并将其直接集成到你的应用中，并且Lucene的配置及使用非常复杂，你需要深入了解检索的相关知识来理解它是如何工作的。</p>\n<p>Lucene缺点：<sunfy-line></p>\n<p>  1）只能在Java项目中使用,并且要以jar包的方式直接集成项目中.<br>  2）使用非常复杂-创建索引和搜索索引代码繁杂<br>  3）不支持集群环境-索引数据不同步（不支持大型项目）<br>  4）索引数据如果太多就不行，索引库和应用所在同一个服务器,共同占用硬盘.共用空间少.</p>\n<p>上述Lucene框架中的缺点,ES全部都能解决.</p>\n<h2 id=\"1-3-ES-vs-Solr比较\"><a href=\"#1-3-ES-vs-Solr比较\" class=\"headerlink\" title=\"1.3 ES vs Solr比较\"></a><strong>1.3 ES vs Solr比较</strong></h2><h3 id=\"1-3-1-ES-vs-Solr-检索速度\"><a href=\"#1-3-1-ES-vs-Solr-检索速度\" class=\"headerlink\" title=\"1.3.1 ES vs Solr 检索速度\"></a><strong>1.3.1 ES vs Solr 检索速度</strong></h3><p>当单纯的对已有数据进行搜索时，Solr更快。</p>\n<p><img src=\"../../../../img/ES简介/截图-1660805955959.png\" alt=\"img\" style=\"zoom:50%;\" /></p>\n<p>当实时建立索引时, Solr会产生io阻塞，查询性能较差, Elasticsearch具有明显的优势。</p>\n<p><img src=\"../../../../img/ES简介/截图-1660805955962.png\" alt=\"img\" style=\"zoom:50%;\" /></p>\n<p>大型互联网公司，实际生产环境测试，将搜索引擎从Solr转到 Elasticsearch以后的平均查询速度有了50倍的提升。</p>\n<p><img src=\"../../../../img/ES简介/截图-1660805955963.png\" alt=\"img\" style=\"zoom:67%;\" /></p>\n<p><strong>总结：</strong></p>\n<p>二者安装都很简单。 </p>\n<p>1、Solr 利用 Zookeeper 进行分布式管理，而Elasticsearch 自身带有分布式协调管理功能。<br>2、Solr 支持更多格式的数据，比如JSON、XML、CSV，而 Elasticsearch 仅支持json文件格式。<br>3、Solr 在传统的搜索应用中表现好于 Elasticsearch，但在处理实时搜索应用时效率明显低于 Elasticsearch。<br>4、Solr 是传统搜索应用的有力解决方案，但 Elasticsearch更适用于新兴的实时搜索应用。</p>\n<h3 id=\"1-3-2-ES-vs-关系型数据库\"><a href=\"#1-3-2-ES-vs-关系型数据库\" class=\"headerlink\" title=\"1.3.2 ES vs 关系型数据库\"></a><strong>1.3.2 ES vs 关系型数据库</strong></h3><p><img src=\"../../../../img/2022/%E6%88%AA%E5%9B%BE-1660805955963.png\" alt=\"img\" style=\"zoom:50%;\" /></p>\n<h1 id=\"2-Lucene全文检索框架\"><a href=\"#2-Lucene全文检索框架\" class=\"headerlink\" title=\"2.  Lucene全文检索框架\"></a><strong>2.  Lucene全文检索框架</strong></h1><h2 id=\"2-1-什么是全文检索\"><a href=\"#2-1-什么是全文检索\" class=\"headerlink\" title=\"2.1  什么是全文检索\"></a>2.1  什么是全文检索</h2><p>全文检索是指：</p>\n<ul>\n<li>通过一个程序扫描文本中的每一个单词，针对单词建立索引，并保存该单词在文本中的位置、以及出现的次数</li>\n<li>用户查询时，通过之前建立好的索引来查询，将索引中单词对应的文本位置、出现的次数返回给用户，因为有了具体文本的位置，所以就可以将具体内容读取出来了</li>\n</ul>\n<p><strong>hello   what  world    ====&gt;   hello</strong></p>\n<p>​                                                        <strong>what</strong></p>\n<p>​                                                        <strong>world</strong></p>\n<h2 id=\"2-2-分词原理之倒排索引\"><a href=\"#2-2-分词原理之倒排索引\" class=\"headerlink\" title=\"2.2 分词原理之倒排索引\"></a><strong>2.2 分词原理之倒排索引</strong></h2><p><img src=\"../../../../img/ES简介/截图-1660806069518.png\" alt=\"img\" style=\"zoom: 67%;\" /></p>\n<p><img src=\"../../../../img/ES简介/截图-1660806069519.png\" alt=\"img\" style=\"zoom:67%;\" /></p>\n<p><img src=\"../../../../img/ES简介/截图-1660806069520.png\" alt=\"img\" style=\"zoom:67%;\" /></p>\n<p>倒排索引总结：</p>\n<p>索引就类似于目录，平时我们使用的都是索引，都是通过主键定位到某条数据，那么倒排索引呢，刚好相反，数据对应到主键．这里以一个博客文章的内容为例:</p>\n<p>1.索引</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>文章ID</th>\n<th>文章标题</th>\n<th>文章内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>浅析JAVA设计模式</td>\n<td>JAVA设计模式是每一个JAVA程序员都应该掌握的进阶知识</td>\n</tr>\n<tr>\n<td>2</td>\n<td>JAVA多线程设计模式</td>\n<td>JAVA多线程与设计模式结合</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>2.倒排索引</p>\n<p>假如，我们有一个站内搜索的功能，通过某个关键词来搜索相关的文章，那么这个关键词可能出现在标题中，也可能出现在文章内容中，那我们将会在创建或修改文章的时候，建立一个关键词与文章的对应关系表，这种，我们可以称之为倒排索引,因此倒排索引，也可称之为反向索引．如：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>关键词</th>\n<th>文章ID</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JAVA</td>\n<td>1</td>\n</tr>\n<tr>\n<td>设计模式</td>\n<td>1,2</td>\n</tr>\n<tr>\n<td>多线程</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>注：这里涉及中文分词的问题</p>\n<h1 id=\"3-Elasticsearch中的核心概念\"><a href=\"#3-Elasticsearch中的核心概念\" class=\"headerlink\" title=\"3.  Elasticsearch中的核心概念\"></a><strong>3.  Elasticsearch中的核心概念</strong></h1><h2 id=\"3-1-索引-index\"><a href=\"#3-1-索引-index\" class=\"headerlink\" title=\"3.1  索引 index\"></a><strong>3.1  索引 index</strong></h2><p> 一个索引就是一个拥有几分相似特征的文档的集合。比如说，可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引</p>\n<p> 一个索引由一个名字来标识（必须全部是小写字母的），并且当我们要对对应于这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字</p>\n<h2 id=\"3-2-映射-mapping\"><a href=\"#3-2-映射-mapping\" class=\"headerlink\" title=\"3.2  映射 mapping\"></a><strong>3.2  映射 mapping</strong></h2><p> <strong>ElasticSearch中的映射（Mapping）用来定义一个文档</strong></p>\n<p> mapping是处理数据的方式和规则方面做一些限制，如某个字段的数据类型、默认值、分词器、是否被索引等等，这些都是映射里面可以设置的</p>\n<h2 id=\"3-3-字段Field\"><a href=\"#3-3-字段Field\" class=\"headerlink\" title=\"3.3  字段Field\"></a><strong>3.3  字段Field</strong></h2><p>相当于是数据表的字段|列</p>\n<h2 id=\"3-4-字段类型-Type\"><a href=\"#3-4-字段类型-Type\" class=\"headerlink\" title=\"3.4  字段类型 Type\"></a><strong>3.4  字段类型 Type</strong></h2><p>每一个字段都应该有一个对应的类型，例如：Text、Keyword、Byte等</p>\n<h2 id=\"3-5-文档-document\"><a href=\"#3-5-文档-document\" class=\"headerlink\" title=\"3.5  文档 document\"></a><strong>3.5  文档 document</strong></h2><p>一个文档是一个可被索引的基础信息单元，类似一条记录。文档以JSON（Javascript Object Notation）格式来表示；</p>\n<h2 id=\"3-6-集群-cluster\"><a href=\"#3-6-集群-cluster\" class=\"headerlink\" title=\"3.6  集群 cluster\"></a><strong>3.6  集群 cluster</strong></h2><p>一个集群就是由一个或多个节点组织在一起，它们共同持有整个的数据，并一起提供索引和搜索功能</p>\n<h2 id=\"3-7-节点-node\"><a href=\"#3-7-节点-node\" class=\"headerlink\" title=\"3.7  节点 node\"></a><strong>3.7  节点 node</strong></h2><p>一个节点是集群中的一个服务器，作为集群的一部分，它存储数据，参与集群的索引和搜索功能</p>\n<p> 一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中</p>\n<p>这意味着，如果在网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中</p>\n<p> 在一个集群里，可以拥有任意多个节点。而且，如果当前网络中没有运行任何Elasticsearch节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。</p>\n<h2 id=\"3-8-分片和副本-shards-amp-replicas\"><a href=\"#3-8-分片和副本-shards-amp-replicas\" class=\"headerlink\" title=\"3.8  分片和副本 shards&amp;replicas\"></a><strong>3.8  分片和副本 shards&amp;replicas</strong></h2><h3 id=\"3-8-1-分片\"><a href=\"#3-8-1-分片\" class=\"headerlink\" title=\"3.8.1  分片\"></a><strong>3.8.1  分片</strong></h3><ul>\n<li><p>一个索引可以存储超出单个结点硬件限制的大量数据。比如，一个具有10亿文档的索引占据1TB的磁盘空间，而任一节点都没有这样大的磁盘空间；或者单个节点处理搜索请求，响应太慢</p>\n</li>\n<li><p>为了解决这个问题，Elasticsearch提供了将索引划分成多份的能力，这些份就叫做分片</p>\n</li>\n<li><p>当创建一个索引的时候，可以指定你想要的分片的数量</p>\n</li>\n<li><p>每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上</p>\n</li>\n<li><p>分片很重要，主要有两方面的原因</p>\n</li>\n</ul>\n<p>​        允许水平分割/扩展你的内容容量</p>\n<p>​         允许在分片之上进行分布式的、并行的操作，进而提高性能/吞吐量</p>\n<ul>\n<li>至于一个分片怎样分布，它的文档怎样聚合回搜索请求，是完全由Elasticsearch管理的，对于作为用户来说，这些都是透明的</li>\n</ul>\n<h3 id=\"3-8-2-副本\"><a href=\"#3-8-2-副本\" class=\"headerlink\" title=\"3.8.2  副本\"></a><strong>3.8.2  副本</strong></h3><ul>\n<li>在一个网络/云的环境里，失败随时都可能发生，在某个分片/节点不知怎么的就处于离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的，Elasticsearch允许你创建分片的一份或多份拷贝，这些拷贝叫做副本分片，或者直接叫副本</li>\n<li>副本之所以重要，有两个主要原因<ul>\n<li>在分片/节点失败的情况下，提供了高可用性。注意到复制分片从不与原/主要（original/primary）分片置于同一节点上是非常重要的</li>\n<li>扩展搜索量/吞吐量，因为搜索可以在所有的副本上并行运行，每个索引可以被分成多个分片。一个索引有0个或者多个副本，一旦设置了副本，每个索引就有了主分片和副本分片，分片和副本的数量可以在索引，创建的时候指定。在索引创建之后，可以在任何时候动态地改变副本的数量，但是不能改变分片的数量</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"4-安装Elasticsearch\"><a href=\"#4-安装Elasticsearch\" class=\"headerlink\" title=\"4.  安装Elasticsearch\"></a><strong>4.  安装Elasticsearch</strong></h1><h2 id=\"4-1-安装Elasticsearch\"><a href=\"#4-1-安装Elasticsearch\" class=\"headerlink\" title=\"4.1  安装Elasticsearch\"></a><strong>4.1  安装Elasticsearch</strong></h2><h3 id=\"4-1-1-创建普通用户\"><a href=\"#4-1-1-创建普通用户\" class=\"headerlink\" title=\"4.1.1  创建普通用户\"></a><strong>4.1.1  创建普通用户</strong></h3><p><strong>ES不能使用root用户来启动，必须使用普通用户来安装启动</strong>。这里我们创建一个普通用户以及定义一些常规目录用于存放我们的数据文件以及安装包等。</p>\n<p>创建一个es专门的用户（<strong>必须</strong>）</p>\n<p># 使用root用户在服务器执行以下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先创建组, 再创建用户:</span><br><span class=\"line\">1）创建 elasticsearch 用户组</span><br><span class=\"line\">[root@localhost ~]# groupadd elasticsearch</span><br><span class=\"line\">2）创建用户 sunfy 并设置密码</span><br><span class=\"line\">[root@localhost ~]# useradd sunfy</span><br><span class=\"line\">[root@localhost ~]# passwd sunfy</span><br><span class=\"line\">3）# 创建es文件夹，</span><br><span class=\"line\">并修改owner为sunfy用户</span><br><span class=\"line\">mkdir -p /usr/local/es</span><br><span class=\"line\">4）用户es 添加到 elasticsearch 用户组</span><br><span class=\"line\">[root@localhost ~]# usermod -G elasticsearch sunfy</span><br><span class=\"line\">[root@localhost ~]# chown -R sunfy /usr/local/es/elasticsearch-7.6.1</span><br><span class=\"line\">5）设置sudo权限</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">为了让普通用户有更大的操作权限，我们一般都会给普通用户设置sudo权限，方便普通用户的操作</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">三台机器使用root用户执行visudo命令然后为es用户添加权限</span></span><br><span class=\"line\">[root@localhost ~]# visudo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在root ALL=(ALL) ALL 一行下面</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加sunfy用户 如下:</span></span><br><span class=\"line\">sunfy ALL=(ALL) ALL</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加成功保存后切换到sunfy用户操作</span></span><br><span class=\"line\">[root@localhost ~]# su sunfy</span><br><span class=\"line\">[sunfy@localhost root]$</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-1-2-上传压缩包并解压\"><a href=\"#4-1-2-上传压缩包并解压\" class=\"headerlink\" title=\"4.1.2  上传压缩包并解压\"></a>4.1.2  上传压缩包并解压</h3><p>将es的安装包下载并上传到服务器的/user/local/es路径下，然后进行解压</p>\n<p>使用sunfy用户来执行以下操作，将es安装包上传到指定服务器，并使用es用户执行以下命令解压。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解压Elasticsearch</span></span><br><span class=\"line\">su sunfy</span><br><span class=\"line\">cd /user/local/</span><br><span class=\"line\">tar -zvxf elasticsearch-7.6.1-linux-x86_64.tar.gz -C /usr/local/es/</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-1-3-修改配置文件\"><a href=\"#4-1-3-修改配置文件\" class=\"headerlink\" title=\"4.1.3  修改配置文件\"></a><strong>4.1.3  修改配置文件</strong></h3><h4 id=\"4-1-3-1-修改elasticsearch-yml\"><a href=\"#4-1-3-1-修改elasticsearch-yml\" class=\"headerlink\" title=\"4.1.3.1  修改elasticsearch.yml\"></a><strong>4.1.3.1  修改elasticsearch.yml</strong></h4><p>进入服务器使用<strong>sunfy</strong>用户来修改配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/es/elasticsearch-7.6.1/config</span><br><span class=\"line\">mkdir -p /usr/local/es/elasticsearch-7.6.1/log</span><br><span class=\"line\">mkdir -p /usr/local/es/elasticsearch-7.6.1/data</span><br><span class=\"line\">rm -rf elasticsearch.yml</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">vim elasticsearch.yml</span><br><span class=\"line\">cluster.name: sunfy-es</span><br><span class=\"line\">node.name: node1</span><br><span class=\"line\">path.data: /usr/local/es/elasticsearch-7.6.1/data</span><br><span class=\"line\">path.logs: /usr/local/es/elasticsearch-7.6.1/log</span><br><span class=\"line\">network.host: 0.0.0.0</span><br><span class=\"line\">http.port: 9200</span><br><span class=\"line\">discovery.seed_hosts: [\"服务器IP\"]</span><br><span class=\"line\">cluster.initial_master_nodes: [\"节点名\"]</span><br><span class=\"line\">bootstrap.system_call_filter: false</span><br><span class=\"line\">bootstrap.memory_lock: false</span><br><span class=\"line\">http.cors.enabled: true</span><br><span class=\"line\">http.cors.allow-origin: \"*\"</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-1-3-2-修改jvm-option\"><a href=\"#4-1-3-2-修改jvm-option\" class=\"headerlink\" title=\"4.1.3.2  修改jvm.option\"></a><strong>4.1.3.2  修改jvm.option</strong></h4><p>修改jvm.option配置文件，调整jvm堆内存大小</p>\n<p><strong>node1.sunfy.cn使用sunfy用户</strong>执行以下命令调整jvm堆内存大小，每个人根据自己服务器的内存大小来进行调整。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/es/elasticsearch-7.6.1/config</span><br><span class=\"line\">vim jvm.options</span><br><span class=\"line\">-Xms2g</span><br><span class=\"line\">-Xmx2g</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-修改系统配置，解决启动时候的问题\"><a href=\"#4-2-修改系统配置，解决启动时候的问题\" class=\"headerlink\" title=\"4.2  修改系统配置，解决启动时候的问题\"></a><strong>4.2  修改系统配置，解决启动时候的问题</strong></h2><p>由于现在使用普通用户来安装es服务，且es服务对服务器的资源要求比较多，包括内存大小，线程数等。所以我们需要给普通用户解开资源的束缚</p>\n<h3 id=\"4-2-1-普通用户打开文件的最大数限制\"><a href=\"#4-2-1-普通用户打开文件的最大数限制\" class=\"headerlink\" title=\"4.2.1  普通用户打开文件的最大数限制\"></a><strong>4.2.1  普通用户打开文件的最大数限制</strong></h3><p>问题错误信息描述：</p>\n<blockquote>\n<p>max file descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]</p>\n</blockquote>\n<p>ES因为需要大量的创建索引文件，需要大量的打开系统的文件，所以我们需要解除linux系统当中打开文件最大数目的限制，不然ES启动就会抛错</p>\n<p>三台机器使用sunfy用户执行以下命令解除打开文件数据的限制</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/security/limits.conf</span><br></pre></td></tr></table></figure>\n<p>添加如下内容: 注意*不要去掉了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* soft nofile 65536</span><br><span class=\"line\">* hard nofile 131072</span><br><span class=\"line\">* soft nproc 2048</span><br><span class=\"line\">* hard nproc 4096</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-2-此文件修改后需要重新登录用户，才会生效\"><a href=\"#4-2-2-此文件修改后需要重新登录用户，才会生效\" class=\"headerlink\" title=\"4.2.2 此文件修改后需要重新登录用户，才会生效\"></a><strong>4.2.2</strong> <strong>此文件修改后需要重新登录用户，才会生效</strong></h3><p><strong>普通用户启动线程数限制</strong></p>\n<p>问题错误信息描述</p>\n<blockquote>\n<p>max number of threads [1024] for user [es] likely too low, increase to at least [4096]</p>\n</blockquote>\n<p>修改普通用户可以创建的最大线程数</p>\n<blockquote>\n<p><em>max number of threads [1024] for user [es] likely too low, increase to at least [4096]</em>原因：无法创建本地线程问题,用户最大可创建线程数太小解决方案：修改90-nproc.conf 配置文件。</p>\n</blockquote>\n<p>三台机器使用sunfy用户执行以下命令修改配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Centos6</span><br><span class=\"line\">sudo vi /etc/security/limits.d/90-nproc.conf</span><br><span class=\"line\">Centos7</span><br><span class=\"line\">sudo vi /etc/security/limits.d/20-nproc.conf</span><br></pre></td></tr></table></figure>\n<p>找到如下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* soft nproc 1024#修改为</span><br><span class=\"line\">* soft nproc 4096</span><br></pre></td></tr></table></figure>\n<p><strong>4.2.3 普通用户调大虚拟内存</strong></p>\n<p>错误信息描述：</p>\n<blockquote>\n<p>max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]</p>\n</blockquote>\n<p>调大系统的虚拟内存</p>\n<p>原因：最大虚拟内存太小</p>\n<p>每次启动机器都手动执行下。</p>\n<p>三台机器执行以下命令   </p>\n<blockquote>\n<p>编辑 /etc/sysctl.conf，追加以下内容：vm.max_map_count=262144 保存后，执行：sysctl -p </p>\n</blockquote>\n<font color=\"red\">备注：以上三个问题解决完成之后，重新连接secureCRT或者重新连接xshell生效 </font>\n\n<h2 id=\"4-3-启动ES服务\"><a href=\"#4-3-启动ES服务\" class=\"headerlink\" title=\"4.3  启动ES服务\"></a><strong>4.3  启动ES服务</strong></h2><p>三台机器使用sunfy用户执行以下命令启动es服务</p>\n<blockquote>\n<p>nohup /usr/local/es/elasticsearch-7.6.1/bin/elasticsearch 2&gt;&amp;1 &amp;</p>\n</blockquote>\n<p>后台启动ES 进入bin目录  ./elasticsearch  -d</p>\n<p>启动成功之后jsp即可看到es的服务进程，并且访问页面</p>\n<blockquote>\n<p><a href=\"http://192.168.21.130:9200/?pretty\" target=\"_blank\" rel=\"noopener\">http://192.168.21.130:9200/?pretty</a></p>\n</blockquote>\n<p>能够看到es启动之后的一些信息</p>\n<p>注意：如果哪一台机器服务启动失败，那么就到哪一台机器的</p>\n<blockquote>\n<p>/usr/local/es/elasticsearch-7.6.1/log</p>\n</blockquote>\n<p>这个路径下面去查看错误日志</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关闭Linux防火墙</span><br><span class=\"line\">永久性生效，重启后不会复原</span><br><span class=\"line\">开启： chkconfig iptables on</span><br><span class=\"line\">关闭： chkconfig iptables off</span><br><span class=\"line\">即时生效，重启后复原</span><br><span class=\"line\">开启： service iptables start</span><br><span class=\"line\">关闭： service iptables stop</span><br></pre></td></tr></table></figure>\n<p>注意:启动ES的时候出现 Permission denied</p>\n<p>原因：当前的用户没有对XX文件或目录的操作权限</p>\n<h1 id=\"5-客户端Kibana安装\"><a href=\"#5-客户端Kibana安装\" class=\"headerlink\" title=\"5 客户端Kibana安装\"></a><strong>5 客户端Kibana安装</strong></h1><h2 id=\"5-1客户端可以分为图形界面客户端-和代码客户端\"><a href=\"#5-1客户端可以分为图形界面客户端-和代码客户端\" class=\"headerlink\" title=\"5.1客户端可以分为图形界面客户端,和代码客户端.\"></a><strong>5.1客户端可以分为图形界面客户端,和代码客户端.</strong></h2><h3 id=\"5-2-ES主流客户端Kibana，开放9200端口与图形界面客户端交互\"><a href=\"#5-2-ES主流客户端Kibana，开放9200端口与图形界面客户端交互\" class=\"headerlink\" title=\"5.2 ES主流客户端Kibana，开放9200端口与图形界面客户端交互\"></a>5.2 ES主流客户端Kibana，开放9200端口与图形界面客户端交互</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)下载Kibana放之/usr/local/es目录中</span><br><span class=\"line\">2)解压文件：tar -zxvf kibana-X.X.X-linux-x86_64.tar.gz</span><br><span class=\"line\">3)进入/usr/local/es/kibana-X.X.X-linux-x86_64/config目录</span><br><span class=\"line\">4）使用vi编辑器：vi kibana.yml</span><br><span class=\"line\">  server.port: 5601</span><br><span class=\"line\">  server.host: \"服务器IP\"</span><br><span class=\"line\">  elasticsearch.hosts: [\"http://IP:9200\"]  #这里是elasticsearch的访问地址</span><br><span class=\"line\">5）启动Kibana</span><br><span class=\"line\">/usr/local/es/kibana-7.6.1-linux-x86_64/bin/kibana</span><br><span class=\"line\">  后台启动kibana</span><br><span class=\"line\">nohup  ./kibana &amp;</span><br><span class=\"line\">6）访问Kibana</span><br><span class=\"line\">http://ip:5601/app/kibana</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-安装IK分词器\"><a href=\"#6-安装IK分词器\" class=\"headerlink\" title=\"6  安装IK分词器\"></a><strong>6  安装IK分词器</strong></h1><p>我们后续也需要使用Elasticsearch来进行中文分词，所以需要单独给Elasticsearch安装IK分词器插件。以下为具体安装步骤：</p>\n<p>6.1 下载Elasticsearch IK分词器</p>\n<blockquote>\n<p><a href=\"https://github.com/medcl/elasticsearch-analysis-ik/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p>\n</blockquote>\n<p>6.2 切换到sunfy用户，并在es的安装目录下/plugins创建ik</p>\n<blockquote>\n<p>mkdir -p /usr/local/es/elasticsearch-7.6.1/plugins/ik</p>\n</blockquote>\n<p>6.3 将下载的ik分词器上传并解压到该目录</p>\n<blockquote>\n<p>cd /usr/local/es/elasticsearch-7.6.1/plugins/ik unzip  elasticsearch-analysis-ik-7.6.1.zip </p>\n</blockquote>\n<p>6.4 重启Elasticsearch    </p>\n<p>6.5 测试分词效果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST _analyze</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\"analyzer\":\"standard\",</span><br><span class=\"line\">\"text\":\"我爱你中国\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST _analyze</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\"analyzer\": \"ik_smart\",</span><br><span class=\"line\">\"text\": \"中华人民共和国\"</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">ik_smart:会做最粗粒度的拆分</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST _analyze</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\"analyzer\":\"ik_max_word\",</span><br><span class=\"line\">\"text\":\"我爱你中国\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">ik_max_word:会将文本做最细粒度的拆分</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"7、指定IK分词器作为默认分词器\"><a href=\"#7、指定IK分词器作为默认分词器\" class=\"headerlink\" title=\"7、指定IK分词器作为默认分词器\"></a><strong>7、指定IK分词器作为默认分词器</strong></h1><p>ES的默认分词设置是standard，这个在中文分词时就比较尴尬了，会单字拆分，比如我搜索关键词“清华大学”，这时候会按“清”，“华”，“大”，“学”去分词，然后搜出来的都是些“清清的河水”，“中华儿女”，“地大物博”，“学而不思则罔”之类的莫名其妙的结果，这里我们就想把这个分词方式修改一下，于是呢，就想到了ik分词器，有两种ik_smart和ik_max_word。</p>\n<p>ik_smart会将“清华大学”整个分为一个词，而ik_max_word会将“清华大学”分为“清华大学”，“清华”和“大学”，按需选其中之一就可以了。</p>\n<p>修改默认分词方法(这里修改school_index索引的默认分词为：ik_max_word)：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /school_index</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"settings\"</span> : &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"index\"</span> : &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"analysis.analyzer.default.type\"</span>: <span class=\"string\">\"ik_max_word\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-ES数据管理\"><a href=\"#8-ES数据管理\" class=\"headerlink\" title=\"8.ES数据管理\"></a><strong>8.ES数据管理</strong></h1><h2 id=\"8-1-ES数据管理概述\"><a href=\"#8-1-ES数据管理概述\" class=\"headerlink\" title=\"8.1 ES数据管理概述\"></a><strong>8.1 ES数据管理概述</strong></h2><p>ES是面向文档(document oriented)的，这意味着它可以存储整个对象或文档(document)。</p>\n<p>然而它不仅仅是存储，还会索引(index)每个文档的内容使之可以被搜索。</p>\n<p>在ES中，你可以对文档（而非成行成列的数据）进行索引、搜索、排序、过滤。</p>\n<p>ES使用JSON作为文档序列化格式。</p>\n<p>JSON现在已经被大多语言所支持，而且已经成为NoSQL领域的标准格式。</p>\n<p>ES存储的一个员工文档的格式示例：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"584614151@qq.com\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"张三\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"interests\"</span>: [ <span class=\"string\">\"篮球\"</span>, <span class=\"string\">\"健身\"</span> ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-2-基本操作\"><a href=\"#8-2-基本操作\" class=\"headerlink\" title=\"8.2 基本操作\"></a><strong>8.2 基本操作</strong></h2><p>1) 创建索引</p>\n<p>格式: PUT /索引名称</p>\n<p>举例: PUT /es_db</p>\n<p>2) 查询索引</p>\n<p>格式: GET /索引名称</p>\n<p>举例: GET /es_db</p>\n<p>3) 删除索引</p>\n<p>格式: DELETE /索引名称</p>\n<p>举例: DELETE /es_db         </p>\n<p>4) 添加文档 </p>\n<p>格式: PUT /索引名称/类型/id</p>\n<p>5) 修改文档 </p>\n<p>格式: PUT /索引名称/类型/id</p>\n<p>注意:POST和PUT都能起到创建/更新的作用</p>\n<ul>\n<li>需要注意的是==PUT==需要对一个具体的资源进行操作也就是要确定id才能进行==更新/创建，而==POST==是可以针对整个资源集合进行操作的，如果不写id就由ES生成一个唯一id进行==创建==新文档，如果填了id那就针对这个id的文档进行创建/更新</li>\n<li>PUT只会将json数据都进行替换, POST只会更新相同字段的值</li>\n<li>PUT与DELETE都是幂等性操作, 即不论操作多少次, 结果都一样</li>\n</ul>\n<p>6) 查询文档</p>\n<p>格式: GET /索引名称/类型/id </p>\n<p>举例: GET /es_db/_doc/1</p>\n<p>7) 删除文档</p>\n<p>格式: DELETE /索引名称/类型/id </p>\n<p>举例: DELETE /es_db/_doc/1</p>\n<h1 id=\"9-Restful认识\"><a href=\"#9-Restful认识\" class=\"headerlink\" title=\"9.Restful认识\"></a><strong>9.Restful认识</strong></h1><p>Restful是一种面向资源的架构风格，可以简单理解为：使用URL定位资源，用HTTP动词（GET,POST,DELETE,PUT）描述操作。 基于Restful API ES和所有客户端的交互都是使用JSON格式的数据.</p>\n<p>其他所有程序语言都可以使用RESTful API，通过9200端口的与ES进行通信</p>\n<p>GET查询</p>\n<p>PUT添加</p>\n<p>POST修改</p>\n<p>DELE删除</p>\n<p><strong>使用Restful的好处：</strong></p>\n<p>透明性，暴露资源存在。</p>\n<p>充分利用 HTTP 协议本身语义，不同请求方式进行不同的操作</p>\n<h1 id=\"10-查询操作\"><a href=\"#10-查询操作\" class=\"headerlink\" title=\"10.查询操作\"></a><strong>10.查询操作</strong></h1><p><strong>10</strong>.1 查询当前类型中的所有文档 _search </p>\n<blockquote>\n<p>格式: GET /索引名称/类型/_search 举例: GET /es_db/_doc/_search SQL:  select * from student</p>\n</blockquote>\n<p><strong>10</strong>.2 条件查询, 如要查询age等于28岁的 _search?q=<em>:**</em></p>\n<blockquote>\n<p>格式: GET /索引名称/类型/_search?q=<em>:**</em> 举例: GET /es_db/_doc/_search?q=age:28 SQL:  select * from student where age = 28</p>\n</blockquote>\n<p><strong>10</strong>.3 范围查询, 如要查询age在25至26岁之间的 _search?q=<strong>*[</strong> TO **]  注意: TO 必须为大写</p>\n<blockquote>\n<p>格式: GET /索引名称/类型/_search?q=<em>**[25 TO 26] 举例: GET /es_db/_doc/_search?q=age[25 TO 26] SQL:  select </em> from student where age between 25 and 26    </p>\n</blockquote>\n<p><strong>10</strong>.4 根据多个ID进行批量查询 _mget</p>\n<blockquote>\n<p>格式: GET /索引名称/类型/_mget 举例: GET /es_db/_doc/_mget { “ids”:[“1”,”2”]   } SQL:  select * from student where id in (1,2)        </p>\n</blockquote>\n<p><strong>10</strong>.5 查询年龄小于等于28岁的 :&lt;=</p>\n<blockquote>\n<p>格式: GET /索引名称/类型/_search?q=age:&lt;=<em>* 举例: GET /es_db/_doc/_search?q=age:&lt;=28 SQL:  select </em> from student where age &lt;= 28</p>\n</blockquote>\n<p><strong>10</strong>.6 查询年龄大于28前的 :&gt;</p>\n<blockquote>\n<p>格式: GET /索引名称/类型/_search?q=age:&gt;<em>* 举例: GET /es_db/_doc/_search?q=age:&gt;28 SQL:  select </em> from student where age &gt; 28</p>\n</blockquote>\n<p><strong>10</strong>.7 分页查询 from=<em>&amp;size=</em></p>\n<blockquote>\n<p>格式: GET /索引名称/类型/_search?q=age[25 TO 26]&amp;from=0&amp;size=1 举例: GET /es_db/_doc/_search?q=age[25 TO 26]&amp;from=0&amp;size=1 SQL:  select * from student where age between 25 and 26 limit 0, 1 </p>\n</blockquote>\n<p><strong>10</strong>.8 对查询结果只输出某些字段 _source=字段,字段</p>\n<blockquote>\n<p>格式: GET /索引名称/类型/_search?_source=字段,字段 举例: GET /es_db/_doc/_search?_source=name,age SQL:  select name,age from student</p>\n</blockquote>\n<p><strong>10</strong>.9 对查询结果排序 sort=字段:desc/asc</p>\n<blockquote>\n<p>格式: GET /索引名称/类型/_search?sort=字段 desc 举例: GET /es_db/_doc/_search?sort=age:desc SQL:  select * from student order by age desc</p>\n</blockquote>\n","more":"<h1 id=\"1-ElasticSearch简介\"><a href=\"#1-ElasticSearch简介\" class=\"headerlink\" title=\"1.ElasticSearch简介\"></a><strong>1.ElasticSearch简介</strong></h1><h2 id=\"1-1-ElasticSearch（简称ES）\"><a href=\"#1-1-ElasticSearch（简称ES）\" class=\"headerlink\" title=\"1.1 ElasticSearch（简称ES）\"></a><strong>1.1 ElasticSearch（简称ES）</strong></h2><p>Elasticsearch是用Java开发并且是当前最流行的开源的企业级搜索引擎。</p>\n<p>能够达到实时搜索，稳定，可靠，快速，安装使用方便。</p>\n<p>客户端支持Java、.NET（C#）、PHP、Python、Ruby等多种语言。</p>\n<blockquote>\n<p><strong>官方网站:</strong> <strong><a href=\"https://www.elastic.co/\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/</a></strong><br><strong>下载地址：</strong><a href=\"https://www.elastic.co/cn/start\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/cn/start</a></p>\n</blockquote>\n<p><strong>创始人:</strong>Shay Banon（谢巴农）</p>\n<p><img src=\"../../../../img/ES简介/截图.png\" alt=\"img\"></p>\n<p><strong>应用场景</strong></p>\n<ul>\n<li>搜索引擎</li>\n<li>全文检索</li>\n<li>站内搜索</li>\n<li>…</li>\n</ul>\n<h2 id=\"1-2-ElasticSearch与Lucene的关系\"><a href=\"#1-2-ElasticSearch与Lucene的关系\" class=\"headerlink\" title=\"1.2 ElasticSearch与Lucene的关系\"></a><strong>1.2 ElasticSearch与Lucene的关系</strong></h2><p>Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库（框架）</p>\n<p>但是想要使用Lucene，必须使用Java来作为开发语言并将其直接集成到你的应用中，并且Lucene的配置及使用非常复杂，你需要深入了解检索的相关知识来理解它是如何工作的。</p>\n<p>Lucene缺点：<sunfy-line></p>\n<p>  1）只能在Java项目中使用,并且要以jar包的方式直接集成项目中.<br>  2）使用非常复杂-创建索引和搜索索引代码繁杂<br>  3）不支持集群环境-索引数据不同步（不支持大型项目）<br>  4）索引数据如果太多就不行，索引库和应用所在同一个服务器,共同占用硬盘.共用空间少.</p>\n<p>上述Lucene框架中的缺点,ES全部都能解决.</p>\n<h2 id=\"1-3-ES-vs-Solr比较\"><a href=\"#1-3-ES-vs-Solr比较\" class=\"headerlink\" title=\"1.3 ES vs Solr比较\"></a><strong>1.3 ES vs Solr比较</strong></h2><h3 id=\"1-3-1-ES-vs-Solr-检索速度\"><a href=\"#1-3-1-ES-vs-Solr-检索速度\" class=\"headerlink\" title=\"1.3.1 ES vs Solr 检索速度\"></a><strong>1.3.1 ES vs Solr 检索速度</strong></h3><p>当单纯的对已有数据进行搜索时，Solr更快。</p>\n<p><img src=\"../../../../img/ES简介/截图-1660805955959.png\" alt=\"img\" style=\"zoom:50%;\" /></p>\n<p>当实时建立索引时, Solr会产生io阻塞，查询性能较差, Elasticsearch具有明显的优势。</p>\n<p><img src=\"../../../../img/ES简介/截图-1660805955962.png\" alt=\"img\" style=\"zoom:50%;\" /></p>\n<p>大型互联网公司，实际生产环境测试，将搜索引擎从Solr转到 Elasticsearch以后的平均查询速度有了50倍的提升。</p>\n<p><img src=\"../../../../img/ES简介/截图-1660805955963.png\" alt=\"img\" style=\"zoom:67%;\" /></p>\n<p><strong>总结：</strong></p>\n<p>二者安装都很简单。 </p>\n<p>1、Solr 利用 Zookeeper 进行分布式管理，而Elasticsearch 自身带有分布式协调管理功能。<br>2、Solr 支持更多格式的数据，比如JSON、XML、CSV，而 Elasticsearch 仅支持json文件格式。<br>3、Solr 在传统的搜索应用中表现好于 Elasticsearch，但在处理实时搜索应用时效率明显低于 Elasticsearch。<br>4、Solr 是传统搜索应用的有力解决方案，但 Elasticsearch更适用于新兴的实时搜索应用。</p>\n<h3 id=\"1-3-2-ES-vs-关系型数据库\"><a href=\"#1-3-2-ES-vs-关系型数据库\" class=\"headerlink\" title=\"1.3.2 ES vs 关系型数据库\"></a><strong>1.3.2 ES vs 关系型数据库</strong></h3><p><img src=\"../../../../img/2022/%E6%88%AA%E5%9B%BE-1660805955963.png\" alt=\"img\" style=\"zoom:50%;\" /></p>\n<h1 id=\"2-Lucene全文检索框架\"><a href=\"#2-Lucene全文检索框架\" class=\"headerlink\" title=\"2.  Lucene全文检索框架\"></a><strong>2.  Lucene全文检索框架</strong></h1><h2 id=\"2-1-什么是全文检索\"><a href=\"#2-1-什么是全文检索\" class=\"headerlink\" title=\"2.1  什么是全文检索\"></a>2.1  什么是全文检索</h2><p>全文检索是指：</p>\n<ul>\n<li>通过一个程序扫描文本中的每一个单词，针对单词建立索引，并保存该单词在文本中的位置、以及出现的次数</li>\n<li>用户查询时，通过之前建立好的索引来查询，将索引中单词对应的文本位置、出现的次数返回给用户，因为有了具体文本的位置，所以就可以将具体内容读取出来了</li>\n</ul>\n<p><strong>hello   what  world    ====&gt;   hello</strong></p>\n<p>​                                                        <strong>what</strong></p>\n<p>​                                                        <strong>world</strong></p>\n<h2 id=\"2-2-分词原理之倒排索引\"><a href=\"#2-2-分词原理之倒排索引\" class=\"headerlink\" title=\"2.2 分词原理之倒排索引\"></a><strong>2.2 分词原理之倒排索引</strong></h2><p><img src=\"../../../../img/ES简介/截图-1660806069518.png\" alt=\"img\" style=\"zoom: 67%;\" /></p>\n<p><img src=\"../../../../img/ES简介/截图-1660806069519.png\" alt=\"img\" style=\"zoom:67%;\" /></p>\n<p><img src=\"../../../../img/ES简介/截图-1660806069520.png\" alt=\"img\" style=\"zoom:67%;\" /></p>\n<p>倒排索引总结：</p>\n<p>索引就类似于目录，平时我们使用的都是索引，都是通过主键定位到某条数据，那么倒排索引呢，刚好相反，数据对应到主键．这里以一个博客文章的内容为例:</p>\n<p>1.索引</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>文章ID</th>\n<th>文章标题</th>\n<th>文章内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>浅析JAVA设计模式</td>\n<td>JAVA设计模式是每一个JAVA程序员都应该掌握的进阶知识</td>\n</tr>\n<tr>\n<td>2</td>\n<td>JAVA多线程设计模式</td>\n<td>JAVA多线程与设计模式结合</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>2.倒排索引</p>\n<p>假如，我们有一个站内搜索的功能，通过某个关键词来搜索相关的文章，那么这个关键词可能出现在标题中，也可能出现在文章内容中，那我们将会在创建或修改文章的时候，建立一个关键词与文章的对应关系表，这种，我们可以称之为倒排索引,因此倒排索引，也可称之为反向索引．如：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>关键词</th>\n<th>文章ID</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JAVA</td>\n<td>1</td>\n</tr>\n<tr>\n<td>设计模式</td>\n<td>1,2</td>\n</tr>\n<tr>\n<td>多线程</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>注：这里涉及中文分词的问题</p>\n<h1 id=\"3-Elasticsearch中的核心概念\"><a href=\"#3-Elasticsearch中的核心概念\" class=\"headerlink\" title=\"3.  Elasticsearch中的核心概念\"></a><strong>3.  Elasticsearch中的核心概念</strong></h1><h2 id=\"3-1-索引-index\"><a href=\"#3-1-索引-index\" class=\"headerlink\" title=\"3.1  索引 index\"></a><strong>3.1  索引 index</strong></h2><p> 一个索引就是一个拥有几分相似特征的文档的集合。比如说，可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引</p>\n<p> 一个索引由一个名字来标识（必须全部是小写字母的），并且当我们要对对应于这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字</p>\n<h2 id=\"3-2-映射-mapping\"><a href=\"#3-2-映射-mapping\" class=\"headerlink\" title=\"3.2  映射 mapping\"></a><strong>3.2  映射 mapping</strong></h2><p> <strong>ElasticSearch中的映射（Mapping）用来定义一个文档</strong></p>\n<p> mapping是处理数据的方式和规则方面做一些限制，如某个字段的数据类型、默认值、分词器、是否被索引等等，这些都是映射里面可以设置的</p>\n<h2 id=\"3-3-字段Field\"><a href=\"#3-3-字段Field\" class=\"headerlink\" title=\"3.3  字段Field\"></a><strong>3.3  字段Field</strong></h2><p>相当于是数据表的字段|列</p>\n<h2 id=\"3-4-字段类型-Type\"><a href=\"#3-4-字段类型-Type\" class=\"headerlink\" title=\"3.4  字段类型 Type\"></a><strong>3.4  字段类型 Type</strong></h2><p>每一个字段都应该有一个对应的类型，例如：Text、Keyword、Byte等</p>\n<h2 id=\"3-5-文档-document\"><a href=\"#3-5-文档-document\" class=\"headerlink\" title=\"3.5  文档 document\"></a><strong>3.5  文档 document</strong></h2><p>一个文档是一个可被索引的基础信息单元，类似一条记录。文档以JSON（Javascript Object Notation）格式来表示；</p>\n<h2 id=\"3-6-集群-cluster\"><a href=\"#3-6-集群-cluster\" class=\"headerlink\" title=\"3.6  集群 cluster\"></a><strong>3.6  集群 cluster</strong></h2><p>一个集群就是由一个或多个节点组织在一起，它们共同持有整个的数据，并一起提供索引和搜索功能</p>\n<h2 id=\"3-7-节点-node\"><a href=\"#3-7-节点-node\" class=\"headerlink\" title=\"3.7  节点 node\"></a><strong>3.7  节点 node</strong></h2><p>一个节点是集群中的一个服务器，作为集群的一部分，它存储数据，参与集群的索引和搜索功能</p>\n<p> 一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中</p>\n<p>这意味着，如果在网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中</p>\n<p> 在一个集群里，可以拥有任意多个节点。而且，如果当前网络中没有运行任何Elasticsearch节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。</p>\n<h2 id=\"3-8-分片和副本-shards-amp-replicas\"><a href=\"#3-8-分片和副本-shards-amp-replicas\" class=\"headerlink\" title=\"3.8  分片和副本 shards&amp;replicas\"></a><strong>3.8  分片和副本 shards&amp;replicas</strong></h2><h3 id=\"3-8-1-分片\"><a href=\"#3-8-1-分片\" class=\"headerlink\" title=\"3.8.1  分片\"></a><strong>3.8.1  分片</strong></h3><ul>\n<li><p>一个索引可以存储超出单个结点硬件限制的大量数据。比如，一个具有10亿文档的索引占据1TB的磁盘空间，而任一节点都没有这样大的磁盘空间；或者单个节点处理搜索请求，响应太慢</p>\n</li>\n<li><p>为了解决这个问题，Elasticsearch提供了将索引划分成多份的能力，这些份就叫做分片</p>\n</li>\n<li><p>当创建一个索引的时候，可以指定你想要的分片的数量</p>\n</li>\n<li><p>每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上</p>\n</li>\n<li><p>分片很重要，主要有两方面的原因</p>\n</li>\n</ul>\n<p>​        允许水平分割/扩展你的内容容量</p>\n<p>​         允许在分片之上进行分布式的、并行的操作，进而提高性能/吞吐量</p>\n<ul>\n<li>至于一个分片怎样分布，它的文档怎样聚合回搜索请求，是完全由Elasticsearch管理的，对于作为用户来说，这些都是透明的</li>\n</ul>\n<h3 id=\"3-8-2-副本\"><a href=\"#3-8-2-副本\" class=\"headerlink\" title=\"3.8.2  副本\"></a><strong>3.8.2  副本</strong></h3><ul>\n<li>在一个网络/云的环境里，失败随时都可能发生，在某个分片/节点不知怎么的就处于离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的，Elasticsearch允许你创建分片的一份或多份拷贝，这些拷贝叫做副本分片，或者直接叫副本</li>\n<li>副本之所以重要，有两个主要原因<ul>\n<li>在分片/节点失败的情况下，提供了高可用性。注意到复制分片从不与原/主要（original/primary）分片置于同一节点上是非常重要的</li>\n<li>扩展搜索量/吞吐量，因为搜索可以在所有的副本上并行运行，每个索引可以被分成多个分片。一个索引有0个或者多个副本，一旦设置了副本，每个索引就有了主分片和副本分片，分片和副本的数量可以在索引，创建的时候指定。在索引创建之后，可以在任何时候动态地改变副本的数量，但是不能改变分片的数量</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"4-安装Elasticsearch\"><a href=\"#4-安装Elasticsearch\" class=\"headerlink\" title=\"4.  安装Elasticsearch\"></a><strong>4.  安装Elasticsearch</strong></h1><h2 id=\"4-1-安装Elasticsearch\"><a href=\"#4-1-安装Elasticsearch\" class=\"headerlink\" title=\"4.1  安装Elasticsearch\"></a><strong>4.1  安装Elasticsearch</strong></h2><h3 id=\"4-1-1-创建普通用户\"><a href=\"#4-1-1-创建普通用户\" class=\"headerlink\" title=\"4.1.1  创建普通用户\"></a><strong>4.1.1  创建普通用户</strong></h3><p><strong>ES不能使用root用户来启动，必须使用普通用户来安装启动</strong>。这里我们创建一个普通用户以及定义一些常规目录用于存放我们的数据文件以及安装包等。</p>\n<p>创建一个es专门的用户（<strong>必须</strong>）</p>\n<p># 使用root用户在服务器执行以下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先创建组, 再创建用户:</span><br><span class=\"line\">1）创建 elasticsearch 用户组</span><br><span class=\"line\">[root@localhost ~]# groupadd elasticsearch</span><br><span class=\"line\">2）创建用户 sunfy 并设置密码</span><br><span class=\"line\">[root@localhost ~]# useradd sunfy</span><br><span class=\"line\">[root@localhost ~]# passwd sunfy</span><br><span class=\"line\">3）# 创建es文件夹，</span><br><span class=\"line\">并修改owner为sunfy用户</span><br><span class=\"line\">mkdir -p /usr/local/es</span><br><span class=\"line\">4）用户es 添加到 elasticsearch 用户组</span><br><span class=\"line\">[root@localhost ~]# usermod -G elasticsearch sunfy</span><br><span class=\"line\">[root@localhost ~]# chown -R sunfy /usr/local/es/elasticsearch-7.6.1</span><br><span class=\"line\">5）设置sudo权限</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">为了让普通用户有更大的操作权限，我们一般都会给普通用户设置sudo权限，方便普通用户的操作</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">三台机器使用root用户执行visudo命令然后为es用户添加权限</span></span><br><span class=\"line\">[root@localhost ~]# visudo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在root ALL=(ALL) ALL 一行下面</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加sunfy用户 如下:</span></span><br><span class=\"line\">sunfy ALL=(ALL) ALL</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加成功保存后切换到sunfy用户操作</span></span><br><span class=\"line\">[root@localhost ~]# su sunfy</span><br><span class=\"line\">[sunfy@localhost root]$</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-1-2-上传压缩包并解压\"><a href=\"#4-1-2-上传压缩包并解压\" class=\"headerlink\" title=\"4.1.2  上传压缩包并解压\"></a>4.1.2  上传压缩包并解压</h3><p>将es的安装包下载并上传到服务器的/user/local/es路径下，然后进行解压</p>\n<p>使用sunfy用户来执行以下操作，将es安装包上传到指定服务器，并使用es用户执行以下命令解压。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解压Elasticsearch</span></span><br><span class=\"line\">su sunfy</span><br><span class=\"line\">cd /user/local/</span><br><span class=\"line\">tar -zvxf elasticsearch-7.6.1-linux-x86_64.tar.gz -C /usr/local/es/</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-1-3-修改配置文件\"><a href=\"#4-1-3-修改配置文件\" class=\"headerlink\" title=\"4.1.3  修改配置文件\"></a><strong>4.1.3  修改配置文件</strong></h3><h4 id=\"4-1-3-1-修改elasticsearch-yml\"><a href=\"#4-1-3-1-修改elasticsearch-yml\" class=\"headerlink\" title=\"4.1.3.1  修改elasticsearch.yml\"></a><strong>4.1.3.1  修改elasticsearch.yml</strong></h4><p>进入服务器使用<strong>sunfy</strong>用户来修改配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/es/elasticsearch-7.6.1/config</span><br><span class=\"line\">mkdir -p /usr/local/es/elasticsearch-7.6.1/log</span><br><span class=\"line\">mkdir -p /usr/local/es/elasticsearch-7.6.1/data</span><br><span class=\"line\">rm -rf elasticsearch.yml</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">vim elasticsearch.yml</span><br><span class=\"line\">cluster.name: sunfy-es</span><br><span class=\"line\">node.name: node1</span><br><span class=\"line\">path.data: /usr/local/es/elasticsearch-7.6.1/data</span><br><span class=\"line\">path.logs: /usr/local/es/elasticsearch-7.6.1/log</span><br><span class=\"line\">network.host: 0.0.0.0</span><br><span class=\"line\">http.port: 9200</span><br><span class=\"line\">discovery.seed_hosts: [\"服务器IP\"]</span><br><span class=\"line\">cluster.initial_master_nodes: [\"节点名\"]</span><br><span class=\"line\">bootstrap.system_call_filter: false</span><br><span class=\"line\">bootstrap.memory_lock: false</span><br><span class=\"line\">http.cors.enabled: true</span><br><span class=\"line\">http.cors.allow-origin: \"*\"</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-1-3-2-修改jvm-option\"><a href=\"#4-1-3-2-修改jvm-option\" class=\"headerlink\" title=\"4.1.3.2  修改jvm.option\"></a><strong>4.1.3.2  修改jvm.option</strong></h4><p>修改jvm.option配置文件，调整jvm堆内存大小</p>\n<p><strong>node1.sunfy.cn使用sunfy用户</strong>执行以下命令调整jvm堆内存大小，每个人根据自己服务器的内存大小来进行调整。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/es/elasticsearch-7.6.1/config</span><br><span class=\"line\">vim jvm.options</span><br><span class=\"line\">-Xms2g</span><br><span class=\"line\">-Xmx2g</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-修改系统配置，解决启动时候的问题\"><a href=\"#4-2-修改系统配置，解决启动时候的问题\" class=\"headerlink\" title=\"4.2  修改系统配置，解决启动时候的问题\"></a><strong>4.2  修改系统配置，解决启动时候的问题</strong></h2><p>由于现在使用普通用户来安装es服务，且es服务对服务器的资源要求比较多，包括内存大小，线程数等。所以我们需要给普通用户解开资源的束缚</p>\n<h3 id=\"4-2-1-普通用户打开文件的最大数限制\"><a href=\"#4-2-1-普通用户打开文件的最大数限制\" class=\"headerlink\" title=\"4.2.1  普通用户打开文件的最大数限制\"></a><strong>4.2.1  普通用户打开文件的最大数限制</strong></h3><p>问题错误信息描述：</p>\n<blockquote>\n<p>max file descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]</p>\n</blockquote>\n<p>ES因为需要大量的创建索引文件，需要大量的打开系统的文件，所以我们需要解除linux系统当中打开文件最大数目的限制，不然ES启动就会抛错</p>\n<p>三台机器使用sunfy用户执行以下命令解除打开文件数据的限制</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/security/limits.conf</span><br></pre></td></tr></table></figure>\n<p>添加如下内容: 注意*不要去掉了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* soft nofile 65536</span><br><span class=\"line\">* hard nofile 131072</span><br><span class=\"line\">* soft nproc 2048</span><br><span class=\"line\">* hard nproc 4096</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-2-此文件修改后需要重新登录用户，才会生效\"><a href=\"#4-2-2-此文件修改后需要重新登录用户，才会生效\" class=\"headerlink\" title=\"4.2.2 此文件修改后需要重新登录用户，才会生效\"></a><strong>4.2.2</strong> <strong>此文件修改后需要重新登录用户，才会生效</strong></h3><p><strong>普通用户启动线程数限制</strong></p>\n<p>问题错误信息描述</p>\n<blockquote>\n<p>max number of threads [1024] for user [es] likely too low, increase to at least [4096]</p>\n</blockquote>\n<p>修改普通用户可以创建的最大线程数</p>\n<blockquote>\n<p><em>max number of threads [1024] for user [es] likely too low, increase to at least [4096]</em>原因：无法创建本地线程问题,用户最大可创建线程数太小解决方案：修改90-nproc.conf 配置文件。</p>\n</blockquote>\n<p>三台机器使用sunfy用户执行以下命令修改配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Centos6</span><br><span class=\"line\">sudo vi /etc/security/limits.d/90-nproc.conf</span><br><span class=\"line\">Centos7</span><br><span class=\"line\">sudo vi /etc/security/limits.d/20-nproc.conf</span><br></pre></td></tr></table></figure>\n<p>找到如下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* soft nproc 1024#修改为</span><br><span class=\"line\">* soft nproc 4096</span><br></pre></td></tr></table></figure>\n<p><strong>4.2.3 普通用户调大虚拟内存</strong></p>\n<p>错误信息描述：</p>\n<blockquote>\n<p>max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]</p>\n</blockquote>\n<p>调大系统的虚拟内存</p>\n<p>原因：最大虚拟内存太小</p>\n<p>每次启动机器都手动执行下。</p>\n<p>三台机器执行以下命令   </p>\n<blockquote>\n<p>编辑 /etc/sysctl.conf，追加以下内容：vm.max_map_count=262144 保存后，执行：sysctl -p </p>\n</blockquote>\n<font color=\"red\">备注：以上三个问题解决完成之后，重新连接secureCRT或者重新连接xshell生效 </font>\n\n<h2 id=\"4-3-启动ES服务\"><a href=\"#4-3-启动ES服务\" class=\"headerlink\" title=\"4.3  启动ES服务\"></a><strong>4.3  启动ES服务</strong></h2><p>三台机器使用sunfy用户执行以下命令启动es服务</p>\n<blockquote>\n<p>nohup /usr/local/es/elasticsearch-7.6.1/bin/elasticsearch 2&gt;&amp;1 &amp;</p>\n</blockquote>\n<p>后台启动ES 进入bin目录  ./elasticsearch  -d</p>\n<p>启动成功之后jsp即可看到es的服务进程，并且访问页面</p>\n<blockquote>\n<p><a href=\"http://192.168.21.130:9200/?pretty\" target=\"_blank\" rel=\"noopener\">http://192.168.21.130:9200/?pretty</a></p>\n</blockquote>\n<p>能够看到es启动之后的一些信息</p>\n<p>注意：如果哪一台机器服务启动失败，那么就到哪一台机器的</p>\n<blockquote>\n<p>/usr/local/es/elasticsearch-7.6.1/log</p>\n</blockquote>\n<p>这个路径下面去查看错误日志</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关闭Linux防火墙</span><br><span class=\"line\">永久性生效，重启后不会复原</span><br><span class=\"line\">开启： chkconfig iptables on</span><br><span class=\"line\">关闭： chkconfig iptables off</span><br><span class=\"line\">即时生效，重启后复原</span><br><span class=\"line\">开启： service iptables start</span><br><span class=\"line\">关闭： service iptables stop</span><br></pre></td></tr></table></figure>\n<p>注意:启动ES的时候出现 Permission denied</p>\n<p>原因：当前的用户没有对XX文件或目录的操作权限</p>\n<h1 id=\"5-客户端Kibana安装\"><a href=\"#5-客户端Kibana安装\" class=\"headerlink\" title=\"5 客户端Kibana安装\"></a><strong>5 客户端Kibana安装</strong></h1><h2 id=\"5-1客户端可以分为图形界面客户端-和代码客户端\"><a href=\"#5-1客户端可以分为图形界面客户端-和代码客户端\" class=\"headerlink\" title=\"5.1客户端可以分为图形界面客户端,和代码客户端.\"></a><strong>5.1客户端可以分为图形界面客户端,和代码客户端.</strong></h2><h3 id=\"5-2-ES主流客户端Kibana，开放9200端口与图形界面客户端交互\"><a href=\"#5-2-ES主流客户端Kibana，开放9200端口与图形界面客户端交互\" class=\"headerlink\" title=\"5.2 ES主流客户端Kibana，开放9200端口与图形界面客户端交互\"></a>5.2 ES主流客户端Kibana，开放9200端口与图形界面客户端交互</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)下载Kibana放之/usr/local/es目录中</span><br><span class=\"line\">2)解压文件：tar -zxvf kibana-X.X.X-linux-x86_64.tar.gz</span><br><span class=\"line\">3)进入/usr/local/es/kibana-X.X.X-linux-x86_64/config目录</span><br><span class=\"line\">4）使用vi编辑器：vi kibana.yml</span><br><span class=\"line\">  server.port: 5601</span><br><span class=\"line\">  server.host: \"服务器IP\"</span><br><span class=\"line\">  elasticsearch.hosts: [\"http://IP:9200\"]  #这里是elasticsearch的访问地址</span><br><span class=\"line\">5）启动Kibana</span><br><span class=\"line\">/usr/local/es/kibana-7.6.1-linux-x86_64/bin/kibana</span><br><span class=\"line\">  后台启动kibana</span><br><span class=\"line\">nohup  ./kibana &amp;</span><br><span class=\"line\">6）访问Kibana</span><br><span class=\"line\">http://ip:5601/app/kibana</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-安装IK分词器\"><a href=\"#6-安装IK分词器\" class=\"headerlink\" title=\"6  安装IK分词器\"></a><strong>6  安装IK分词器</strong></h1><p>我们后续也需要使用Elasticsearch来进行中文分词，所以需要单独给Elasticsearch安装IK分词器插件。以下为具体安装步骤：</p>\n<p>6.1 下载Elasticsearch IK分词器</p>\n<blockquote>\n<p><a href=\"https://github.com/medcl/elasticsearch-analysis-ik/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p>\n</blockquote>\n<p>6.2 切换到sunfy用户，并在es的安装目录下/plugins创建ik</p>\n<blockquote>\n<p>mkdir -p /usr/local/es/elasticsearch-7.6.1/plugins/ik</p>\n</blockquote>\n<p>6.3 将下载的ik分词器上传并解压到该目录</p>\n<blockquote>\n<p>cd /usr/local/es/elasticsearch-7.6.1/plugins/ik unzip  elasticsearch-analysis-ik-7.6.1.zip </p>\n</blockquote>\n<p>6.4 重启Elasticsearch    </p>\n<p>6.5 测试分词效果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST _analyze</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\"analyzer\":\"standard\",</span><br><span class=\"line\">\"text\":\"我爱你中国\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST _analyze</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\"analyzer\": \"ik_smart\",</span><br><span class=\"line\">\"text\": \"中华人民共和国\"</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">ik_smart:会做最粗粒度的拆分</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST _analyze</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\"analyzer\":\"ik_max_word\",</span><br><span class=\"line\">\"text\":\"我爱你中国\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">ik_max_word:会将文本做最细粒度的拆分</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"7、指定IK分词器作为默认分词器\"><a href=\"#7、指定IK分词器作为默认分词器\" class=\"headerlink\" title=\"7、指定IK分词器作为默认分词器\"></a><strong>7、指定IK分词器作为默认分词器</strong></h1><p>ES的默认分词设置是standard，这个在中文分词时就比较尴尬了，会单字拆分，比如我搜索关键词“清华大学”，这时候会按“清”，“华”，“大”，“学”去分词，然后搜出来的都是些“清清的河水”，“中华儿女”，“地大物博”，“学而不思则罔”之类的莫名其妙的结果，这里我们就想把这个分词方式修改一下，于是呢，就想到了ik分词器，有两种ik_smart和ik_max_word。</p>\n<p>ik_smart会将“清华大学”整个分为一个词，而ik_max_word会将“清华大学”分为“清华大学”，“清华”和“大学”，按需选其中之一就可以了。</p>\n<p>修改默认分词方法(这里修改school_index索引的默认分词为：ik_max_word)：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /school_index</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"settings\"</span> : &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"index\"</span> : &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"analysis.analyzer.default.type\"</span>: <span class=\"string\">\"ik_max_word\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-ES数据管理\"><a href=\"#8-ES数据管理\" class=\"headerlink\" title=\"8.ES数据管理\"></a><strong>8.ES数据管理</strong></h1><h2 id=\"8-1-ES数据管理概述\"><a href=\"#8-1-ES数据管理概述\" class=\"headerlink\" title=\"8.1 ES数据管理概述\"></a><strong>8.1 ES数据管理概述</strong></h2><p>ES是面向文档(document oriented)的，这意味着它可以存储整个对象或文档(document)。</p>\n<p>然而它不仅仅是存储，还会索引(index)每个文档的内容使之可以被搜索。</p>\n<p>在ES中，你可以对文档（而非成行成列的数据）进行索引、搜索、排序、过滤。</p>\n<p>ES使用JSON作为文档序列化格式。</p>\n<p>JSON现在已经被大多语言所支持，而且已经成为NoSQL领域的标准格式。</p>\n<p>ES存储的一个员工文档的格式示例：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"584614151@qq.com\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"张三\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"interests\"</span>: [ <span class=\"string\">\"篮球\"</span>, <span class=\"string\">\"健身\"</span> ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-2-基本操作\"><a href=\"#8-2-基本操作\" class=\"headerlink\" title=\"8.2 基本操作\"></a><strong>8.2 基本操作</strong></h2><p>1) 创建索引</p>\n<p>格式: PUT /索引名称</p>\n<p>举例: PUT /es_db</p>\n<p>2) 查询索引</p>\n<p>格式: GET /索引名称</p>\n<p>举例: GET /es_db</p>\n<p>3) 删除索引</p>\n<p>格式: DELETE /索引名称</p>\n<p>举例: DELETE /es_db         </p>\n<p>4) 添加文档 </p>\n<p>格式: PUT /索引名称/类型/id</p>\n<p>5) 修改文档 </p>\n<p>格式: PUT /索引名称/类型/id</p>\n<p>注意:POST和PUT都能起到创建/更新的作用</p>\n<ul>\n<li>需要注意的是==PUT==需要对一个具体的资源进行操作也就是要确定id才能进行==更新/创建，而==POST==是可以针对整个资源集合进行操作的，如果不写id就由ES生成一个唯一id进行==创建==新文档，如果填了id那就针对这个id的文档进行创建/更新</li>\n<li>PUT只会将json数据都进行替换, POST只会更新相同字段的值</li>\n<li>PUT与DELETE都是幂等性操作, 即不论操作多少次, 结果都一样</li>\n</ul>\n<p>6) 查询文档</p>\n<p>格式: GET /索引名称/类型/id </p>\n<p>举例: GET /es_db/_doc/1</p>\n<p>7) 删除文档</p>\n<p>格式: DELETE /索引名称/类型/id </p>\n<p>举例: DELETE /es_db/_doc/1</p>\n<h1 id=\"9-Restful认识\"><a href=\"#9-Restful认识\" class=\"headerlink\" title=\"9.Restful认识\"></a><strong>9.Restful认识</strong></h1><p>Restful是一种面向资源的架构风格，可以简单理解为：使用URL定位资源，用HTTP动词（GET,POST,DELETE,PUT）描述操作。 基于Restful API ES和所有客户端的交互都是使用JSON格式的数据.</p>\n<p>其他所有程序语言都可以使用RESTful API，通过9200端口的与ES进行通信</p>\n<p>GET查询</p>\n<p>PUT添加</p>\n<p>POST修改</p>\n<p>DELE删除</p>\n<p><strong>使用Restful的好处：</strong></p>\n<p>透明性，暴露资源存在。</p>\n<p>充分利用 HTTP 协议本身语义，不同请求方式进行不同的操作</p>\n<h1 id=\"10-查询操作\"><a href=\"#10-查询操作\" class=\"headerlink\" title=\"10.查询操作\"></a><strong>10.查询操作</strong></h1><p><strong>10</strong>.1 查询当前类型中的所有文档 _search </p>\n<blockquote>\n<p>格式: GET /索引名称/类型/_search 举例: GET /es_db/_doc/_search SQL:  select * from student</p>\n</blockquote>\n<p><strong>10</strong>.2 条件查询, 如要查询age等于28岁的 _search?q=<em>:**</em></p>\n<blockquote>\n<p>格式: GET /索引名称/类型/_search?q=<em>:**</em> 举例: GET /es_db/_doc/_search?q=age:28 SQL:  select * from student where age = 28</p>\n</blockquote>\n<p><strong>10</strong>.3 范围查询, 如要查询age在25至26岁之间的 _search?q=<strong>*[</strong> TO **]  注意: TO 必须为大写</p>\n<blockquote>\n<p>格式: GET /索引名称/类型/_search?q=<em>**[25 TO 26] 举例: GET /es_db/_doc/_search?q=age[25 TO 26] SQL:  select </em> from student where age between 25 and 26    </p>\n</blockquote>\n<p><strong>10</strong>.4 根据多个ID进行批量查询 _mget</p>\n<blockquote>\n<p>格式: GET /索引名称/类型/_mget 举例: GET /es_db/_doc/_mget { “ids”:[“1”,”2”]   } SQL:  select * from student where id in (1,2)        </p>\n</blockquote>\n<p><strong>10</strong>.5 查询年龄小于等于28岁的 :&lt;=</p>\n<blockquote>\n<p>格式: GET /索引名称/类型/_search?q=age:&lt;=<em>* 举例: GET /es_db/_doc/_search?q=age:&lt;=28 SQL:  select </em> from student where age &lt;= 28</p>\n</blockquote>\n<p><strong>10</strong>.6 查询年龄大于28前的 :&gt;</p>\n<blockquote>\n<p>格式: GET /索引名称/类型/_search?q=age:&gt;<em>* 举例: GET /es_db/_doc/_search?q=age:&gt;28 SQL:  select </em> from student where age &gt; 28</p>\n</blockquote>\n<p><strong>10</strong>.7 分页查询 from=<em>&amp;size=</em></p>\n<blockquote>\n<p>格式: GET /索引名称/类型/_search?q=age[25 TO 26]&amp;from=0&amp;size=1 举例: GET /es_db/_doc/_search?q=age[25 TO 26]&amp;from=0&amp;size=1 SQL:  select * from student where age between 25 and 26 limit 0, 1 </p>\n</blockquote>\n<p><strong>10</strong>.8 对查询结果只输出某些字段 _source=字段,字段</p>\n<blockquote>\n<p>格式: GET /索引名称/类型/_search?_source=字段,字段 举例: GET /es_db/_doc/_search?_source=name,age SQL:  select name,age from student</p>\n</blockquote>\n<p><strong>10</strong>.9 对查询结果排序 sort=字段:desc/asc</p>\n<blockquote>\n<p>格式: GET /索引名称/类型/_search?sort=字段 desc 举例: GET /es_db/_doc/_search?sort=age:desc SQL:  select * from student order by age desc</p>\n</blockquote>\n","next":{"title":"K8s 介绍","path":"api/articles/resource-RPC-云原生-K8s介绍.json","image":"/img/header_img/rpc/k8s基础入门.png","num_read":750,"num_like":841,"num_collection":26,"num_comments":185},"prev":{"title":"Oracle-审计日志","path":"api/articles/resource-DB-Oracle-Oracle审计日志.json","image":"/img/header_img/DB/oracle审计日志.png","num_read":1261,"num_like":744,"num_collection":294,"num_comments":93},"categories":[{"name":"微服务","path":"api/categories/微服务.json","pathContent":"api/categories/微服务","description":"一种云原生框架方法，其中单个应用程序由许多松散耦合且可独立部署的较小组件或服务组成","cover":"https://sunfy9.gitee.io/project/photo/project/MicroService.PNG"}],"tags":[{"name":"ElasticSearch","path":"api/tags/ElasticSearch.json","pathContent":"api/tags/ElasticSearch","description":"[ElasticSearch]暂未设置说明","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"},{"name":"ELK","path":"api/tags/ELK.json","pathContent":"api/tags/ELK","description":"[ELK]暂未设置说明","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"}]}