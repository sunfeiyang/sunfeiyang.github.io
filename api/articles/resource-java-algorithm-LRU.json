{"title":"LRU缓存算法的实现","num_read":65,"num_like":982,"num_collection":163,"num_comments":195,"slug":"resource-java-algorithm-LRU","date":"2022-02-14T16:00:00.000Z","img":"/img/header_img/algorithm/LRU.png","format":"max","_id":"clhrbp2di008eo5lg81cof7df","top":true,"project":"algorithm","type":"hot","subtitle":"一种常见的页面置换算法","site":{"data":{}},"updated":"2022-09-19T15:04:34.890Z","author":"Sunfy","comments":true,"path":"api/articles/resource-java-algorithm-LRU.json","webPath":"2022/02/15/resource-java-algorithm-LRU/","permalink":"https://sunfy9.gitee.io/2022/02/15/resource-java-algorithm-LRU/","excerpt":null,"covers":["http%3A%2F%2Fpng.xssyun.com%2Fxssyun%2F2019%2F12%2FbErqy2.jpg&amp;refer=http%3A%2F%2Fpng.xssyun.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg","../../../../img/LRU/image-20220215093636865.png","../../../../img/LRU/image-20220215094108145.png","../../../../img/LRU/image-20220215094122370.png","../../../../img/LRU/image-20220215094142957.png","../../../../img/LRU/image-20220215094154828.png","../../../../img/LRU/image-20220215094211701.png","../../../../img/LRU/image-20220215094226197.png","../../../../img/2022/end-1660211354531.gif"],"keywords":"sunfy, hexo-theme-snail","content":"<h1 id=\"LRU\"><a href=\"#LRU\" class=\"headerlink\" title=\"LRU\"></a>LRU</h1><p>LRU（Least Recently Used）是一种常见的页面置换算法，在计算中，所有的文件操作都要放在内存中进行，然而计算机内存大小是固定的，所以我们不可能把所有的文件都加载到内存，因此我们需要制定一种策略对加入到内存中的文件进行选择。</p>\n<p>常见的页面置换算法有如下几种：</p>\n<ul>\n<li>LRU 最近最久未使用</li>\n<li>FIFO 先进先出置换算法 类似队列</li>\n<li>OPT 最佳置换算法 （理想中存在的）</li>\n<li>NRU Clock置换算法</li>\n<li>LFU 最少使用置换算法</li>\n<li>PBA 页面缓冲算法</li>\n</ul>\n<h1 id=\"LRU原理\"><a href=\"#LRU原理\" class=\"headerlink\" title=\"LRU原理\"></a>LRU原理</h1><p>LRU的设计原理就是，当数据在最近一段时间经常被访问，那么它在以后也会经常被访问。这就意味着，如果经常访问的数据，我们需要让其能够快速命中，而不常访问的数据，我们在容量超出限制内，要将其淘汰。</p>\n<p>当我们的数据按照如下顺序进行访问时，LRU的工作原理如下：<sunfy-line></p>\n<p><img src=\"../../../../img/LRU/src=http%3A%2F%2Fpng.xssyun.com%2Fxssyun%2F2019%2F12%2FbErqy2.jpg&amp;refer=http%3A%2F%2Fpng.xssyun.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg\" alt=\"img\"></p>\n<p>正如上面图所表示的意思：每次访问的数据都会放在栈顶，当访问的数据不在内存中，且栈内数据存储满了，我们就要选择移除栈底的元素，因为在栈底部的数据访问的频率是比较低的。所以要将其淘汰。</p>\n<h1 id=\"LRU的实现\"><a href=\"#LRU的实现\" class=\"headerlink\" title=\"LRU的实现\"></a>LRU的实现</h1><p>如何来设计一款LRU算法呢？对于这种类似序列的结构我们一般可以选择链表或者是数组来构建。</p>\n<p>差异对比：</p>\n<ul>\n<li>数组 查询比较快，但是对于增删来说是一个不是一个好的选择</li>\n<li>链表 查询比较慢，但是对于增删来说十分方便O(1)时间复杂度内搞定</li>\n</ul>\n<p>有没有办法既能够让其搜索快，又能够快速进行增删操作。<br>我们可以选择链表+hash表，hash表的搜索可以达到0(1)时间复杂度，这样就完美的解决我们搜索时间慢的问题了</p>\n<h2 id=\"基于链表-Hash表\"><a href=\"#基于链表-Hash表\" class=\"headerlink\" title=\"基于链表+Hash表\"></a>基于链表+Hash表</h2><p>Hash表，在Java中HashMap是我们的不二选择<br>链表，Node一个双向链表的实现，Node中存放的是数结构如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> K key;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> V value;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node&lt;K,V&gt; prev;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node&lt;K,V&gt; next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们通过HashMap中key存储Node的key,value存储Node来建立Map对Node的映射关系。我们将HashMap看作是一张检索表，我们可以快速的检索到我们需要定位的Node</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>大致思路:</p>\n<p>1&gt; 构建双向链表节点ListNode，应包含key,value,prev,next这几个基本属性</p>\n<p>2&gt; 对于Cache对象来说，我们需要规定缓存的容量，所以在初始化时，设置容量大小，然后实例化双向链表的head,tail，并让head.next-&gt;tail , tail.prev-&gt;head，这样我们的双向链表构建完成</p>\n<p>3&gt; 对于get操作,我们首先查阅hashmap，如果存在的话，直接将Node从当前位置移除，然后插入到链表的首部，在链表中实现删除直接让node的前驱节点指向后继节点，很方便.如果不存在，那么直接返回Null</p>\n<p>4&gt; 对于put操作，比较麻烦。</p>\n<p><img src=\"../../../../img/LRU/image-20220215093636865.png\" alt=\"image-20220215093636865\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> top.sunfy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LRUCache</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 容量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> capacity = <span class=\"number\">1024</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Node记录表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, ListNode&lt;String, V&gt;&gt; table = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 双向链表头部</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ListNode&lt;String, V&gt; head;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 双向链表尾部</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ListNode&lt;String, V&gt; tail;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LRUCache</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capacity = capacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LRUCache</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> ListNode&lt;&gt;();</span><br><span class=\"line\">        tail = <span class=\"keyword\">new</span> ListNode&lt;&gt;();</span><br><span class=\"line\">        head.next = tail;</span><br><span class=\"line\">        head.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        tail.prev = head;</span><br><span class=\"line\">        tail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        ListNode&lt;String, V&gt; node = table.get(key);</span><br><span class=\"line\">        <span class=\"comment\">//如果Node不在表中，代表缓存中并没有</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果存在，则需要移动Node节点到表头</span></span><br><span class=\"line\">        <span class=\"comment\">//截断链表，node.prev -&gt; node  -&gt; node.next ====&gt; node.prev -&gt; node.next</span></span><br><span class=\"line\">        <span class=\"comment\">//         node.prev &lt;- node &lt;- node.next  ====&gt;  node.prev &lt;- node.next</span></span><br><span class=\"line\">        node.prev.next = node.next;</span><br><span class=\"line\">        node.next.prev = node.prev;</span><br><span class=\"line\">        <span class=\"comment\">//移动节点到表头</span></span><br><span class=\"line\">        node.next = head.next;</span><br><span class=\"line\">        head.next.prev = node;</span><br><span class=\"line\">        node.prev = head;</span><br><span class=\"line\">        head.next = node;</span><br><span class=\"line\">        <span class=\"comment\">//存在缓存表</span></span><br><span class=\"line\">        table.put(key, node);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String key, V value)</span> </span>&#123;</span><br><span class=\"line\">        ListNode&lt;String, V&gt; node = table.get(key);</span><br><span class=\"line\">        <span class=\"comment\">//如果Node不在表中，代表缓存中并没有</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (table.size() == capacity) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//超过容量了 ,首先移除尾部的节点</span></span><br><span class=\"line\">                table.remove(tail.prev.key);</span><br><span class=\"line\">                tail.prev = tail.next;</span><br><span class=\"line\">                tail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                tail = tail.prev;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = <span class=\"keyword\">new</span> ListNode&lt;&gt;();</span><br><span class=\"line\">            node.key = key;</span><br><span class=\"line\">            node.value = value;</span><br><span class=\"line\">            table.put(key, node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果存在，则需要移动Node节点到表头</span></span><br><span class=\"line\">        node.next = head.next;</span><br><span class=\"line\">        head.next.prev = node;</span><br><span class=\"line\">        node.prev = head;</span><br><span class=\"line\">        head.next = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 双向链表内部类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> K key;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> V value;</span><br><span class=\"line\">        ListNode&lt;K, V&gt; prev;</span><br><span class=\"line\">        ListNode&lt;K, V&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ListNode</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ListNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        LRUCache&lt;ListNode&gt; cache = <span class=\"keyword\">new</span> LRUCache&lt;&gt;(<span class=\"number\">4</span>);</span><br><span class=\"line\">        ListNode&lt;String, Integer&gt; node1 = <span class=\"keyword\">new</span> ListNode&lt;&gt;(<span class=\"string\">\"key1\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        ListNode&lt;String, Integer&gt; node2 = <span class=\"keyword\">new</span> ListNode&lt;&gt;(<span class=\"string\">\"key2\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        ListNode&lt;String, Integer&gt; node3 = <span class=\"keyword\">new</span> ListNode&lt;&gt;(<span class=\"string\">\"key3\"</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        ListNode&lt;String, Integer&gt; node4 = <span class=\"keyword\">new</span> ListNode&lt;&gt;(<span class=\"string\">\"key4\"</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">        ListNode&lt;String, Integer&gt; node5 = <span class=\"keyword\">new</span> ListNode&lt;&gt;(<span class=\"string\">\"key5\"</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">        cache.put(<span class=\"string\">\"key1\"</span>, node1);</span><br><span class=\"line\">        cache.put(<span class=\"string\">\"key2\"</span>, node2);</span><br><span class=\"line\">        cache.put(<span class=\"string\">\"key3\"</span>, node3);</span><br><span class=\"line\">        cache.put(<span class=\"string\">\"key4\"</span>, node4);</span><br><span class=\"line\">        cache.get(<span class=\"string\">\"key2\"</span>);</span><br><span class=\"line\">        cache.put(<span class=\"string\">\"key5\"</span>, node5);</span><br><span class=\"line\">        cache.get(<span class=\"string\">\"key2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>断点执行情况：</p>\n<p><img src=\"../../../../img/LRU/image-20220215094108145.png\" alt=\"image-20220215094108145\"></p>\n<p><img src=\"../../../../img/LRU/image-20220215094122370.png\" alt=\"image-20220215094122370\"></p>\n<p><img src=\"../../../../img/LRU/image-20220215094142957.png\" alt=\"image-20220215094142957\"></p>\n<p><img src=\"../../../../img/LRU/image-20220215094154828.png\" alt=\"image-20220215094154828\"></p>\n<p><img src=\"../../../../img/LRU/image-20220215094211701.png\" alt=\"image-20220215094211701\"></p>\n<p><img src=\"../../../../img/LRU/image-20220215094226197.png\" alt=\"image-20220215094226197\"></p>\n<p><img src=\"../../../../img/2022/end-1660211354531.gif\" alt=\"end\"></p>\n","more":"<h1 id=\"LRU\"><a href=\"#LRU\" class=\"headerlink\" title=\"LRU\"></a>LRU</h1><p>LRU（Least Recently Used）是一种常见的页面置换算法，在计算中，所有的文件操作都要放在内存中进行，然而计算机内存大小是固定的，所以我们不可能把所有的文件都加载到内存，因此我们需要制定一种策略对加入到内存中的文件进行选择。</p>\n<p>常见的页面置换算法有如下几种：</p>\n<ul>\n<li>LRU 最近最久未使用</li>\n<li>FIFO 先进先出置换算法 类似队列</li>\n<li>OPT 最佳置换算法 （理想中存在的）</li>\n<li>NRU Clock置换算法</li>\n<li>LFU 最少使用置换算法</li>\n<li>PBA 页面缓冲算法</li>\n</ul>\n<h1 id=\"LRU原理\"><a href=\"#LRU原理\" class=\"headerlink\" title=\"LRU原理\"></a>LRU原理</h1><p>LRU的设计原理就是，当数据在最近一段时间经常被访问，那么它在以后也会经常被访问。这就意味着，如果经常访问的数据，我们需要让其能够快速命中，而不常访问的数据，我们在容量超出限制内，要将其淘汰。</p>\n<p>当我们的数据按照如下顺序进行访问时，LRU的工作原理如下：<sunfy-line></p>\n<p><img src=\"../../../../img/LRU/src=http%3A%2F%2Fpng.xssyun.com%2Fxssyun%2F2019%2F12%2FbErqy2.jpg&amp;refer=http%3A%2F%2Fpng.xssyun.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg\" alt=\"img\"></p>\n<p>正如上面图所表示的意思：每次访问的数据都会放在栈顶，当访问的数据不在内存中，且栈内数据存储满了，我们就要选择移除栈底的元素，因为在栈底部的数据访问的频率是比较低的。所以要将其淘汰。</p>\n<h1 id=\"LRU的实现\"><a href=\"#LRU的实现\" class=\"headerlink\" title=\"LRU的实现\"></a>LRU的实现</h1><p>如何来设计一款LRU算法呢？对于这种类似序列的结构我们一般可以选择链表或者是数组来构建。</p>\n<p>差异对比：</p>\n<ul>\n<li>数组 查询比较快，但是对于增删来说是一个不是一个好的选择</li>\n<li>链表 查询比较慢，但是对于增删来说十分方便O(1)时间复杂度内搞定</li>\n</ul>\n<p>有没有办法既能够让其搜索快，又能够快速进行增删操作。<br>我们可以选择链表+hash表，hash表的搜索可以达到0(1)时间复杂度，这样就完美的解决我们搜索时间慢的问题了</p>\n<h2 id=\"基于链表-Hash表\"><a href=\"#基于链表-Hash表\" class=\"headerlink\" title=\"基于链表+Hash表\"></a>基于链表+Hash表</h2><p>Hash表，在Java中HashMap是我们的不二选择<br>链表，Node一个双向链表的实现，Node中存放的是数结构如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> K key;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> V value;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node&lt;K,V&gt; prev;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node&lt;K,V&gt; next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们通过HashMap中key存储Node的key,value存储Node来建立Map对Node的映射关系。我们将HashMap看作是一张检索表，我们可以快速的检索到我们需要定位的Node</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>大致思路:</p>\n<p>1&gt; 构建双向链表节点ListNode，应包含key,value,prev,next这几个基本属性</p>\n<p>2&gt; 对于Cache对象来说，我们需要规定缓存的容量，所以在初始化时，设置容量大小，然后实例化双向链表的head,tail，并让head.next-&gt;tail , tail.prev-&gt;head，这样我们的双向链表构建完成</p>\n<p>3&gt; 对于get操作,我们首先查阅hashmap，如果存在的话，直接将Node从当前位置移除，然后插入到链表的首部，在链表中实现删除直接让node的前驱节点指向后继节点，很方便.如果不存在，那么直接返回Null</p>\n<p>4&gt; 对于put操作，比较麻烦。</p>\n<p><img src=\"../../../../img/LRU/image-20220215093636865.png\" alt=\"image-20220215093636865\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> top.sunfy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LRUCache</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 容量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> capacity = <span class=\"number\">1024</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Node记录表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, ListNode&lt;String, V&gt;&gt; table = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 双向链表头部</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ListNode&lt;String, V&gt; head;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 双向链表尾部</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ListNode&lt;String, V&gt; tail;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LRUCache</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capacity = capacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LRUCache</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> ListNode&lt;&gt;();</span><br><span class=\"line\">        tail = <span class=\"keyword\">new</span> ListNode&lt;&gt;();</span><br><span class=\"line\">        head.next = tail;</span><br><span class=\"line\">        head.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        tail.prev = head;</span><br><span class=\"line\">        tail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        ListNode&lt;String, V&gt; node = table.get(key);</span><br><span class=\"line\">        <span class=\"comment\">//如果Node不在表中，代表缓存中并没有</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果存在，则需要移动Node节点到表头</span></span><br><span class=\"line\">        <span class=\"comment\">//截断链表，node.prev -&gt; node  -&gt; node.next ====&gt; node.prev -&gt; node.next</span></span><br><span class=\"line\">        <span class=\"comment\">//         node.prev &lt;- node &lt;- node.next  ====&gt;  node.prev &lt;- node.next</span></span><br><span class=\"line\">        node.prev.next = node.next;</span><br><span class=\"line\">        node.next.prev = node.prev;</span><br><span class=\"line\">        <span class=\"comment\">//移动节点到表头</span></span><br><span class=\"line\">        node.next = head.next;</span><br><span class=\"line\">        head.next.prev = node;</span><br><span class=\"line\">        node.prev = head;</span><br><span class=\"line\">        head.next = node;</span><br><span class=\"line\">        <span class=\"comment\">//存在缓存表</span></span><br><span class=\"line\">        table.put(key, node);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String key, V value)</span> </span>&#123;</span><br><span class=\"line\">        ListNode&lt;String, V&gt; node = table.get(key);</span><br><span class=\"line\">        <span class=\"comment\">//如果Node不在表中，代表缓存中并没有</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (table.size() == capacity) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//超过容量了 ,首先移除尾部的节点</span></span><br><span class=\"line\">                table.remove(tail.prev.key);</span><br><span class=\"line\">                tail.prev = tail.next;</span><br><span class=\"line\">                tail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                tail = tail.prev;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = <span class=\"keyword\">new</span> ListNode&lt;&gt;();</span><br><span class=\"line\">            node.key = key;</span><br><span class=\"line\">            node.value = value;</span><br><span class=\"line\">            table.put(key, node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果存在，则需要移动Node节点到表头</span></span><br><span class=\"line\">        node.next = head.next;</span><br><span class=\"line\">        head.next.prev = node;</span><br><span class=\"line\">        node.prev = head;</span><br><span class=\"line\">        head.next = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 双向链表内部类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> K key;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> V value;</span><br><span class=\"line\">        ListNode&lt;K, V&gt; prev;</span><br><span class=\"line\">        ListNode&lt;K, V&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ListNode</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ListNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        LRUCache&lt;ListNode&gt; cache = <span class=\"keyword\">new</span> LRUCache&lt;&gt;(<span class=\"number\">4</span>);</span><br><span class=\"line\">        ListNode&lt;String, Integer&gt; node1 = <span class=\"keyword\">new</span> ListNode&lt;&gt;(<span class=\"string\">\"key1\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        ListNode&lt;String, Integer&gt; node2 = <span class=\"keyword\">new</span> ListNode&lt;&gt;(<span class=\"string\">\"key2\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        ListNode&lt;String, Integer&gt; node3 = <span class=\"keyword\">new</span> ListNode&lt;&gt;(<span class=\"string\">\"key3\"</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        ListNode&lt;String, Integer&gt; node4 = <span class=\"keyword\">new</span> ListNode&lt;&gt;(<span class=\"string\">\"key4\"</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">        ListNode&lt;String, Integer&gt; node5 = <span class=\"keyword\">new</span> ListNode&lt;&gt;(<span class=\"string\">\"key5\"</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">        cache.put(<span class=\"string\">\"key1\"</span>, node1);</span><br><span class=\"line\">        cache.put(<span class=\"string\">\"key2\"</span>, node2);</span><br><span class=\"line\">        cache.put(<span class=\"string\">\"key3\"</span>, node3);</span><br><span class=\"line\">        cache.put(<span class=\"string\">\"key4\"</span>, node4);</span><br><span class=\"line\">        cache.get(<span class=\"string\">\"key2\"</span>);</span><br><span class=\"line\">        cache.put(<span class=\"string\">\"key5\"</span>, node5);</span><br><span class=\"line\">        cache.get(<span class=\"string\">\"key2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>断点执行情况：</p>\n<p><img src=\"../../../../img/LRU/image-20220215094108145.png\" alt=\"image-20220215094108145\"></p>\n<p><img src=\"../../../../img/LRU/image-20220215094122370.png\" alt=\"image-20220215094122370\"></p>\n<p><img src=\"../../../../img/LRU/image-20220215094142957.png\" alt=\"image-20220215094142957\"></p>\n<p><img src=\"../../../../img/LRU/image-20220215094154828.png\" alt=\"image-20220215094154828\"></p>\n<p><img src=\"../../../../img/LRU/image-20220215094211701.png\" alt=\"image-20220215094211701\"></p>\n<p><img src=\"../../../../img/LRU/image-20220215094226197.png\" alt=\"image-20220215094226197\"></p>\n<p><img src=\"../../../../img/2022/end-1660211354531.gif\" alt=\"end\"></p>\n","next":{"title":"RocketMQ基本概念和安装测试","path":"api/articles/resource-MQ-RocketMQ-RocketMQBase.json","image":"/img/header_img/MQ/RocketMQ.png","num_read":1811,"num_like":768,"num_collection":200,"num_comments":43},"prev":{"title":"阿里千万实例可观测采集器-iLogtail正式开源","path":"api/articles/resource-DB-Logtail-iLogtail.json","image":"/img/header_img/DB/Logtail.png","num_read":1539,"num_like":52,"num_collection":519,"num_comments":165},"categories":[{"name":"算法","path":"api/categories/算法.json","pathContent":"api/categories/算法","description":"为了更有效的处理数据，提高数据运算效率。","cover":"https://sunfy9.gitee.io/project/photo/project/algorithm.png"}],"tags":[{"name":"LRU","path":"api/tags/LRU.json","pathContent":"api/tags/LRU","description":"[LRU]暂未设置说明","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"}]}