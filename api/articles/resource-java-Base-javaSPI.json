{"title":"深入理解 Java SPI机制","num_read":499,"num_like":913,"num_collection":486,"num_comments":163,"slug":"resource-java-Base-javaSPI","date":"2021-08-01T16:00:00.000Z","img":"/img/header_img/java/spi.png","format":"max","_id":"clhrbp2dv00bco5lgdsks25ml","top":true,"project":"Java","type":"hot","subtitle":"一种服务发现机制,自动加载文件里所定义的类。","site":{"data":{}},"updated":"2022-09-19T14:55:46.632Z","author":"Sunfy","comments":true,"path":"api/articles/resource-java-Base-javaSPI.json","webPath":"2021/08/02/resource-java-Base-javaSPI/","permalink":"https://sunfy9.gitee.io/2021/08/02/resource-java-Base-javaSPI/","excerpt":"SPI ，全称为 Service Provider Interface，是一种服务发现机制。在ClassPath路径下的META-INF/services文件夹查找文件，自动加载文件里所定义的类。","covers":["../../../../img/javaSPI/image-20210117225311670.png","../../../../img/javaSPI/image-20210118093328741.png","../../../../img/javaSPI/image-20210118093511722.png","../../../../img/javaSPI/image-20210118095331736.png","../../../../img/javaSPI/image-20210118104816954.png","../../../../img/javaSPI/image-20210118102603390.png","../../../../img/javaSPI/image-20210118104256438.png"],"keywords":"sunfy, hexo-theme-snail","content":"<p>SPI ，全称为 Service Provider Interface，是一种服务发现机制。在ClassPath路径下的META-INF/services文件夹查找文件，自动加载文件里所定义的类。</p>\n<a id=\"more\"></a>\n<h2 id=\"一、什么是SPI\"><a href=\"#一、什么是SPI\" class=\"headerlink\" title=\"一、什么是SPI\"></a>一、什么是SPI</h2><p>SPI ，全称为 <font style=\"color: red;display:inline-block;\">Service Provider Interface</font>，是一种服务发现机制。通过在ClassPath路径下的META-INF/services文件夹查找文件，自动加载文件里所定义的类。</p>\n<p>这一机制为很多框架扩展提供了可能，比如在Dubbo、JDBC中都使用到了SPI机制。我们先通过一个很简单的例子来看下它是怎么用的。</p>\n<h3 id=\"1、例子\"><a href=\"#1、例子\" class=\"headerlink\" title=\"1、例子\"></a>1、例子</h3><p>首先，我们需要定义一个接口，Animal</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sunfy.Animal;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">noise</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，定义两个实现类，没任何具体业务，简单输出一句话。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sunfy.Animal;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">implements</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noise</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"wang\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">package</span> com.sunfy.Animal;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">implements</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noise</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"miao\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后呢，要在ClassPath路径下配置添加一个文件。文件名字是接口的全限定类名，内容是实现类的全限定类名，多个实现类用换行符分隔。<br> 文件路径如下：</p>\n<p><img src=\"../../../../img/javaSPI/image-20210117225311670.png\" alt=\"image-20210117225311670\"></p>\n<p>SPI配置文件位置<sunfy-line></p>\n<p>内容就是实现类的全限定类名：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">com</span><span class=\"selector-class\">.sunfy</span><span class=\"selector-class\">.Animal</span><span class=\"selector-class\">.Cat</span></span><br><span class=\"line\"><span class=\"selector-tag\">com</span><span class=\"selector-class\">.sunfy</span><span class=\"selector-class\">.Animal</span><span class=\"selector-class\">.Dog</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2、测试\"><a href=\"#2、测试\" class=\"headerlink\" title=\"2、测试\"></a>2、测试</h3><p>然后我们就可以通过<code>ServiceLoader.load或者Service.providers</code>方法拿到实现类的实例。其中，<code>Service.providers</code>包位于<code>sun.misc.Service</code>，而<code>ServiceLoader.load</code>包位于<code>java.util.ServiceLoader</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sunfy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sunfy.Animal.Animal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ServiceLoader;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpiDemoMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Spi机制获取Animal接口所有的实现类，在不修改业务代码的基础上，很方便的进行数据扩展</span></span><br><span class=\"line\">        ServiceLoader&lt;Animal&gt; animals = ServiceLoader.load(Animal<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        animals.forEach(animal -&gt; animal.noise());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"--------------------------------\"</span>);</span><br><span class=\"line\">        Iterator&lt;Animal&gt; providers = Service.providers(Animal<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        ServiceLoader&lt;Animal&gt; load = ServiceLoader.load(Animal<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(providers.hasNext()) &#123;</span><br><span class=\"line\">            Animal animal = providers.next();</span><br><span class=\"line\">            animal.noise();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"--------------------------------\"</span>);</span><br><span class=\"line\">        Iterator&lt;Animal&gt; iterator = load.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(iterator.hasNext()) &#123;</span><br><span class=\"line\">            Animal animal = iterator.next();</span><br><span class=\"line\">            animal.noise();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两种方式的输出结果是一致的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">miao</span></span><br><span class=\"line\"><span class=\"selector-tag\">wang</span></span><br><span class=\"line\"><span class=\"selector-tag\">--------------------------------</span></span><br><span class=\"line\"><span class=\"selector-tag\">miao</span></span><br><span class=\"line\"><span class=\"selector-tag\">wang</span></span><br><span class=\"line\"><span class=\"selector-tag\">--------------------------------</span></span><br><span class=\"line\"><span class=\"selector-tag\">miao</span></span><br><span class=\"line\"><span class=\"selector-tag\">wang</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、源码分析\"><a href=\"#二、源码分析\" class=\"headerlink\" title=\"二、源码分析\"></a>二、源码分析</h2><p>我们看到一个位于<code>sun.misc包</code>，一个位于<code>java.util包</code>，sun包下的源码看不到。我们就以ServiceLoader.load为例，通过源码看看它里面到底怎么做的。</p>\n<h3 id=\"1、ServiceLoader\"><a href=\"#1、ServiceLoader\" class=\"headerlink\" title=\"1、ServiceLoader\"></a>1、ServiceLoader</h3><p>首先，我们先来了解下ServiceLoader，看看它的类结构。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceLoader</span>&lt;<span class=\"title\">S</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">S</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置文件路径</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PREFIX = <span class=\"string\">\"META-INF/services/\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// The class or interface representing the service being loaded</span></span><br><span class=\"line\">    <span class=\"comment\">// 加载的服务类或接口</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Class&lt;S&gt; service;</span><br><span class=\"line\">    <span class=\"comment\">// The class loader used to locate, load, and instantiate providers</span></span><br><span class=\"line\">    <span class=\"comment\">// 类加载器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ClassLoader loader;</span><br><span class=\"line\">    <span class=\"comment\">// The access control context taken when the ServiceLoader is created</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AccessControlContext acc;</span><br><span class=\"line\">    <span class=\"comment\">// Cached providers, in instantiation order</span></span><br><span class=\"line\">    <span class=\"comment\">// 已加载的服务类集合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LinkedHashMap&lt;String,S&gt; providers = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// The current lazy-lookup iterator</span></span><br><span class=\"line\">    <span class=\"comment\">// 当前的惰性查找迭代器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LazyIterator lookupIterator;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、Load\"><a href=\"#2、Load\" class=\"headerlink\" title=\"2、Load\"></a>2、Load</h3><p>load方法创建了一些属性，重要的是实例化了内部类，LazyIterator。最后返回ServiceLoader的实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reload</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    providers.clear();</span><br><span class=\"line\">    <span class=\"comment\">// 实例化ServiceLoader&lt;S&gt; 内部类</span></span><br><span class=\"line\">    lookupIterator = <span class=\"keyword\">new</span> LazyIterator(service, loader);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ServiceLoader</span><span class=\"params\">(Class&lt;S&gt; svc, ClassLoader cl)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// svc，要加载类接口 非空校验</span></span><br><span class=\"line\">    service = Objects.requireNonNull(svc, <span class=\"string\">\"Service interface cannot be null\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 返回用于委托的系统类加载器</span></span><br><span class=\"line\">    loader = (cl == <span class=\"keyword\">null</span>) ? ClassLoader.getSystemClassLoader() : cl;</span><br><span class=\"line\">    <span class=\"comment\">// 获取系统安全性接口，及访问权限</span></span><br><span class=\"line\">    acc = (System.getSecurityManager() != <span class=\"keyword\">null</span>) ? AccessController.getContext() : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 重新加载系统接口</span></span><br><span class=\"line\">    reload();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、查找实现类\"><a href=\"#3、查找实现类\" class=\"headerlink\" title=\"3、查找实现类\"></a>3、查找实现类</h3><p>查找实现类和创建实现类的过程，都在LazyIterator完成。当我们调用iterator.hasNext和iterator.next方法的时候，实际上调用的都是LazyIterator的相应方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;S&gt; <span class=\"function\">ServiceLoader&lt;S&gt; <span class=\"title\">load</span><span class=\"params\">(Class&lt;S&gt; service,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                        ClassLoader loader)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用load方法，最终还是调用ServiceLoader初始化方法，调用---》new LazyIterator(service, loader)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ServiceLoader&lt;&gt;(service, loader);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;S&gt; <span class=\"function\">ServiceLoader&lt;S&gt; <span class=\"title\">load</span><span class=\"params\">(Class&lt;S&gt; service)</span> </span>&#123;</span><br><span class=\"line\">    ClassLoader cl = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ServiceLoader.load(service, cl);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;S&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Iterator&lt;S&gt;() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lookupIterator.hasNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> S <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lookupIterator.next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .......</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以，我们重点关注lookupIterator.hasNext()方法，它最终会调用到hasNextService。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//sunfy- SPI核心的获取实现类的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNextService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 类名不等于Null,代表类已经加载完成</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextName != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (configs == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 待加载文件路径</span></span><br><span class=\"line\">            <span class=\"comment\">// PREFIX = \"META-INF/services/\"</span></span><br><span class=\"line\">            <span class=\"comment\">// service.getName() 为自定义的类的全限定名</span></span><br><span class=\"line\">            <span class=\"comment\">// META-INF/services/com.sunfy.Animal.Animal</span></span><br><span class=\"line\">            String fullName = PREFIX + service.getName();</span><br><span class=\"line\">            <span class=\"comment\">// 判断是否有传入类的加载器，如果传入则使用传入的，否则使用默认的类加载器加载</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (loader == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                configs = ClassLoader.getSystemResources(fullName);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                configs = loader.getResources(fullName);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException x) &#123;</span><br><span class=\"line\">            fail(service, <span class=\"string\">\"Error locating configuration files\"</span>, x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((pending == <span class=\"keyword\">null</span>) || !pending.hasNext()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!configs.hasMoreElements()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将给定URL的内容解析为提供程序配置文件。</span></span><br><span class=\"line\">    \t<span class=\"comment\">// parse方法中，真正的解析文件，读取文件内容，并将读取内容封装后返回（此处只是读取到类的全限定名，还没有创建类对象）</span></span><br><span class=\"line\">        pending = parse(service, configs.nextElement());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 拿到第一个实现类的类名</span></span><br><span class=\"line\">    nextName = pending.next();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"../../../../img/javaSPI/image-20210118093328741.png\" alt=\"image-20210118093328741\"></p>\n<p><img src=\"../../../../img/javaSPI/image-20210118093511722.png\" alt=\"image-20210118093511722\"></p>\n<h3 id=\"4、创建实例\"><a href=\"#4、创建实例\" class=\"headerlink\" title=\"4、创建实例\"></a>4、创建实例</h3><p>当然，调用next方法的时候，实际调用到的是，lookupIterator.nextService。它通过反射的方式，创建实现类的实例并返回。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> S <span class=\"title\">next</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ServiceConfigurationError </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.hasNext()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        String var1 = <span class=\"keyword\">this</span>.nextName;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nextName = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Class var2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            var2 = Class.forName(var1, <span class=\"keyword\">false</span>, <span class=\"keyword\">this</span>.loader);</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-------------------------</span><br><span class=\"line\"># 无论调用的是哪种便利的方法，都会在next的遍历方法中调用Class.forName()反射生成最终的我们所需要的类对象</span><br></pre></td></tr></table></figure>\n<p>看到这儿，我想已经很清楚了。获取到类的实例，我们自然就可以对它为所欲为了！</p>\n<p><img src=\"../../../../img/javaSPI/image-20210118095331736.png\" alt=\"image-20210118095331736\"></p>\n<h2 id=\"三、JDBC中的应用\"><a href=\"#三、JDBC中的应用\" class=\"headerlink\" title=\"三、JDBC中的应用\"></a>三、JDBC中的应用</h2><p>我们开头说，SPI机制为很多框架的扩展提供了可能，其实JDBC就应用到了这一机制。回忆一下JDBC获取数据库连接的过程。在早期版本中，需要先设置数据库驱动的连接，再通过DriverManager.getConnection获取一个Connection。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> url = <span class=\"string\">\"jdbc:mysql:///consult?serverTimezone=UTC\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">String</span> user = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">String</span> password = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">Class.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);</span><br><span class=\"line\">Connection connection = DriverManager.getConnection(url, user, password);</span><br></pre></td></tr></table></figure>\n<p>在较新版本中，设置数据库驱动连接，这一步骤就不再需要，那么它是怎么分辨是哪种数据库的呢？答案就是SPI机制。</p>\n<h3 id=\"1、加载\"><a href=\"#1、加载\" class=\"headerlink\" title=\"1、加载\"></a>1、加载</h3><p>我们把目光回到<code>DriverManager</code>类，它在静态代码块里面做了一件比较重要的事。很明显，它已经通过SPI机制， 把数据库驱动连接初始化了。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DriverManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        loadInitialDrivers();</span><br><span class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"JDBC DriverManager initialized\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体过程还得看loadInitialDrivers，它在里面查找的是Driver接口的服务类，所以它的文件路径就是：META-INF/services/java.sql.Driver。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DriverManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loadInitialDrivers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        AccessController.doPrivileged(<span class=\"keyword\">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Void <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//很明显，它要加载Driver接口的服务类，Driver接口的包为:java.sql.Driver</span></span><br><span class=\"line\">                <span class=\"comment\">//所以它要找的就是META-INF/services/java.sql.Driver文件</span></span><br><span class=\"line\">                ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">                Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator();</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//查到之后创建对象</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(driversIterator.hasNext()) &#123;</span><br><span class=\"line\">                        driversIterator.next();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span>(Throwable t) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Do nothing</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么，这个文件哪里有呢？我们来看MySQL的jar包，就是这个文件，文件内容为：<code>com.mysql.cj.jdbc.Driver</code>。</p>\n<p><img src=\"../../../../img/javaSPI/image-20210118104816954.png\" alt=\"image-20210118104816954\"></p>\n<p><img src=\"../../../../img/javaSPI/image-20210118102603390.png\" alt=\"image-20210118102603390\"></p>\n<p>MySQL SPI文件</p>\n<h3 id=\"2、创建实例\"><a href=\"#2、创建实例\" class=\"headerlink\" title=\"2、创建实例\"></a>2、创建实例</h3><p>上一步已经找到了MySQL中的com.mysql.cj.jdbc.Driver全限定类名，当调用next方法时，就会创建这个类的实例。它就完成了一件事，向DriverManager注册自身的实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mysql.jdbc;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Driver</span> <span class=\"keyword\">extends</span> <span class=\"title\">NonRegisteringDriver</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">sql</span>.<span class=\"title\">Driver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//注册</span></span><br><span class=\"line\">            <span class=\"comment\">//调用DriverManager类的注册方法</span></span><br><span class=\"line\">            <span class=\"comment\">//往registeredDrivers集合中加入实例</span></span><br><span class=\"line\">            java.sql.DriverManager.registerDriver(<span class=\"keyword\">new</span> Driver());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException E) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Can't register driver!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Driver</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Required for Class.forName().newInstance()</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、创建Connection\"><a href=\"#3、创建Connection\" class=\"headerlink\" title=\"3、创建Connection\"></a>3、创建Connection</h3><p>在DriverManager.getConnection()方法就是创建连接的地方，它通过循环已注册的数据库驱动程序，调用其connect方法，获取连接并返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String url, java.util.Properties info, Class&lt;?&gt; caller)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;   </span><br><span class=\"line\">    <span class=\"comment\">//registeredDrivers中就包含com.mysql.cj.jdbc.Driver实例</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(DriverInfo aDriver : registeredDrivers) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isDriverAllowed(aDriver.driver, callerCL)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//调用connect方法创建连接</span></span><br><span class=\"line\">                Connection con = aDriver.driver.connect(url, info);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (con != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> (con);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (SQLException ex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (reason == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    reason = ex;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            println(<span class=\"string\">\"    skipping: \"</span> + aDriver.getClass().getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、再扩展\"><a href=\"#4、再扩展\" class=\"headerlink\" title=\"4、再扩展\"></a>4、再扩展</h3><p>既然我们知道JDBC是这样创建数据库连接的，我们能不能再扩展一下呢？如果我们自己也创建一个java.sql.Driver文件，自定义实现类MyDriver，那么，在获取连接的前后就可以动态修改一些信息。</p>\n<p>还是先在项目ClassPath下创建文件，文件内容为自定义驱动类<code>com.viewscenes.netsupervisor.spi.MyDriver</code></p>\n<p>自定义数据库驱动程序</p>\n<p>我们的MyDriver实现类，继承自MySQL中的NonRegisteringDriver，还要实现java.sql.Driver接口。这样，在调用connect方法的时候，就会调用到此类，但实际创建的过程还靠MySQL完成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.viewscenes.netsupervisor.spi</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDriver</span> <span class=\"keyword\">extends</span> <span class=\"title\">NonRegisteringDriver</span> <span class=\"keyword\">implements</span> <span class=\"title\">Driver</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            java.sql.DriverManager.registerDriver(<span class=\"keyword\">new</span> MyDriver());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException E) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Can't register driver!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyDriver</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> SQLException </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Connection <span class=\"title\">connect</span><span class=\"params\">(String url, Properties info)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"准备创建数据库连接.url:\"</span>+url);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"JDBC配置信息：\"</span>+info);</span><br><span class=\"line\">        info.setProperty(<span class=\"string\">\"user\"</span>, <span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">        Connection connection =  <span class=\"keyword\">super</span>.connect(url, info);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"数据库连接创建完成!\"</span>+connection.toString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> connection;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------输出结果---------------------</span><br><span class=\"line\">准备创建数据库连接.url:jdbc:mysql:<span class=\"comment\">///consult?serverTimezone=UTC</span></span><br><span class=\"line\">JDBC配置信息：&#123;user=root, password=root&#125;</span><br><span class=\"line\">数据库连接创建完成!com.mysql.cj.jdbc.ConnectionImpl@<span class=\"number\">7</span>cf10a6f</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、其他应用场景\"><a href=\"#四、其他应用场景\" class=\"headerlink\" title=\"四、其他应用场景\"></a>四、其他应用场景</h2><h4 id=\"ShardingSphere\"><a href=\"#ShardingSphere\" class=\"headerlink\" title=\"ShardingSphere\"></a>ShardingSphere</h4><p>分布式数据库中间件中使用了非常多的SPI来提高ShardingSphere的可扩展性</p>\n<p><img src=\"../../../../img/javaSPI/image-20210118104256438.png\" alt=\"image-20210118104256438\"></p>\n","more":"<h2 id=\"一、什么是SPI\"><a href=\"#一、什么是SPI\" class=\"headerlink\" title=\"一、什么是SPI\"></a>一、什么是SPI</h2><p>SPI ，全称为 <font style=\"color: red;display:inline-block;\">Service Provider Interface</font>，是一种服务发现机制。通过在ClassPath路径下的META-INF/services文件夹查找文件，自动加载文件里所定义的类。</p>\n<p>这一机制为很多框架扩展提供了可能，比如在Dubbo、JDBC中都使用到了SPI机制。我们先通过一个很简单的例子来看下它是怎么用的。</p>\n<h3 id=\"1、例子\"><a href=\"#1、例子\" class=\"headerlink\" title=\"1、例子\"></a>1、例子</h3><p>首先，我们需要定义一个接口，Animal</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sunfy.Animal;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">noise</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，定义两个实现类，没任何具体业务，简单输出一句话。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sunfy.Animal;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">implements</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noise</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"wang\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">package</span> com.sunfy.Animal;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">implements</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">noise</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"miao\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后呢，要在ClassPath路径下配置添加一个文件。文件名字是接口的全限定类名，内容是实现类的全限定类名，多个实现类用换行符分隔。<br> 文件路径如下：</p>\n<p><img src=\"../../../../img/javaSPI/image-20210117225311670.png\" alt=\"image-20210117225311670\"></p>\n<p>SPI配置文件位置<sunfy-line></p>\n<p>内容就是实现类的全限定类名：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">com</span><span class=\"selector-class\">.sunfy</span><span class=\"selector-class\">.Animal</span><span class=\"selector-class\">.Cat</span></span><br><span class=\"line\"><span class=\"selector-tag\">com</span><span class=\"selector-class\">.sunfy</span><span class=\"selector-class\">.Animal</span><span class=\"selector-class\">.Dog</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2、测试\"><a href=\"#2、测试\" class=\"headerlink\" title=\"2、测试\"></a>2、测试</h3><p>然后我们就可以通过<code>ServiceLoader.load或者Service.providers</code>方法拿到实现类的实例。其中，<code>Service.providers</code>包位于<code>sun.misc.Service</code>，而<code>ServiceLoader.load</code>包位于<code>java.util.ServiceLoader</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sunfy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sunfy.Animal.Animal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ServiceLoader;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpiDemoMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Spi机制获取Animal接口所有的实现类，在不修改业务代码的基础上，很方便的进行数据扩展</span></span><br><span class=\"line\">        ServiceLoader&lt;Animal&gt; animals = ServiceLoader.load(Animal<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        animals.forEach(animal -&gt; animal.noise());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"--------------------------------\"</span>);</span><br><span class=\"line\">        Iterator&lt;Animal&gt; providers = Service.providers(Animal<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        ServiceLoader&lt;Animal&gt; load = ServiceLoader.load(Animal<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(providers.hasNext()) &#123;</span><br><span class=\"line\">            Animal animal = providers.next();</span><br><span class=\"line\">            animal.noise();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"--------------------------------\"</span>);</span><br><span class=\"line\">        Iterator&lt;Animal&gt; iterator = load.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(iterator.hasNext()) &#123;</span><br><span class=\"line\">            Animal animal = iterator.next();</span><br><span class=\"line\">            animal.noise();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两种方式的输出结果是一致的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">miao</span></span><br><span class=\"line\"><span class=\"selector-tag\">wang</span></span><br><span class=\"line\"><span class=\"selector-tag\">--------------------------------</span></span><br><span class=\"line\"><span class=\"selector-tag\">miao</span></span><br><span class=\"line\"><span class=\"selector-tag\">wang</span></span><br><span class=\"line\"><span class=\"selector-tag\">--------------------------------</span></span><br><span class=\"line\"><span class=\"selector-tag\">miao</span></span><br><span class=\"line\"><span class=\"selector-tag\">wang</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、源码分析\"><a href=\"#二、源码分析\" class=\"headerlink\" title=\"二、源码分析\"></a>二、源码分析</h2><p>我们看到一个位于<code>sun.misc包</code>，一个位于<code>java.util包</code>，sun包下的源码看不到。我们就以ServiceLoader.load为例，通过源码看看它里面到底怎么做的。</p>\n<h3 id=\"1、ServiceLoader\"><a href=\"#1、ServiceLoader\" class=\"headerlink\" title=\"1、ServiceLoader\"></a>1、ServiceLoader</h3><p>首先，我们先来了解下ServiceLoader，看看它的类结构。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceLoader</span>&lt;<span class=\"title\">S</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">S</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置文件路径</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PREFIX = <span class=\"string\">\"META-INF/services/\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// The class or interface representing the service being loaded</span></span><br><span class=\"line\">    <span class=\"comment\">// 加载的服务类或接口</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Class&lt;S&gt; service;</span><br><span class=\"line\">    <span class=\"comment\">// The class loader used to locate, load, and instantiate providers</span></span><br><span class=\"line\">    <span class=\"comment\">// 类加载器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ClassLoader loader;</span><br><span class=\"line\">    <span class=\"comment\">// The access control context taken when the ServiceLoader is created</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AccessControlContext acc;</span><br><span class=\"line\">    <span class=\"comment\">// Cached providers, in instantiation order</span></span><br><span class=\"line\">    <span class=\"comment\">// 已加载的服务类集合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LinkedHashMap&lt;String,S&gt; providers = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// The current lazy-lookup iterator</span></span><br><span class=\"line\">    <span class=\"comment\">// 当前的惰性查找迭代器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LazyIterator lookupIterator;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、Load\"><a href=\"#2、Load\" class=\"headerlink\" title=\"2、Load\"></a>2、Load</h3><p>load方法创建了一些属性，重要的是实例化了内部类，LazyIterator。最后返回ServiceLoader的实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reload</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    providers.clear();</span><br><span class=\"line\">    <span class=\"comment\">// 实例化ServiceLoader&lt;S&gt; 内部类</span></span><br><span class=\"line\">    lookupIterator = <span class=\"keyword\">new</span> LazyIterator(service, loader);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ServiceLoader</span><span class=\"params\">(Class&lt;S&gt; svc, ClassLoader cl)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// svc，要加载类接口 非空校验</span></span><br><span class=\"line\">    service = Objects.requireNonNull(svc, <span class=\"string\">\"Service interface cannot be null\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 返回用于委托的系统类加载器</span></span><br><span class=\"line\">    loader = (cl == <span class=\"keyword\">null</span>) ? ClassLoader.getSystemClassLoader() : cl;</span><br><span class=\"line\">    <span class=\"comment\">// 获取系统安全性接口，及访问权限</span></span><br><span class=\"line\">    acc = (System.getSecurityManager() != <span class=\"keyword\">null</span>) ? AccessController.getContext() : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 重新加载系统接口</span></span><br><span class=\"line\">    reload();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、查找实现类\"><a href=\"#3、查找实现类\" class=\"headerlink\" title=\"3、查找实现类\"></a>3、查找实现类</h3><p>查找实现类和创建实现类的过程，都在LazyIterator完成。当我们调用iterator.hasNext和iterator.next方法的时候，实际上调用的都是LazyIterator的相应方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;S&gt; <span class=\"function\">ServiceLoader&lt;S&gt; <span class=\"title\">load</span><span class=\"params\">(Class&lt;S&gt; service,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                        ClassLoader loader)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用load方法，最终还是调用ServiceLoader初始化方法，调用---》new LazyIterator(service, loader)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ServiceLoader&lt;&gt;(service, loader);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;S&gt; <span class=\"function\">ServiceLoader&lt;S&gt; <span class=\"title\">load</span><span class=\"params\">(Class&lt;S&gt; service)</span> </span>&#123;</span><br><span class=\"line\">    ClassLoader cl = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ServiceLoader.load(service, cl);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;S&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Iterator&lt;S&gt;() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lookupIterator.hasNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> S <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lookupIterator.next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        .......</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以，我们重点关注lookupIterator.hasNext()方法，它最终会调用到hasNextService。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//sunfy- SPI核心的获取实现类的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNextService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 类名不等于Null,代表类已经加载完成</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextName != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (configs == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 待加载文件路径</span></span><br><span class=\"line\">            <span class=\"comment\">// PREFIX = \"META-INF/services/\"</span></span><br><span class=\"line\">            <span class=\"comment\">// service.getName() 为自定义的类的全限定名</span></span><br><span class=\"line\">            <span class=\"comment\">// META-INF/services/com.sunfy.Animal.Animal</span></span><br><span class=\"line\">            String fullName = PREFIX + service.getName();</span><br><span class=\"line\">            <span class=\"comment\">// 判断是否有传入类的加载器，如果传入则使用传入的，否则使用默认的类加载器加载</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (loader == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                configs = ClassLoader.getSystemResources(fullName);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                configs = loader.getResources(fullName);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException x) &#123;</span><br><span class=\"line\">            fail(service, <span class=\"string\">\"Error locating configuration files\"</span>, x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((pending == <span class=\"keyword\">null</span>) || !pending.hasNext()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!configs.hasMoreElements()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将给定URL的内容解析为提供程序配置文件。</span></span><br><span class=\"line\">    \t<span class=\"comment\">// parse方法中，真正的解析文件，读取文件内容，并将读取内容封装后返回（此处只是读取到类的全限定名，还没有创建类对象）</span></span><br><span class=\"line\">        pending = parse(service, configs.nextElement());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 拿到第一个实现类的类名</span></span><br><span class=\"line\">    nextName = pending.next();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"../../../../img/javaSPI/image-20210118093328741.png\" alt=\"image-20210118093328741\"></p>\n<p><img src=\"../../../../img/javaSPI/image-20210118093511722.png\" alt=\"image-20210118093511722\"></p>\n<h3 id=\"4、创建实例\"><a href=\"#4、创建实例\" class=\"headerlink\" title=\"4、创建实例\"></a>4、创建实例</h3><p>当然，调用next方法的时候，实际调用到的是，lookupIterator.nextService。它通过反射的方式，创建实现类的实例并返回。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> S <span class=\"title\">next</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ServiceConfigurationError </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.hasNext()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        String var1 = <span class=\"keyword\">this</span>.nextName;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nextName = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Class var2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            var2 = Class.forName(var1, <span class=\"keyword\">false</span>, <span class=\"keyword\">this</span>.loader);</span><br><span class=\"line\">            ......</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-------------------------</span><br><span class=\"line\"># 无论调用的是哪种便利的方法，都会在next的遍历方法中调用Class.forName()反射生成最终的我们所需要的类对象</span><br></pre></td></tr></table></figure>\n<p>看到这儿，我想已经很清楚了。获取到类的实例，我们自然就可以对它为所欲为了！</p>\n<p><img src=\"../../../../img/javaSPI/image-20210118095331736.png\" alt=\"image-20210118095331736\"></p>\n<h2 id=\"三、JDBC中的应用\"><a href=\"#三、JDBC中的应用\" class=\"headerlink\" title=\"三、JDBC中的应用\"></a>三、JDBC中的应用</h2><p>我们开头说，SPI机制为很多框架的扩展提供了可能，其实JDBC就应用到了这一机制。回忆一下JDBC获取数据库连接的过程。在早期版本中，需要先设置数据库驱动的连接，再通过DriverManager.getConnection获取一个Connection。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> url = <span class=\"string\">\"jdbc:mysql:///consult?serverTimezone=UTC\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">String</span> user = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">String</span> password = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">Class.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);</span><br><span class=\"line\">Connection connection = DriverManager.getConnection(url, user, password);</span><br></pre></td></tr></table></figure>\n<p>在较新版本中，设置数据库驱动连接，这一步骤就不再需要，那么它是怎么分辨是哪种数据库的呢？答案就是SPI机制。</p>\n<h3 id=\"1、加载\"><a href=\"#1、加载\" class=\"headerlink\" title=\"1、加载\"></a>1、加载</h3><p>我们把目光回到<code>DriverManager</code>类，它在静态代码块里面做了一件比较重要的事。很明显，它已经通过SPI机制， 把数据库驱动连接初始化了。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DriverManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        loadInitialDrivers();</span><br><span class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"JDBC DriverManager initialized\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体过程还得看loadInitialDrivers，它在里面查找的是Driver接口的服务类，所以它的文件路径就是：META-INF/services/java.sql.Driver。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DriverManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loadInitialDrivers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        AccessController.doPrivileged(<span class=\"keyword\">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Void <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//很明显，它要加载Driver接口的服务类，Driver接口的包为:java.sql.Driver</span></span><br><span class=\"line\">                <span class=\"comment\">//所以它要找的就是META-INF/services/java.sql.Driver文件</span></span><br><span class=\"line\">                ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">                Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator();</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//查到之后创建对象</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(driversIterator.hasNext()) &#123;</span><br><span class=\"line\">                        driversIterator.next();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span>(Throwable t) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Do nothing</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么，这个文件哪里有呢？我们来看MySQL的jar包，就是这个文件，文件内容为：<code>com.mysql.cj.jdbc.Driver</code>。</p>\n<p><img src=\"../../../../img/javaSPI/image-20210118104816954.png\" alt=\"image-20210118104816954\"></p>\n<p><img src=\"../../../../img/javaSPI/image-20210118102603390.png\" alt=\"image-20210118102603390\"></p>\n<p>MySQL SPI文件</p>\n<h3 id=\"2、创建实例\"><a href=\"#2、创建实例\" class=\"headerlink\" title=\"2、创建实例\"></a>2、创建实例</h3><p>上一步已经找到了MySQL中的com.mysql.cj.jdbc.Driver全限定类名，当调用next方法时，就会创建这个类的实例。它就完成了一件事，向DriverManager注册自身的实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mysql.jdbc;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Driver</span> <span class=\"keyword\">extends</span> <span class=\"title\">NonRegisteringDriver</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">sql</span>.<span class=\"title\">Driver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//注册</span></span><br><span class=\"line\">            <span class=\"comment\">//调用DriverManager类的注册方法</span></span><br><span class=\"line\">            <span class=\"comment\">//往registeredDrivers集合中加入实例</span></span><br><span class=\"line\">            java.sql.DriverManager.registerDriver(<span class=\"keyword\">new</span> Driver());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException E) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Can't register driver!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Driver</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Required for Class.forName().newInstance()</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、创建Connection\"><a href=\"#3、创建Connection\" class=\"headerlink\" title=\"3、创建Connection\"></a>3、创建Connection</h3><p>在DriverManager.getConnection()方法就是创建连接的地方，它通过循环已注册的数据库驱动程序，调用其connect方法，获取连接并返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String url, java.util.Properties info, Class&lt;?&gt; caller)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;   </span><br><span class=\"line\">    <span class=\"comment\">//registeredDrivers中就包含com.mysql.cj.jdbc.Driver实例</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(DriverInfo aDriver : registeredDrivers) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isDriverAllowed(aDriver.driver, callerCL)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//调用connect方法创建连接</span></span><br><span class=\"line\">                Connection con = aDriver.driver.connect(url, info);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (con != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> (con);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (SQLException ex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (reason == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    reason = ex;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            println(<span class=\"string\">\"    skipping: \"</span> + aDriver.getClass().getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、再扩展\"><a href=\"#4、再扩展\" class=\"headerlink\" title=\"4、再扩展\"></a>4、再扩展</h3><p>既然我们知道JDBC是这样创建数据库连接的，我们能不能再扩展一下呢？如果我们自己也创建一个java.sql.Driver文件，自定义实现类MyDriver，那么，在获取连接的前后就可以动态修改一些信息。</p>\n<p>还是先在项目ClassPath下创建文件，文件内容为自定义驱动类<code>com.viewscenes.netsupervisor.spi.MyDriver</code></p>\n<p>自定义数据库驱动程序</p>\n<p>我们的MyDriver实现类，继承自MySQL中的NonRegisteringDriver，还要实现java.sql.Driver接口。这样，在调用connect方法的时候，就会调用到此类，但实际创建的过程还靠MySQL完成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.viewscenes.netsupervisor.spi</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDriver</span> <span class=\"keyword\">extends</span> <span class=\"title\">NonRegisteringDriver</span> <span class=\"keyword\">implements</span> <span class=\"title\">Driver</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            java.sql.DriverManager.registerDriver(<span class=\"keyword\">new</span> MyDriver());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException E) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Can't register driver!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyDriver</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> SQLException </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Connection <span class=\"title\">connect</span><span class=\"params\">(String url, Properties info)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"准备创建数据库连接.url:\"</span>+url);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"JDBC配置信息：\"</span>+info);</span><br><span class=\"line\">        info.setProperty(<span class=\"string\">\"user\"</span>, <span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">        Connection connection =  <span class=\"keyword\">super</span>.connect(url, info);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"数据库连接创建完成!\"</span>+connection.toString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> connection;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------输出结果---------------------</span><br><span class=\"line\">准备创建数据库连接.url:jdbc:mysql:<span class=\"comment\">///consult?serverTimezone=UTC</span></span><br><span class=\"line\">JDBC配置信息：&#123;user=root, password=root&#125;</span><br><span class=\"line\">数据库连接创建完成!com.mysql.cj.jdbc.ConnectionImpl@<span class=\"number\">7</span>cf10a6f</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、其他应用场景\"><a href=\"#四、其他应用场景\" class=\"headerlink\" title=\"四、其他应用场景\"></a>四、其他应用场景</h2><h4 id=\"ShardingSphere\"><a href=\"#ShardingSphere\" class=\"headerlink\" title=\"ShardingSphere\"></a>ShardingSphere</h4><p>分布式数据库中间件中使用了非常多的SPI来提高ShardingSphere的可扩展性</p>\n<p><img src=\"../../../../img/javaSPI/image-20210118104256438.png\" alt=\"image-20210118104256438\"></p>","next":{"title":"Spring循环依赖底层原理","path":"api/articles/resource-Spring-Spring-Spring循环依赖底层原理.json","image":"/img/header_img/spring/dependencies.png","num_read":1626,"num_like":365,"num_collection":632,"num_comments":67},"prev":{"title":"算法常用的解题思路---深度优先(DFS)和广度优先(BFS)","path":"api/articles/resource-java-algorithm-805-DFSandBFS.json","image":"/img/header_img/interview/DFSandBFS.gif","num_read":579,"num_like":1061,"num_collection":186,"num_comments":41},"categories":[{"name":"Java","path":"api/categories/Java.json","pathContent":"api/categories/Java","description":"知识点、常用功能","cover":"https://sunfy9.gitee.io/project/photo/project/java.png"}],"tags":[{"name":"SPI","path":"api/tags/SPI.json","pathContent":"api/tags/SPI","description":"[SPI]暂未设置说明","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"}]}