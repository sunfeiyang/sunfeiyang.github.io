{"title":"java设计模式","num_read":1553,"num_like":941,"num_collection":446,"num_comments":69,"slug":"resource-designpattern-design-designpattern","date":"2021-03-10T16:00:00.000Z","img":"/img/header_img/Design/design.jpg","_id":"clhrbp2b40042o5lg3q04a9lv","project":"designPattern","type":"banner","subtitle":"代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用","site":{"data":{}},"updated":"2022-10-27T08:08:59.122Z","author":"Sunfy","comments":true,"path":"api/articles/resource-designpattern-design-designpattern.json","webPath":"2021/03/11/resource-designpattern-design-designpattern/","permalink":"https://sunfy9.gitee.io/2021/03/11/resource-designpattern-design-designpattern/","excerpt":null,"covers":["../../../../img/designpattern/the-relationship-between-design-patterns.jpg"],"keywords":"sunfy, hexo-theme-snail","content":"<h1 id=\"设计模式简介\"><a href=\"#设计模式简介\" class=\"headerlink\" title=\"设计模式简介\"></a>设计模式简介</h1><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>\n<p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p>\n<h2 id=\"设计模式的使用\"><a href=\"#设计模式的使用\" class=\"headerlink\" title=\"设计模式的使用\"></a>设计模式的使用<sunfy-line></h2><p>设计模式在软件开发中的两个主要用途。</p>\n<h3 id=\"开发人员的共同平台\"><a href=\"#开发人员的共同平台\" class=\"headerlink\" title=\"开发人员的共同平台\"></a>开发人员的共同平台</h3><p>设计模式提供了一个标准的术语系统，且具体到特定的情景。例如，单例设计模式意味着使用单个对象，这样所有熟悉单例设计模式的开发人员都能使用单个对象，并且可以通过这种方式告诉对方，程序使用的是单例模式。</p>\n<h3 id=\"最佳的实践\"><a href=\"#最佳的实践\" class=\"headerlink\" title=\"最佳的实践\"></a>最佳的实践</h3><p>设计模式已经经历了很长一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。</p>\n<h2 id=\"设计模式的类型\"><a href=\"#设计模式的类型\" class=\"headerlink\" title=\"设计模式的类型\"></a>设计模式的类型</h2><p>根据设计模式的参考书 <strong>Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）</strong> 中所提到的，总共有 23 种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。当然，我们还会讨论另一类设计模式：J2EE 设计模式。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">模式 &amp; 描述</th>\n<th style=\"text-align:left\">包括</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>创建型模式</strong> 这些设计模式提供了一种<br />在创建对象的同时隐藏创建逻辑的方式，<br />而不是使用 new 运算符直接实例化对象。<br />这使得程序在判断针对某个给定实例<br />需要创建哪些对象时更加灵活。</td>\n<td style=\"text-align:left\"><a href=\"https://sunfy.top/2020/09/10/resource-designpattern-build-factory/\" target=\"_blank\" rel=\"noopener\">工厂模式（Factory Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-build-factory.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/09/10/resource-designpattern-build-Abstractfactory/\" target=\"_blank\" rel=\"noopener\">抽象工厂模式（Abstract Factory Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-build-Abstractfactory.json\">移动端</a><br /><a href=\"https://sunfy.top/2019/07/03/resource-designpattern-build-singleton/\" target=\"_blank\" rel=\"noopener\">单例模式（Singleton Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-build-singleton.json\">移动端</a><br /><a href=\"https://sunfy.top/2019/07/06/resource-designpattern-build-builder/\" target=\"_blank\" rel=\"noopener\">建造者模式（Builder Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-build-builder.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/10/resource-designpattern-build-Prototype/\" target=\"_blank\" rel=\"noopener\">原型模式（Prototype Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-build-Prototype.json\">移动端</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>结构型模式</strong> 这些设计模式关注类和对象的组合。<br />继承的概念被用来组合接口和定义组合对象获得新功能的方式。</td>\n<td style=\"text-align:left\"><a href=\"https://sunfy.top/2020/09/10/resource-designpattern-structure-Adapter/\" target=\"_blank\" rel=\"noopener\">适配器模式（Adapter Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-structure-Adapter.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/10/resource-designpattern-structure-Bridge/\" target=\"_blank\" rel=\"noopener\">桥接模式（Bridge Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-structure-Bridge.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/09/10/resource-designpattern-structure-Filter/\" target=\"_blank\" rel=\"noopener\">过滤器模式（Filter、Criteria Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-structure-Filter.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-structure-Composite/\" target=\"_blank\" rel=\"noopener\">组合模式（Composite Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-structure-Composite.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/09/10/resource-designpattern-structure-Decorator/\" target=\"_blank\" rel=\"noopener\">装饰器模式（Decorator Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-structure-Decorator.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/10/resource-designpattern-structure-Facade/\" target=\"_blank\" rel=\"noopener\">外观模式（Facade Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-structure-Facade.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-structure-Flyweight/\" target=\"_blank\" rel=\"noopener\">享元模式（Flyweight Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-structure-Flyweight.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/08/11/resource-designpattern-structure-proxy/\" target=\"_blank\" rel=\"noopener\">代理模式（Proxy Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-structure-proxy.json\">移动端</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>行为型模式</strong> 这些设计模式特别关注对象之间的通信。</td>\n<td style=\"text-align:left\"><a href=\"https://sunfy.top/2020/09/10/resource-designpattern-behavior-Responsibility/\" target=\"_blank\" rel=\"noopener\">责任链模式（Chain of Responsibility Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Responsibility.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-behavior-Command/\" target=\"_blank\" rel=\"noopener\">命令模式（Command Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Command.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/11/resource-designpattern-behavior-Interpreter/\" target=\"_blank\" rel=\"noopener\">解释器模式（Interpreter Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Interpreter.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-behavior-Iterator/\" target=\"_blank\" rel=\"noopener\">迭代器模式（Iterator Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Iterator.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-behavior-Mediator/\" target=\"_blank\" rel=\"noopener\">中介者模式（Mediator Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Mediator.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-behavior-Memento/\" target=\"_blank\" rel=\"noopener\">备忘录模式（Memento Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Memento.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/07/10/resource-designpattern-behavior-observer/\" target=\"_blank\" rel=\"noopener\">观察者模式（Observer Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-observer.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-behavior-State/\" target=\"_blank\" rel=\"noopener\">状态模式（State Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-State.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-behavior-Null/\" target=\"_blank\" rel=\"noopener\">空对象模式（Null Object Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Null.json\">移动端</a><br /><a href=\"https://sunfy.top/2019/07/06/resource-designpattern-behavior-Strategy/\" target=\"_blank\" rel=\"noopener\">策略模式（Strategy Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Strategy.json\">移动端</a><br /><a href=\"https://sunfy.top/2019/07/06/resource-designpattern-behavior-Template/\" target=\"_blank\" rel=\"noopener\">模板模式（Template Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Template.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-behavior-Visitor/\" target=\"_blank\" rel=\"noopener\">访问者模式（Visitor Pattern）</a> <a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Visitor.json\">移动端</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong>J2EE 模式</strong> 这些设计模式特别关注表示层。<br />这些模式是由 Sun Java Center 鉴定的。</td>\n<td style=\"text-align:left\"><a href=\"https://sunfy.top/2020/10/10/resource-designpattern-J2EE-mvc/\" target=\"_blank\" rel=\"noopener\">MVC 模式（MVC Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-J2EE-mvc.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-J2EE-Business/\" target=\"_blank\" rel=\"noopener\">业务代表模式（Business Delegate Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-J2EE-Business.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-J2EE-Composite/\" target=\"_blank\" rel=\"noopener\">组合实体模式（Composite Entity Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-J2EE-Composite.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-J2EE-DataAccess/\" target=\"_blank\" rel=\"noopener\">数据访问对象模式（Data Access Object Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-J2EE-DataAccess.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-J2EE-Front/\" target=\"_blank\" rel=\"noopener\">前端控制器模式（Front Controller Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-J2EE-Front.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-J2EE-Intercepting/\" target=\"_blank\" rel=\"noopener\">拦截过滤器模式（Intercepting Filter Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-J2EE-Intercepting.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-J2EE-Service/\" target=\"_blank\" rel=\"noopener\">服务定位器模式（Service Locator Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-J2EE-Service.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-J2EE-Transfer/\" target=\"_blank\" rel=\"noopener\">传输对象模式（Transfer Object Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-J2EE-Transfer.json\">移动端</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><a href=\"/img/the-relationship-between-design-patterns.jpg\">下面用一个图片来整体描述一下设计模式之间的关系：</a></p>\n<p><img src=\"../../../../img/designpattern/the-relationship-between-design-patterns.jpg\" alt=\"设计模式之间的关系\"></p>\n<h2 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h2><p><strong>1、开闭原则（Open Close Principle）</strong></p>\n<p>开闭原则的意思是：<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>\n<p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p>\n<p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>\n<p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p>\n<p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>\n<p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p>\n<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p>\n<p><strong>5、迪米特法则，又称最少知道原则（Demeter Principle）</strong></p>\n<p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>\n<p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p>\n<p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>\n","more":"<h1 id=\"设计模式简介\"><a href=\"#设计模式简介\" class=\"headerlink\" title=\"设计模式简介\"></a>设计模式简介</h1><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>\n<p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p>\n<h2 id=\"设计模式的使用\"><a href=\"#设计模式的使用\" class=\"headerlink\" title=\"设计模式的使用\"></a>设计模式的使用<sunfy-line></h2><p>设计模式在软件开发中的两个主要用途。</p>\n<h3 id=\"开发人员的共同平台\"><a href=\"#开发人员的共同平台\" class=\"headerlink\" title=\"开发人员的共同平台\"></a>开发人员的共同平台</h3><p>设计模式提供了一个标准的术语系统，且具体到特定的情景。例如，单例设计模式意味着使用单个对象，这样所有熟悉单例设计模式的开发人员都能使用单个对象，并且可以通过这种方式告诉对方，程序使用的是单例模式。</p>\n<h3 id=\"最佳的实践\"><a href=\"#最佳的实践\" class=\"headerlink\" title=\"最佳的实践\"></a>最佳的实践</h3><p>设计模式已经经历了很长一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。</p>\n<h2 id=\"设计模式的类型\"><a href=\"#设计模式的类型\" class=\"headerlink\" title=\"设计模式的类型\"></a>设计模式的类型</h2><p>根据设计模式的参考书 <strong>Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）</strong> 中所提到的，总共有 23 种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。当然，我们还会讨论另一类设计模式：J2EE 设计模式。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">模式 &amp; 描述</th>\n<th style=\"text-align:left\">包括</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>创建型模式</strong> 这些设计模式提供了一种<br />在创建对象的同时隐藏创建逻辑的方式，<br />而不是使用 new 运算符直接实例化对象。<br />这使得程序在判断针对某个给定实例<br />需要创建哪些对象时更加灵活。</td>\n<td style=\"text-align:left\"><a href=\"https://sunfy.top/2020/09/10/resource-designpattern-build-factory/\" target=\"_blank\" rel=\"noopener\">工厂模式（Factory Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-build-factory.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/09/10/resource-designpattern-build-Abstractfactory/\" target=\"_blank\" rel=\"noopener\">抽象工厂模式（Abstract Factory Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-build-Abstractfactory.json\">移动端</a><br /><a href=\"https://sunfy.top/2019/07/03/resource-designpattern-build-singleton/\" target=\"_blank\" rel=\"noopener\">单例模式（Singleton Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-build-singleton.json\">移动端</a><br /><a href=\"https://sunfy.top/2019/07/06/resource-designpattern-build-builder/\" target=\"_blank\" rel=\"noopener\">建造者模式（Builder Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-build-builder.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/10/resource-designpattern-build-Prototype/\" target=\"_blank\" rel=\"noopener\">原型模式（Prototype Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-build-Prototype.json\">移动端</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>结构型模式</strong> 这些设计模式关注类和对象的组合。<br />继承的概念被用来组合接口和定义组合对象获得新功能的方式。</td>\n<td style=\"text-align:left\"><a href=\"https://sunfy.top/2020/09/10/resource-designpattern-structure-Adapter/\" target=\"_blank\" rel=\"noopener\">适配器模式（Adapter Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-structure-Adapter.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/10/resource-designpattern-structure-Bridge/\" target=\"_blank\" rel=\"noopener\">桥接模式（Bridge Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-structure-Bridge.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/09/10/resource-designpattern-structure-Filter/\" target=\"_blank\" rel=\"noopener\">过滤器模式（Filter、Criteria Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-structure-Filter.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-structure-Composite/\" target=\"_blank\" rel=\"noopener\">组合模式（Composite Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-structure-Composite.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/09/10/resource-designpattern-structure-Decorator/\" target=\"_blank\" rel=\"noopener\">装饰器模式（Decorator Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-structure-Decorator.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/10/resource-designpattern-structure-Facade/\" target=\"_blank\" rel=\"noopener\">外观模式（Facade Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-structure-Facade.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-structure-Flyweight/\" target=\"_blank\" rel=\"noopener\">享元模式（Flyweight Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-structure-Flyweight.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/08/11/resource-designpattern-structure-proxy/\" target=\"_blank\" rel=\"noopener\">代理模式（Proxy Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-structure-proxy.json\">移动端</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>行为型模式</strong> 这些设计模式特别关注对象之间的通信。</td>\n<td style=\"text-align:left\"><a href=\"https://sunfy.top/2020/09/10/resource-designpattern-behavior-Responsibility/\" target=\"_blank\" rel=\"noopener\">责任链模式（Chain of Responsibility Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Responsibility.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-behavior-Command/\" target=\"_blank\" rel=\"noopener\">命令模式（Command Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Command.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/11/resource-designpattern-behavior-Interpreter/\" target=\"_blank\" rel=\"noopener\">解释器模式（Interpreter Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Interpreter.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-behavior-Iterator/\" target=\"_blank\" rel=\"noopener\">迭代器模式（Iterator Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Iterator.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-behavior-Mediator/\" target=\"_blank\" rel=\"noopener\">中介者模式（Mediator Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Mediator.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-behavior-Memento/\" target=\"_blank\" rel=\"noopener\">备忘录模式（Memento Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Memento.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/07/10/resource-designpattern-behavior-observer/\" target=\"_blank\" rel=\"noopener\">观察者模式（Observer Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-observer.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-behavior-State/\" target=\"_blank\" rel=\"noopener\">状态模式（State Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-State.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-behavior-Null/\" target=\"_blank\" rel=\"noopener\">空对象模式（Null Object Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Null.json\">移动端</a><br /><a href=\"https://sunfy.top/2019/07/06/resource-designpattern-behavior-Strategy/\" target=\"_blank\" rel=\"noopener\">策略模式（Strategy Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Strategy.json\">移动端</a><br /><a href=\"https://sunfy.top/2019/07/06/resource-designpattern-behavior-Template/\" target=\"_blank\" rel=\"noopener\">模板模式（Template Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Template.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-behavior-Visitor/\" target=\"_blank\" rel=\"noopener\">访问者模式（Visitor Pattern）</a> <a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-behavior-Visitor.json\">移动端</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong>J2EE 模式</strong> 这些设计模式特别关注表示层。<br />这些模式是由 Sun Java Center 鉴定的。</td>\n<td style=\"text-align:left\"><a href=\"https://sunfy.top/2020/10/10/resource-designpattern-J2EE-mvc/\" target=\"_blank\" rel=\"noopener\">MVC 模式（MVC Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-J2EE-mvc.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-J2EE-Business/\" target=\"_blank\" rel=\"noopener\">业务代表模式（Business Delegate Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-J2EE-Business.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-J2EE-Composite/\" target=\"_blank\" rel=\"noopener\">组合实体模式（Composite Entity Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-J2EE-Composite.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-J2EE-DataAccess/\" target=\"_blank\" rel=\"noopener\">数据访问对象模式（Data Access Object Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-J2EE-DataAccess.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-J2EE-Front/\" target=\"_blank\" rel=\"noopener\">前端控制器模式（Front Controller Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-J2EE-Front.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-J2EE-Intercepting/\" target=\"_blank\" rel=\"noopener\">拦截过滤器模式（Intercepting Filter Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-J2EE-Intercepting.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-J2EE-Service/\" target=\"_blank\" rel=\"noopener\">服务定位器模式（Service Locator Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-J2EE-Service.json\">移动端</a><br /><a href=\"https://sunfy.top/2020/10/12/resource-designpattern-J2EE-Transfer/\" target=\"_blank\" rel=\"noopener\">传输对象模式（Transfer Object Pattern）</a><a href=\"/pages/detail/detail?id=api/articles/resource-designpattern-J2EE-Transfer.json\">移动端</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><a href=\"/img/the-relationship-between-design-patterns.jpg\">下面用一个图片来整体描述一下设计模式之间的关系：</a></p>\n<p><img src=\"../../../../img/designpattern/the-relationship-between-design-patterns.jpg\" alt=\"设计模式之间的关系\"></p>\n<h2 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h2><p><strong>1、开闭原则（Open Close Principle）</strong></p>\n<p>开闭原则的意思是：<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>\n<p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p>\n<p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>\n<p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p>\n<p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>\n<p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p>\n<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p>\n<p><strong>5、迪米特法则，又称最少知道原则（Demeter Principle）</strong></p>\n<p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>\n<p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p>\n<p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>\n","next":{"title":"使用maven命令安装指定(第三方)jar包到本地仓库","path":"api/articles/resource-tools-git-maven-mavenInstallJar.json","image":"/img/header_img/16.gif","num_read":126,"num_like":683,"num_collection":454,"num_comments":99},"prev":{"title":"Centos 安装 sqlServer","path":"api/articles/resource-DB-SQLServer-Centos-sqlServer.json","image":"/img/header_img/tools/centos.png","num_read":1856,"num_like":539,"num_collection":509,"num_comments":133},"categories":[{"name":"设计模式","path":"api/categories/设计模式.json","pathContent":"api/categories/设计模式","description":"简单快捷、解决方案","cover":"https://sunfy9.gitee.io/project/photo/project/design.jpg"}],"tags":[]}