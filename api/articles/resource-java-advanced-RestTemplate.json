{"title":"更优雅的发HTTP请求(RestTemplate)","num_read":1568,"num_like":670,"num_collection":570,"num_comments":157,"slug":"resource-java-advanced-RestTemplate","date":"2022-07-15T16:00:00.000Z","img":"/img/header_img/java/RestTemplate.png","_id":"clhrbp2da006mo5lggl59bby5","top":true,"project":"Java","type":"hot","subtitle":"Spring提供的用于访问Rest服务的客户端，RestTemplate提供了多种便捷访问远程Http服务的方法,能够大大提高客户端的编写效率。","site":{"data":{}},"updated":"2022-09-19T15:02:51.579Z","author":"Sunfy","comments":true,"path":"api/articles/resource-java-advanced-RestTemplate.json","webPath":"2022/07/16/resource-java-advanced-RestTemplate/","permalink":"https://sunfy9.gitee.io/2022/07/16/resource-java-advanced-RestTemplate/","excerpt":null,"covers":["../../../../img/RestTemplate/7c79f957d55ed815ebdf074b3131b1aa.png","../../../../img/RestTemplate/81a005ee01442869be51438e95ef77c2.png","../../../../img/2022/end-1660211340450.gif"],"keywords":"sunfy, hexo-theme-snail","content":"<p>RestTemplate是Spring提供的用于访问Rest服务的客户端，RestTemplate提供了多种便捷访问远程Http服务的方法,能够大大提高客户端的编写效率。</p>\n<p>我之前的HTTP开发是用apache的HttpClient开发，代码复杂，还得操心资源回收等。代码很复杂，冗余代码多，这是我封装好的一个post请求工具：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getJsonByparam</span><span class=\"params\">(String url, List&lt;BasicNameValuePair&gt; formParams)</span> <span class=\"keyword\">throws</span> IoException</span>&#123;</span><br><span class=\"line\">    CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class=\"line\">    HttpPost httpPost = <span class=\"keyword\">new</span> HttpPost(url);</span><br><span class=\"line\"> </span><br><span class=\"line\">    httpPost.setHeader(<span class=\"string\">\"Accept\"</span>,<span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">    httpPost.setHeader(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"application/x-www-form-urlencoded\"</span>);</span><br><span class=\"line\">    UrlEncodedFormEntity formEntity = <span class=\"keyword\">new</span> UrlEncodedFormEntity(formParams,<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">    httpPost.setEntity(formEntity);</span><br><span class=\"line\">    CloseableHttpResponse response = httpClient.execute(httpPost);</span><br><span class=\"line\">    HttpEntity entity = response.getEntity();</span><br><span class=\"line\">    String resultPre = EntityUtils.toString(entity,<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">    Document doc = Jsoup.parse(resultPre);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doc.text();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>本教程将带领大家实现Spring生态内RestTemplate的Get请求和Post请求还有exchange指定请求类型的实践和RestTemplate核心方法源码的分析，看完你就会用优雅的方式来发HTTP请求。<sunfy-line></p>\n<p>1、简述RestTemplate</p>\n<blockquote>\n<p>是Spring用于同步client端的核心类，简化了与http服务的通信，并满足RestFul原则，程序代码可以给它提供URL，并提取结果。默认情况下，RestTemplate默认依赖jdk的HTTP连接工具。当然你也可以 通过setRequestFactory属性切换到不同的HTTP源，比如Apache HttpComponents、Netty和OkHttp。</p>\n</blockquote>\n<p>RestTemplate能大幅简化了提交表单数据的难度，并且附带了自动转换JSON数据的功能，但只有理解了HttpEntity的组成结构（header与body），且理解了与uriVariables之间的差异，才能真正掌握其用法。这一点在Post请求更加突出，下面会介绍到。</p>\n<p>该类的入口主要是根据HTTP的六个方法制定：</p>\n<p><img src=\"../../../../img/RestTemplate/7c79f957d55ed815ebdf074b3131b1aa.png\" alt=\"img\"></p>\n<p>此外，exchange和excute可以通用上述方法。</p>\n<p>在内部，RestTemplate默认使用HttpMessageConverter实例将HTTP消息转换成POJO或者从POJO转换成HTTP消息。默认情况下会注册主mime类型的转换器，但也可以通过setMessageConverters注册其他的转换器。</p>\n<blockquote>\n<p>其实这点在使用的时候是察觉不到的，很多方法有一个responseType 参数，它让你传入一个响应体所映射成的对象，然后底层用HttpMessageConverter将其做映射</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpMessageConverterExtractor&lt;T&gt; responseExtractor =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HttpMessageConverterExtractor&lt;&gt;(responseType, getMessageConverters(), logger);</span><br></pre></td></tr></table></figure>\n<p>HttpMessageConverter.java源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HttpMessageConverter</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//指示此转换器是否可以读取给定的类。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">canRead</span><span class=\"params\">(Class&lt;?&gt; clazz, @Nullable MediaType mediaType)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//指示此转换器是否可以写给定的类。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">canWrite</span><span class=\"params\">(Class&lt;?&gt; clazz, @Nullable MediaType mediaType)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//返回List&lt;MediaType&gt;</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;MediaType&gt; <span class=\"title\">getSupportedMediaTypes</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//读取一个inputMessage</span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">(Class&lt;? extends T&gt; clazz, HttpInputMessage inputMessage)</span><span class=\"keyword\">throws</span> IOException, HttpMessageNotReadableException</span>;</span><br><span class=\"line\">    <span class=\"comment\">//往output message写一个Object</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(T t, @Nullable MediaType contentType, HttpOutputMessage outputMessage)</span><span class=\"keyword\">throws</span> IOException, HttpMessageNotWritableException</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在内部，RestTemplate默认使用SimpleClientHttpRequestFactory和DefaultResponseErrorHandler来分别处理HTTP的创建和错误，但也可以通过setRequestFactory和setErrorHandler来覆盖。</p>\n<p>2、get请求实践<br>2.1、getForObject()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title\">getForObject</span><span class=\"params\">(URI url, Class&lt;T&gt; responseType)</span></span></span><br></pre></td></tr></table></figure>\n<p> getForObject()其实比getForEntity()多包含了将HTTP转成POJO的功能，但是getForObject没有处理response的能力。因为它拿到手的就是成型的pojo。省略了很多response的信息。</p>\n<p>2.1.1、POJO:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Notice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> status;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object msg;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;DataBean&gt; data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataBean</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> noticeId;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String noticeTitle;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Object noticeImg;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> noticeCreateTime;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> noticeUpdateTime;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String noticeContent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>示例：2.1.2 不带参的get请求　　</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 不带参的get请求</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restTemplateGetTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RestTemplate restTemplate = <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    Notice notice = restTemplate.getForObject(<span class=\"string\">\"http://xxx.top/notice/list/1/5\"</span>, Notice<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    System.out.println(notice);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台打印：　　</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO 19076 --- [           main] c.w.s.c.w.c.HelloControllerTest         </span><br><span class=\"line\">: Started HelloControllerTest in 5.532 seconds (JVM running for 7.233)</span><br><span class=\"line\">Notice&#123;status&#x3D;200, msg&#x3D;null, data&#x3D;[DataBean&#123;noticeId&#x3D;21, noticeTitle&#x3D;&#39;aaa&#39;, noticeImg&#x3D;null,</span><br><span class=\"line\">noticeCreateTime&#x3D;1525292723000, noticeUpdateTime&#x3D;1525292723000, noticeContent&#x3D;&#39;&lt;p&gt;aaa&lt;&#x2F;p&gt;&#39;&#125;,</span><br><span class=\"line\">DataBean&#123;noticeId&#x3D;20, noticeTitle&#x3D;&#39;ahaha&#39;, noticeImg&#x3D;null, noticeCreateTime&#x3D;1525291492000,</span><br><span class=\"line\">noticeUpdateTime&#x3D;1525291492000, noticeContent&#x3D;&#39;&lt;p&gt;ah.......&#39;</span><br></pre></td></tr></table></figure>\n<p>示例：2.1.3 带参数的get请求1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Notice notice = restTemplate.getForObject(<span class=\"string\">\"http://fantj.top/notice/list/&#123;1&#125;/&#123;2&#125;\"</span>, Notice<span class=\"class\">.<span class=\"keyword\">class</span>,1,5)</span>;</span><br></pre></td></tr></table></figure>\n<p> 明眼人一眼能看出是用了占位符{1}。</p>\n<p>示例：2.1.4 带参数的get请求2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String,String&gt; map = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">map.put(<span class=\"string\">\"start\"</span>,<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">\"page\"</span>,<span class=\"string\">\"5\"</span>);</span><br><span class=\"line\">Notice notice = restTemplate.getForObject(<span class=\"string\">\"http://fantj.top/notice/list/\"</span>, Notice<span class=\"class\">.<span class=\"keyword\">class</span>,<span class=\"title\">map</span>)</span>;</span><br></pre></td></tr></table></figure>\n<p>明眼人一看就是利用map装载参数，不过它默认解析的是PathVariable的url形式。　　</p>\n<p>2.2、getForEntity()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">getForEntity</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">getForEntity</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">getForEntity</span><span class=\"params\">(URI url, Class&lt;T&gt; responseType)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>与getForObject()方法不同的是返回的是ResponseEntity对象，如果需要转换成pojo，还需要json工具类的引入，这个按个人喜好用。不会解析json的可以百度FastJson或者Jackson等工具类。然后我们就研究一下ResponseEntity下面有啥方法。</p>\n<p>ResponseEntity、HttpStatus、BodyBuilder结构</p>\n<p>ResponseEntity.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HttpStatus <span class=\"title\">getStatusCode</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getStatusCodeValue</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(@Nullable Object other)</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BodyBuilder <span class=\"title\">status</span><span class=\"params\">(HttpStatus status)</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BodyBuilder <span class=\"title\">ok</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">ok</span><span class=\"params\">(T body)</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BodyBuilder <span class=\"title\">created</span><span class=\"params\">(URI location)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>HttpStatus.java　　</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> HttpStatus &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">is1xxInformational</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">is2xxSuccessful</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">is3xxRedirection</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">is4xxClientError</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">is5xxServerError</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isError</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BodyBuilder.java　　</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BodyBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">HeadersBuilder</span>&lt;<span class=\"title\">BodyBuilder</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置正文的长度，以字节为单位，由Content-Length标头</span></span><br><span class=\"line\">    <span class=\"function\">BodyBuilder <span class=\"title\">contentLength</span><span class=\"params\">(<span class=\"keyword\">long</span> contentLength)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//设置body的MediaType 类型</span></span><br><span class=\"line\">    <span class=\"function\">BodyBuilder <span class=\"title\">contentType</span><span class=\"params\">(MediaType contentType)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//设置响应实体的主体并返回它。</span></span><br><span class=\"line\">    &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">body</span><span class=\"params\">(@Nullable T body)</span></span>;</span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure>\n<p>可以看出来，ResponseEntity包含了HttpStatus和BodyBuilder的这些信息，这更方便我们处理response原生的东西。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rtGetEntity</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        RestTemplate restTemplate = <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">        ResponseEntity&lt;Notice&gt; entity = restTemplate.getForEntity(<span class=\"string\">\"http://fantj.top/notice/list/1/5\"</span>, Notice<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        HttpStatus statusCode = entity.getStatusCode();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"statusCode.is2xxSuccessful()\"</span>+statusCode.is2xxSuccessful());</span><br><span class=\"line\">        Notice body = entity.getBody();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"entity.getBody()\"</span>+body);</span><br><span class=\"line\">        ResponseEntity.BodyBuilder status = ResponseEntity.status(statusCode);</span><br><span class=\"line\">        status.contentLength(<span class=\"number\">100</span>);</span><br><span class=\"line\">        status.body(<span class=\"string\">\"我在这里添加一句话\"</span>);</span><br><span class=\"line\">        ResponseEntity&lt;Class&lt;Notice&gt;&gt; body1 = status.body(Notice<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        Class&lt;Notice&gt; body2 = body1.getBody();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"body1.toString()\"</span>+body1.toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">statusCode.is2xxSuccessful()<span class=\"keyword\">true</span></span><br><span class=\"line\">entity.getBody()Notice&#123;status=<span class=\"number\">200</span>, msg=<span class=\"keyword\">null</span>, data=[DataBean&#123;noticeId=<span class=\"number\">21</span>, noticeTitle=<span class=\"string\">'aaa'</span>, ...</span><br><span class=\"line\">body1.toString()&lt;<span class=\"number\">200</span> OK,<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">waylau</span>.<span class=\"title\">spring</span>.<span class=\"title\">cloud</span>.<span class=\"title\">weather</span>.<span class=\"title\">pojo</span>.<span class=\"title\">Notice</span>,</span>&#123;Content-Length=[<span class=\"number\">100</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>\n<p>}</p>\n<p>当然，还有getHeaders()等方法没有举例。　　</p>\n<p>3、 post请求实践</p>\n<blockquote>\n<p>同样的,post请求也有postForObject和postForEntity。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(String url, @Nullable Object request, Class&lt;T&gt; responseType, Object... uriVariables)</span><span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(String url, @Nullable Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span><span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(URI url, @Nullable Object request, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>示例　　</p>\n<p>我用一个验证邮箱的接口来测试。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rtPostObject</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RestTemplate restTemplate = <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    String url = <span class=\"string\">\"http://47.xxx.xxx.96/register/checkEmail\"</span>;</span><br><span class=\"line\">    HttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</span><br><span class=\"line\">    headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);</span><br><span class=\"line\">    MultiValueMap&lt;String, String&gt; map= <span class=\"keyword\">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class=\"line\">    map.add(<span class=\"string\">\"email\"</span>, <span class=\"string\">\"844072586@qq.com\"</span>);</span><br><span class=\"line\">    HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; request = <span class=\"keyword\">new</span> HttpEntity&lt;&gt;(map, headers);</span><br><span class=\"line\">    ResponseEntity&lt;String&gt; response = restTemplate.postForEntity( url, request , String<span class=\"class\">.<span class=\"keyword\">class</span> )</span>;</span><br><span class=\"line\">    System.out.println(response.getBody());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：　　</p>\n<blockquote>\n<p>{“status”:500,”msg”:”该邮箱已被注册”,”data”:null}</p>\n</blockquote>\n<p>代码中，MultiValueMap是Map的一个子类，它的一个key可以存储多个value，简单的看下这个接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MultiValueMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">List</span>&lt;<span class=\"title\">V</span>&gt;&gt; </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么用MultiValueMap?因为HttpEntity接受的request类型是它。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HttpEntity</span><span class=\"params\">(@Nullable T body, @Nullable MultiValueMap&lt;String, String&gt; headers)</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//我这里只展示它的一个construct,从它可以看到我们传入的map是请求体，headers是请求头。</span></span><br></pre></td></tr></table></figure>\n<p>为什么用HttpEntity是因为restTemplate.postForEntity方法虽然表面上接收的request是@Nullable Object request类型，但是你追踪下去会发现，这个request是用HttpEntity来解析。核心代码如下：　　</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (requestBody <span class=\"keyword\">instanceof</span> HttpEntity) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.requestEntity = (HttpEntity&lt;?&gt;) requestBody;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (requestBody != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.requestEntity = <span class=\"keyword\">new</span> HttpEntity&lt;&gt;(requestBody);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.requestEntity = HttpEntity.EMPTY;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我曾尝试用map来传递参数，编译不会报错，但是执行不了，是无效的url request请求(400 ERROR)。其实这样的请求方式已经满足post请求了，cookie也是属于header的一部分。可以按需求设置请求头和请求体。其它方法与之类似。　　</p>\n<p>4、使用exchange指定调用方式<br>exchange()方法跟上面的getForObject()、getForEntity()、postForObject()、postForEntity()等方法不同之处在于它可以指定请求的HTTP类型。</p>\n<p><img src=\"../../../../img/RestTemplate/81a005ee01442869be51438e95ef77c2.png\" alt=\"Springboot -- 用更优雅的方式发HTTP请求(RestTemplate详解)\"></p>\n<p>但是你会发现exchange的方法中似乎都有@Nullable HttpEntity requestEntity这个参数，这就意味着我们至少要用HttpEntity来传递这个请求体，之前说过源码所以建议就使用HttpEntity提高性能。</p>\n<p>示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rtExchangeTest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JSONException </span>&#123;</span><br><span class=\"line\">    RestTemplate restTemplate = <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    String url = <span class=\"string\">\"http://xxx.top/notice/list\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    HttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</span><br><span class=\"line\">    headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);</span><br><span class=\"line\">    JSONObject jsonObj = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">    jsonObj.put(<span class=\"string\">\"start\"</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    jsonObj.put(<span class=\"string\">\"page\"</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    HttpEntity&lt;String&gt; entity = <span class=\"keyword\">new</span> HttpEntity&lt;&gt;(jsonObj.toString(), headers);</span><br><span class=\"line\">    ResponseEntity&lt;JSONObject&gt; exchange = restTemplate.exchange(url,HttpMethod.GET, entity, JSONObject<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    System.out.println(exchange.getBody());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这次可以看到，我使用了JSONObject对象传入和返回。</p>\n<p>当然，HttpMethod方法还有很多，用法类似。</p>\n<p>5、excute()指定调用方式<br>excute()的用法与exchange()大同小异了，它同样可以指定不同的HttpMethod，不同的是它返回的对象是响应体所映射成的对象，而不是ResponseEntity。</p>\n<p>需要强调的是，execute()方法是以上所有方法的底层调用。随便看一个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(String url, @Nullable Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    RequestCallback requestCallback = httpEntityCallback(request, responseType);</span><br><span class=\"line\">    HttpMessageConverterExtractor&lt;T&gt; responseExtractor =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HttpMessageConverterExtractor&lt;&gt;(responseType, getMessageConverters(), logger);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> execute(url, HttpMethod.POST, requestCallback, responseExtractor, uriVariables);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"../../../../img/2022/end-1660211340450.gif\" alt=\"end\"></p>\n","more":"<p>RestTemplate是Spring提供的用于访问Rest服务的客户端，RestTemplate提供了多种便捷访问远程Http服务的方法,能够大大提高客户端的编写效率。</p>\n<p>我之前的HTTP开发是用apache的HttpClient开发，代码复杂，还得操心资源回收等。代码很复杂，冗余代码多，这是我封装好的一个post请求工具：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getJsonByparam</span><span class=\"params\">(String url, List&lt;BasicNameValuePair&gt; formParams)</span> <span class=\"keyword\">throws</span> IoException</span>&#123;</span><br><span class=\"line\">    CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class=\"line\">    HttpPost httpPost = <span class=\"keyword\">new</span> HttpPost(url);</span><br><span class=\"line\"> </span><br><span class=\"line\">    httpPost.setHeader(<span class=\"string\">\"Accept\"</span>,<span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">    httpPost.setHeader(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"application/x-www-form-urlencoded\"</span>);</span><br><span class=\"line\">    UrlEncodedFormEntity formEntity = <span class=\"keyword\">new</span> UrlEncodedFormEntity(formParams,<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">    httpPost.setEntity(formEntity);</span><br><span class=\"line\">    CloseableHttpResponse response = httpClient.execute(httpPost);</span><br><span class=\"line\">    HttpEntity entity = response.getEntity();</span><br><span class=\"line\">    String resultPre = EntityUtils.toString(entity,<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">    Document doc = Jsoup.parse(resultPre);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doc.text();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>本教程将带领大家实现Spring生态内RestTemplate的Get请求和Post请求还有exchange指定请求类型的实践和RestTemplate核心方法源码的分析，看完你就会用优雅的方式来发HTTP请求。<sunfy-line></p>\n<p>1、简述RestTemplate</p>\n<blockquote>\n<p>是Spring用于同步client端的核心类，简化了与http服务的通信，并满足RestFul原则，程序代码可以给它提供URL，并提取结果。默认情况下，RestTemplate默认依赖jdk的HTTP连接工具。当然你也可以 通过setRequestFactory属性切换到不同的HTTP源，比如Apache HttpComponents、Netty和OkHttp。</p>\n</blockquote>\n<p>RestTemplate能大幅简化了提交表单数据的难度，并且附带了自动转换JSON数据的功能，但只有理解了HttpEntity的组成结构（header与body），且理解了与uriVariables之间的差异，才能真正掌握其用法。这一点在Post请求更加突出，下面会介绍到。</p>\n<p>该类的入口主要是根据HTTP的六个方法制定：</p>\n<p><img src=\"../../../../img/RestTemplate/7c79f957d55ed815ebdf074b3131b1aa.png\" alt=\"img\"></p>\n<p>此外，exchange和excute可以通用上述方法。</p>\n<p>在内部，RestTemplate默认使用HttpMessageConverter实例将HTTP消息转换成POJO或者从POJO转换成HTTP消息。默认情况下会注册主mime类型的转换器，但也可以通过setMessageConverters注册其他的转换器。</p>\n<blockquote>\n<p>其实这点在使用的时候是察觉不到的，很多方法有一个responseType 参数，它让你传入一个响应体所映射成的对象，然后底层用HttpMessageConverter将其做映射</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpMessageConverterExtractor&lt;T&gt; responseExtractor =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HttpMessageConverterExtractor&lt;&gt;(responseType, getMessageConverters(), logger);</span><br></pre></td></tr></table></figure>\n<p>HttpMessageConverter.java源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HttpMessageConverter</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//指示此转换器是否可以读取给定的类。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">canRead</span><span class=\"params\">(Class&lt;?&gt; clazz, @Nullable MediaType mediaType)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//指示此转换器是否可以写给定的类。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">canWrite</span><span class=\"params\">(Class&lt;?&gt; clazz, @Nullable MediaType mediaType)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//返回List&lt;MediaType&gt;</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;MediaType&gt; <span class=\"title\">getSupportedMediaTypes</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//读取一个inputMessage</span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">(Class&lt;? extends T&gt; clazz, HttpInputMessage inputMessage)</span><span class=\"keyword\">throws</span> IOException, HttpMessageNotReadableException</span>;</span><br><span class=\"line\">    <span class=\"comment\">//往output message写一个Object</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(T t, @Nullable MediaType contentType, HttpOutputMessage outputMessage)</span><span class=\"keyword\">throws</span> IOException, HttpMessageNotWritableException</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在内部，RestTemplate默认使用SimpleClientHttpRequestFactory和DefaultResponseErrorHandler来分别处理HTTP的创建和错误，但也可以通过setRequestFactory和setErrorHandler来覆盖。</p>\n<p>2、get请求实践<br>2.1、getForObject()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title\">getForObject</span><span class=\"params\">(URI url, Class&lt;T&gt; responseType)</span></span></span><br></pre></td></tr></table></figure>\n<p> getForObject()其实比getForEntity()多包含了将HTTP转成POJO的功能，但是getForObject没有处理response的能力。因为它拿到手的就是成型的pojo。省略了很多response的信息。</p>\n<p>2.1.1、POJO:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Notice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> status;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object msg;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;DataBean&gt; data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataBean</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> noticeId;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String noticeTitle;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Object noticeImg;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> noticeCreateTime;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> noticeUpdateTime;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String noticeContent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>示例：2.1.2 不带参的get请求　　</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 不带参的get请求</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restTemplateGetTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RestTemplate restTemplate = <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    Notice notice = restTemplate.getForObject(<span class=\"string\">\"http://xxx.top/notice/list/1/5\"</span>, Notice<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    System.out.println(notice);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台打印：　　</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO 19076 --- [           main] c.w.s.c.w.c.HelloControllerTest         </span><br><span class=\"line\">: Started HelloControllerTest in 5.532 seconds (JVM running for 7.233)</span><br><span class=\"line\">Notice&#123;status&#x3D;200, msg&#x3D;null, data&#x3D;[DataBean&#123;noticeId&#x3D;21, noticeTitle&#x3D;&#39;aaa&#39;, noticeImg&#x3D;null,</span><br><span class=\"line\">noticeCreateTime&#x3D;1525292723000, noticeUpdateTime&#x3D;1525292723000, noticeContent&#x3D;&#39;&lt;p&gt;aaa&lt;&#x2F;p&gt;&#39;&#125;,</span><br><span class=\"line\">DataBean&#123;noticeId&#x3D;20, noticeTitle&#x3D;&#39;ahaha&#39;, noticeImg&#x3D;null, noticeCreateTime&#x3D;1525291492000,</span><br><span class=\"line\">noticeUpdateTime&#x3D;1525291492000, noticeContent&#x3D;&#39;&lt;p&gt;ah.......&#39;</span><br></pre></td></tr></table></figure>\n<p>示例：2.1.3 带参数的get请求1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Notice notice = restTemplate.getForObject(<span class=\"string\">\"http://fantj.top/notice/list/&#123;1&#125;/&#123;2&#125;\"</span>, Notice<span class=\"class\">.<span class=\"keyword\">class</span>,1,5)</span>;</span><br></pre></td></tr></table></figure>\n<p> 明眼人一眼能看出是用了占位符{1}。</p>\n<p>示例：2.1.4 带参数的get请求2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String,String&gt; map = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">map.put(<span class=\"string\">\"start\"</span>,<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">\"page\"</span>,<span class=\"string\">\"5\"</span>);</span><br><span class=\"line\">Notice notice = restTemplate.getForObject(<span class=\"string\">\"http://fantj.top/notice/list/\"</span>, Notice<span class=\"class\">.<span class=\"keyword\">class</span>,<span class=\"title\">map</span>)</span>;</span><br></pre></td></tr></table></figure>\n<p>明眼人一看就是利用map装载参数，不过它默认解析的是PathVariable的url形式。　　</p>\n<p>2.2、getForEntity()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">getForEntity</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">getForEntity</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">getForEntity</span><span class=\"params\">(URI url, Class&lt;T&gt; responseType)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>与getForObject()方法不同的是返回的是ResponseEntity对象，如果需要转换成pojo，还需要json工具类的引入，这个按个人喜好用。不会解析json的可以百度FastJson或者Jackson等工具类。然后我们就研究一下ResponseEntity下面有啥方法。</p>\n<p>ResponseEntity、HttpStatus、BodyBuilder结构</p>\n<p>ResponseEntity.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HttpStatus <span class=\"title\">getStatusCode</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getStatusCodeValue</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(@Nullable Object other)</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BodyBuilder <span class=\"title\">status</span><span class=\"params\">(HttpStatus status)</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BodyBuilder <span class=\"title\">ok</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">ok</span><span class=\"params\">(T body)</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BodyBuilder <span class=\"title\">created</span><span class=\"params\">(URI location)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>HttpStatus.java　　</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> HttpStatus &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">is1xxInformational</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">is2xxSuccessful</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">is3xxRedirection</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">is4xxClientError</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">is5xxServerError</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isError</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BodyBuilder.java　　</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BodyBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">HeadersBuilder</span>&lt;<span class=\"title\">BodyBuilder</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置正文的长度，以字节为单位，由Content-Length标头</span></span><br><span class=\"line\">    <span class=\"function\">BodyBuilder <span class=\"title\">contentLength</span><span class=\"params\">(<span class=\"keyword\">long</span> contentLength)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//设置body的MediaType 类型</span></span><br><span class=\"line\">    <span class=\"function\">BodyBuilder <span class=\"title\">contentType</span><span class=\"params\">(MediaType contentType)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//设置响应实体的主体并返回它。</span></span><br><span class=\"line\">    &lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">body</span><span class=\"params\">(@Nullable T body)</span></span>;</span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure>\n<p>可以看出来，ResponseEntity包含了HttpStatus和BodyBuilder的这些信息，这更方便我们处理response原生的东西。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rtGetEntity</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        RestTemplate restTemplate = <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">        ResponseEntity&lt;Notice&gt; entity = restTemplate.getForEntity(<span class=\"string\">\"http://fantj.top/notice/list/1/5\"</span>, Notice<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        HttpStatus statusCode = entity.getStatusCode();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"statusCode.is2xxSuccessful()\"</span>+statusCode.is2xxSuccessful());</span><br><span class=\"line\">        Notice body = entity.getBody();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"entity.getBody()\"</span>+body);</span><br><span class=\"line\">        ResponseEntity.BodyBuilder status = ResponseEntity.status(statusCode);</span><br><span class=\"line\">        status.contentLength(<span class=\"number\">100</span>);</span><br><span class=\"line\">        status.body(<span class=\"string\">\"我在这里添加一句话\"</span>);</span><br><span class=\"line\">        ResponseEntity&lt;Class&lt;Notice&gt;&gt; body1 = status.body(Notice<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        Class&lt;Notice&gt; body2 = body1.getBody();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"body1.toString()\"</span>+body1.toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">statusCode.is2xxSuccessful()<span class=\"keyword\">true</span></span><br><span class=\"line\">entity.getBody()Notice&#123;status=<span class=\"number\">200</span>, msg=<span class=\"keyword\">null</span>, data=[DataBean&#123;noticeId=<span class=\"number\">21</span>, noticeTitle=<span class=\"string\">'aaa'</span>, ...</span><br><span class=\"line\">body1.toString()&lt;<span class=\"number\">200</span> OK,<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">waylau</span>.<span class=\"title\">spring</span>.<span class=\"title\">cloud</span>.<span class=\"title\">weather</span>.<span class=\"title\">pojo</span>.<span class=\"title\">Notice</span>,</span>&#123;Content-Length=[<span class=\"number\">100</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>\n<p>}</p>\n<p>当然，还有getHeaders()等方法没有举例。　　</p>\n<p>3、 post请求实践</p>\n<blockquote>\n<p>同样的,post请求也有postForObject和postForEntity。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(String url, @Nullable Object request, Class&lt;T&gt; responseType, Object... uriVariables)</span><span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(String url, @Nullable Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span><span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(URI url, @Nullable Object request, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>示例　　</p>\n<p>我用一个验证邮箱的接口来测试。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rtPostObject</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RestTemplate restTemplate = <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    String url = <span class=\"string\">\"http://47.xxx.xxx.96/register/checkEmail\"</span>;</span><br><span class=\"line\">    HttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</span><br><span class=\"line\">    headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);</span><br><span class=\"line\">    MultiValueMap&lt;String, String&gt; map= <span class=\"keyword\">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class=\"line\">    map.add(<span class=\"string\">\"email\"</span>, <span class=\"string\">\"844072586@qq.com\"</span>);</span><br><span class=\"line\">    HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; request = <span class=\"keyword\">new</span> HttpEntity&lt;&gt;(map, headers);</span><br><span class=\"line\">    ResponseEntity&lt;String&gt; response = restTemplate.postForEntity( url, request , String<span class=\"class\">.<span class=\"keyword\">class</span> )</span>;</span><br><span class=\"line\">    System.out.println(response.getBody());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：　　</p>\n<blockquote>\n<p>{“status”:500,”msg”:”该邮箱已被注册”,”data”:null}</p>\n</blockquote>\n<p>代码中，MultiValueMap是Map的一个子类，它的一个key可以存储多个value，简单的看下这个接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MultiValueMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">List</span>&lt;<span class=\"title\">V</span>&gt;&gt; </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么用MultiValueMap?因为HttpEntity接受的request类型是它。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HttpEntity</span><span class=\"params\">(@Nullable T body, @Nullable MultiValueMap&lt;String, String&gt; headers)</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//我这里只展示它的一个construct,从它可以看到我们传入的map是请求体，headers是请求头。</span></span><br></pre></td></tr></table></figure>\n<p>为什么用HttpEntity是因为restTemplate.postForEntity方法虽然表面上接收的request是@Nullable Object request类型，但是你追踪下去会发现，这个request是用HttpEntity来解析。核心代码如下：　　</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (requestBody <span class=\"keyword\">instanceof</span> HttpEntity) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.requestEntity = (HttpEntity&lt;?&gt;) requestBody;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (requestBody != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.requestEntity = <span class=\"keyword\">new</span> HttpEntity&lt;&gt;(requestBody);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.requestEntity = HttpEntity.EMPTY;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我曾尝试用map来传递参数，编译不会报错，但是执行不了，是无效的url request请求(400 ERROR)。其实这样的请求方式已经满足post请求了，cookie也是属于header的一部分。可以按需求设置请求头和请求体。其它方法与之类似。　　</p>\n<p>4、使用exchange指定调用方式<br>exchange()方法跟上面的getForObject()、getForEntity()、postForObject()、postForEntity()等方法不同之处在于它可以指定请求的HTTP类型。</p>\n<p><img src=\"../../../../img/RestTemplate/81a005ee01442869be51438e95ef77c2.png\" alt=\"Springboot -- 用更优雅的方式发HTTP请求(RestTemplate详解)\"></p>\n<p>但是你会发现exchange的方法中似乎都有@Nullable HttpEntity requestEntity这个参数，这就意味着我们至少要用HttpEntity来传递这个请求体，之前说过源码所以建议就使用HttpEntity提高性能。</p>\n<p>示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rtExchangeTest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JSONException </span>&#123;</span><br><span class=\"line\">    RestTemplate restTemplate = <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    String url = <span class=\"string\">\"http://xxx.top/notice/list\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    HttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</span><br><span class=\"line\">    headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);</span><br><span class=\"line\">    JSONObject jsonObj = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">    jsonObj.put(<span class=\"string\">\"start\"</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    jsonObj.put(<span class=\"string\">\"page\"</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    HttpEntity&lt;String&gt; entity = <span class=\"keyword\">new</span> HttpEntity&lt;&gt;(jsonObj.toString(), headers);</span><br><span class=\"line\">    ResponseEntity&lt;JSONObject&gt; exchange = restTemplate.exchange(url,HttpMethod.GET, entity, JSONObject<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    System.out.println(exchange.getBody());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这次可以看到，我使用了JSONObject对象传入和返回。</p>\n<p>当然，HttpMethod方法还有很多，用法类似。</p>\n<p>5、excute()指定调用方式<br>excute()的用法与exchange()大同小异了，它同样可以指定不同的HttpMethod，不同的是它返回的对象是响应体所映射成的对象，而不是ResponseEntity。</p>\n<p>需要强调的是，execute()方法是以上所有方法的底层调用。随便看一个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(String url, @Nullable Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    RequestCallback requestCallback = httpEntityCallback(request, responseType);</span><br><span class=\"line\">    HttpMessageConverterExtractor&lt;T&gt; responseExtractor =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HttpMessageConverterExtractor&lt;&gt;(responseType, getMessageConverters(), logger);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> execute(url, HttpMethod.POST, requestCallback, responseExtractor, uriVariables);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"../../../../img/2022/end-1660211340450.gif\" alt=\"end\"></p>\n","next":{"title":"TCP 为什么要三次握手?","path":"api/articles/resource-RPC-Base-TCP三次握手.json","image":"/img/header_img/rpc/tcp三次握手.png","num_read":249,"num_like":398,"num_collection":80,"num_comments":122},"prev":{"title":"SQLSERVER数据库日期函数","path":"api/articles/resource-DB-SQLServer-日期函数.json","image":"/img/header_img/DB/Datefunction.png","num_read":379,"num_like":999,"num_collection":737,"num_comments":164},"categories":[{"name":"Java","path":"api/categories/Java.json","pathContent":"api/categories/Java","description":"知识点、常用功能","cover":"https://sunfy9.gitee.io/project/photo/project/java.png"}],"tags":[]}