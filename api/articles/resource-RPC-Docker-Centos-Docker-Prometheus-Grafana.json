{"title":"基于docker 搭建Prometheus+Grafana","num_read":811,"num_like":708,"num_collection":640,"num_comments":237,"slug":"resource-RPC-Docker-Centos-Docker-Prometheus-Grafana","date":"2021-04-17T16:00:00.000Z","img":"/img/header_img/docker/docker.jpg","_id":"clhrbp2fp00f9o5lgd904fcrs","project":"RPC","site":{"data":{}},"updated":"2022-09-20T02:09:00.823Z","author":"Sunfy","comments":true,"path":"api/articles/resource-RPC-Docker-Centos-Docker-Prometheus-Grafana.json","webPath":"2021/04/18/resource-RPC-Docker-Centos-Docker-Prometheus-Grafana/","permalink":"https://sunfy9.gitee.io/2021/04/18/resource-RPC-Docker-Centos-Docker-Prometheus-Grafana/","excerpt":"Prometheus（普罗米修斯）是一套开源的监控&amp;报警&amp;时间序列数据库的组合，起始是由SoundCloud公司开发的。随着发展，越来越多公司和组织接受采用Prometheus，社会也十分活跃，他们便将它独立成开源项目，并且有公司来运作。Google SRE的书内也曾提到跟他们BorgMon监控系统相似的实现是Prometheus。现在最常见的Kubernetes容器管理系统中，通常会搭配Prometheus进行监控。","covers":["../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108170701192-544617423.jpg","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108171729613-1031744778.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108172459066-1268369984.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108173214667-1683170215.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108173301486-803834624.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175033563-1187448777.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175115397-1630657428.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175150766-1146838339.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175335901-209843394.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175543609-598692887.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175634654-924081366.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175652536-52423850.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175730765-2063837837.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175913741-475587810.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175957546-479306322.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108180101326-1366026901.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108180533718-812469530.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108180627880-1441743252.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108180746522-1027042926.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108180821288-1708778991.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181212402-1807243006.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181243544-126607151.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181317852-1720800596.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181403610-481592444.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181436660-1511454160.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181459540-6764391.png","../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181552921-1347274147.png"],"keywords":"sunfy, hexo-theme-snail","content":"<p>Prometheus（普罗米修斯）是一套开源的监控&amp;报警&amp;时间序列数据库的组合，起始是由<a href=\"https://soundcloud.com/\" target=\"_blank\" rel=\"noopener\">SoundCloud</a>公司开发的。随着发展，越来越多公司和组织接受采用Prometheus，社会也十分活跃，他们便将它独立成开源项目，并且有公司来运作。Google SRE的书内也曾提到跟他们BorgMon监控系统相似的实现是Prometheus。现在最常见的Kubernetes容器管理系统中，通常会搭配Prometheus进行监控。<a id=\"more\"></a></p>\n<h3 id=\"介绍Prometheus\"><a href=\"#介绍Prometheus\" class=\"headerlink\" title=\"介绍Prometheus\"></a>介绍Prometheus</h3><p>Prometheus（普罗米修斯）是一套开源的监控&amp;报警&amp;时间序列数据库的组合，起始是由<a href=\"https://soundcloud.com/\" target=\"_blank\" rel=\"noopener\">SoundCloud</a>公司开发的。随着发展，越来越多公司和组织接受采用Prometheus，社会也十分活跃，他们便将它独立成开源项目，并且有公司来运作。Google SRE的书内也曾提到跟他们BorgMon监控系统相似的实现是Prometheus。现在最常见的Kubernetes容器管理系统中，通常会搭配Prometheus进行监控。</p>\n<p>Prometheus基本原理是通过HTTP协议周期性抓取被监控组件的状态，这样做的好处是任意组件只要提供HTTP接口就可以接入监控系统，不需要任何SDK或者其他的集成过程。这样做非常适合虚拟化环境比如VM或者Docker 。</p>\n<p>Prometheus应该是为数不多的适合Docker、Mesos、Kubernetes环境的监控系统之一。</p>\n<p>输出被监控组件信息的HTTP接口被叫做exporter 。目前互联网公司常用的组件大部分都有exporter可以直接使用，比如Varnish、Haproxy、Nginx、MySQL、Linux 系统信息 (包括磁盘、内存、CPU、网络等等)，具体支持的源看：<a href=\"https://github.com/prometheus。\" target=\"_blank\" rel=\"noopener\">https://github.com/prometheus。</a></p>\n<p>与其他监控系统相比，Prometheus的主要特点是：<sunfy-line></p>\n<ul>\n<li>一个多维数据模型（时间序列由指标名称定义和设置键/值尺寸）。</li>\n<li>非常高效的存储，平均一个采样数据占~3.5bytes左右，320万的时间序列，每30秒采样，保持60天，消耗磁盘大概228G。</li>\n<li>一种灵活的查询语言。</li>\n<li>不依赖分布式存储，单个服务器节点。</li>\n<li>时间集合通过HTTP上的PULL模型进行。</li>\n<li>通过中间网关支持推送时间。</li>\n<li>通过服务发现或静态配置发现目标。</li>\n<li>多种模式的图形和仪表板支持。</li>\n</ul>\n<h3 id=\"Prometheus架构概览\"><a href=\"#Prometheus架构概览\" class=\"headerlink\" title=\"Prometheus架构概览\"></a>Prometheus架构概览</h3><p>该图说明了普罗米修斯（Prometheus）及其一些生态系统组件的整体架构：</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108170701192-544617423.jpg\" alt=\"img\"></p>\n<p>它的服务过程是这样的Prometheus daemon负责定时去目标上抓取metrics(指标) 数据，每个抓取目标需要暴露一个http服务的接口给它定时抓取。</p>\n<p>Prometheus：支持通过配置文件、文本文件、zookeeper、Consul、DNS SRV lookup等方式指定抓取目标。支持很多方式的图表可视化，例如十分精美的Grafana，自带的Promdash，以及自身提供的模版引擎等等，还提供HTTP API的查询方式，自定义所需要的输出。</p>\n<p>Alertmanager：是独立于Prometheus的一个组件，可以支持Prometheus的查询语句，提供十分灵活的报警方式。</p>\n<p>PushGateway：这个组件是支img持Client主动推送metrics到PushGateway，而Prometheus只是定时去Gateway上抓取数据。</p>\n<p>如果有使用过statsd的用户，则会觉得这十分相似，只是statsd是直接发送给服务器端，而Prometheus主要还是靠进程主动去抓取。</p>\n<p>大多数Prometheus组件都是用Go编写的，它们可以轻松地构建和部署为静态二进制文件。访问<a href=\"https://prometheus.io/\" target=\"_blank\" rel=\"noopener\">prometheus.io</a>以获取完整的文档，示例和指南。</p>\n<h3 id=\"Prometheus的数据模型\"><a href=\"#Prometheus的数据模型\" class=\"headerlink\" title=\"Prometheus的数据模型\"></a>Prometheus的数据模型</h3><p>Prometheus从根本上所有的存储都是按时间序列去实现的，相同的metrics(指标名称) 和label(一个或多个标签) 组成一条时间序列，不同的label表示不同的时间序列。为了支持一些查询，有时还会临时产生一些时间序列存储。</p>\n<p>metrics name&amp;label指标名称和标签</p>\n<p>每条时间序列是由唯一的”指标名称”和一组”标签（key=value）”的形式组成。</p>\n<p>指标名称：一般是给监测对像起一名字，例如http<em>requests_total这样，它有一些命名规则，可以包字母数字</em>之类的的。通常是以应用名称开头<em>监测对像</em>数值类型_单位这样。例如：push_total、userlogin_mysql_duration_seconds、app_memory_usage_bytes。</p>\n<p>标签：就是对一条时间序列不同维度的识别了，例如一个http请求用的是POST还是GET，它的endpoint是什么，这时候就要用标签去标记了。最终形成的标识便是这样了：http_requests_total{method=”POST”,endpoint=”/api/tracks”}。</p>\n<p>记住，针对http_requests_total这个metrics name无论是增加标签还是删除标签都会形成一条新的时间序列。</p>\n<p>查询语句就可以跟据上面标签的组合来查询聚合结果了。</p>\n<p>如果以传统数据库的理解来看这条语句，则可以考虑http_requests_total是表名，标签是字段，而timestamp是主键，还有一个float64字段是值了。（Prometheus里面所有值都是按float64存储）。</p>\n<h3 id=\"Prometheus四种数据类型\"><a href=\"#Prometheus四种数据类型\" class=\"headerlink\" title=\"Prometheus四种数据类型\"></a>Prometheus四种数据类型</h3><p>Counter</p>\n<p>Counter用于累计值，例如记录请求次数、任务完成数、错误发生次数。一直增加，不会减少。重启进程后，会被重置。</p>\n<p>例如：http_response_total{method=”GET”,endpoint=”/api/tracks”} 100，10秒后抓取http_response_total{method=”GET”,endpoint=”/api/tracks”} 100。</p>\n<p>Gauge</p>\n<p>Gauge常规数值，例如 温度变化、内存使用变化。可变大，可变小。重启进程后，会被重置。</p>\n<p>例如： memory_usage_bytes{host=”master-01″} 100 &lt; 抓取值、memory_usage_bytes{host=”master-01″} 30、memory_usage_bytes{host=”master-01″} 50、memory_usage_bytes{host=”master-01″} 80 &lt; 抓取值。</p>\n<p>Histogram</p>\n<p>Histogram（直方图）可以理解为柱状图的意思，常用于跟踪事件发生的规模，例如：请求耗时、响应大小。它特别之处是可以对记录的内容进行分组，提供count和sum全部值的功能。</p>\n<p>例如：{小于10=5次，小于20=1次，小于30=2次}，count=7次，sum=7次的求和值。</p>\n<p>Summary</p>\n<p>Summary和Histogram十分相似，常用于跟踪事件发生的规模，例如：请求耗时、响应大小。同样提供 count 和 sum 全部值的功能。</p>\n<p>例如：count=7次，sum=7次的值求值。</p>\n<p>它提供一个quantiles的功能，可以按%比划分跟踪的结果。例如：quantile取值0.95，表示取采样值里面的95%数据。</p>\n<h3 id=\"安装运行Prometheus-docker版\"><a href=\"#安装运行Prometheus-docker版\" class=\"headerlink\" title=\"安装运行Prometheus(docker版)\"></a>安装运行Prometheus(docker版)</h3><p>下面介绍如何使用Prometheus和Grafana对本机服务器性能进行监控。</p>\n<p>监控本机，只需要一个exporter</p>\n<p>node_exporter – 用于机器系统数据收集</p>\n<p>Grafana是一个开源的功能丰富的数据可视化平台，通常用于时序数据的可视化。它内置了以下数据源的支持：</p>\n<p>下面是我们安装时用到的架构图：</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108171729613-1031744778.png\" alt=\"img\"></p>\n<p><strong>注意：本文使用的是ubuntu-16.04.5-server-amd64，只需要一台服务器即可！</strong> </p>\n<h4 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install -y docker.io</span><br></pre></td></tr></table></figure>\n<p>注意：网上的文章说要安装docker-engine和docker-ce，那都是扯淡的。包压根都找不到！</p>\n<p>只需要安装docker.io就可以了！</p>\n<p>如果是Centos系统，使用 yum install -y docker-io 安装 </p>\n<h4 id=\"下载镜像包\"><a href=\"#下载镜像包\" class=\"headerlink\" title=\"下载镜像包\"></a>下载镜像包</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull prom&#x2F;node-exporter</span><br><span class=\"line\">docker pull prom&#x2F;prometheus</span><br><span class=\"line\">docker pull grafana&#x2F;grafana</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动node-exporter\"><a href=\"#启动node-exporter\" class=\"headerlink\" title=\"启动node-exporter\"></a>启动node-exporter</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 9100:9100 \\</span><br><span class=\"line\">  -v &quot;&#x2F;proc:&#x2F;host&#x2F;proc:ro&quot; \\</span><br><span class=\"line\">  -v &quot;&#x2F;sys:&#x2F;host&#x2F;sys:ro&quot; \\</span><br><span class=\"line\">  -v &quot;&#x2F;:&#x2F;rootfs:ro&quot; \\</span><br><span class=\"line\">  --net&#x3D;&quot;host&quot; \\</span><br><span class=\"line\">  prom&#x2F;node-exporter</span><br></pre></td></tr></table></figure>\n<p> 等待几秒钟，查看端口是否起来了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~# netstat -anpt</span><br><span class=\"line\">Active Internet connections (servers and established)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name</span><br><span class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1147&#x2F;sshd       </span><br><span class=\"line\">tcp        0     36 192.168.91.132:22       192.168.91.1:63648      ESTABLISHED 2969&#x2F;0          </span><br><span class=\"line\">tcp        0      0 192.168.91.132:22       192.168.91.1:63340      ESTABLISHED 1321&#x2F;1          </span><br><span class=\"line\">tcp6       0      0 :::9100                 :::*                    LISTEN      3070&#x2F;node_exporter</span><br></pre></td></tr></table></figure>\n<p>访问url：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.91.132:9100&#x2F;metrics</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108172459066-1268369984.png\" alt=\"img\"></p>\n<p>这些都是收集到数据，有了它就可以做数据展示了</p>\n<h4 id=\"启动prometheus\"><a href=\"#启动prometheus\" class=\"headerlink\" title=\"启动prometheus\"></a>启动prometheus</h4><p>新建目录prometheus，编辑配置文件prometheus.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir &#x2F;opt&#x2F;prometheus</span><br><span class=\"line\">cd &#x2F;opt&#x2F;prometheus&#x2F;</span><br><span class=\"line\">vim prometheus.yml</span><br></pre></td></tr></table></figure>\n<p>内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global:</span><br><span class=\"line\">  scrape_interval:     60s</span><br><span class=\"line\">  evaluation_interval: 60s</span><br><span class=\"line\"> </span><br><span class=\"line\">scrape_configs:</span><br><span class=\"line\">  - job_name: prometheus</span><br><span class=\"line\">    static_configs:</span><br><span class=\"line\">      - targets: [&#39;localhost:9090&#39;]</span><br><span class=\"line\">        labels:</span><br><span class=\"line\">          instance: prometheus</span><br><span class=\"line\"> </span><br><span class=\"line\">  - job_name: linux</span><br><span class=\"line\">    static_configs:</span><br><span class=\"line\">      - targets: [&#39;192.168.91.132:9100&#39;]</span><br><span class=\"line\">        labels:</span><br><span class=\"line\">          instance: localhost</span><br></pre></td></tr></table></figure>\n<p>注意：修改IP地址，这里的192.168.91.132就是本机地址</p>\n<p>启动prometheus</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run  -d \\</span><br><span class=\"line\">  -p 9090:9090 \\</span><br><span class=\"line\">  -v &#x2F;opt&#x2F;prometheus&#x2F;prometheus.yml:&#x2F;etc&#x2F;prometheus&#x2F;prometheus.yml  \\</span><br><span class=\"line\">  prom&#x2F;prometheus</span><br></pre></td></tr></table></figure>\n<p>等待几秒钟，查看端口状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:&#x2F;opt&#x2F;prometheus# netstat -anpt</span><br><span class=\"line\">Active Internet connections (servers and established)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name</span><br><span class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1147&#x2F;sshd       </span><br><span class=\"line\">tcp        0     36 192.168.91.132:22       192.168.91.1:63648      ESTABLISHED 2969&#x2F;0          </span><br><span class=\"line\">tcp        0      0 192.168.91.132:22       192.168.91.1:63340      ESTABLISHED 1321&#x2F;1          </span><br><span class=\"line\">tcp6       0      0 :::9100                 :::*                    LISTEN      3070&#x2F;node_exporter</span><br><span class=\"line\">tcp6       0      0 :::22                   :::*                    LISTEN      1147&#x2F;sshd       </span><br><span class=\"line\">tcp6       0      0 :::9090                 :::*                    LISTEN      3336&#x2F;docker-proxy</span><br></pre></td></tr></table></figure>\n<p>访问url：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.91.132:9090&#x2F;graph</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108173214667-1683170215.png\" alt=\"img\"></p>\n<p>访问targets，url如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.91.132:9090&#x2F;targets</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108173301486-803834624.png\" alt=\"img\"></p>\n<p>如果状态没有UP起来，等待一会，就会UP了</p>\n<h4 id=\"启动grafana\"><a href=\"#启动grafana\" class=\"headerlink\" title=\"启动grafana\"></a>启动grafana</h4><p>新建空文件夹grafana-storage，用来存储数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir &#x2F;opt&#x2F;grafana-storage</span><br></pre></td></tr></table></figure>\n<p>设置权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 777 -R &#x2F;opt&#x2F;grafana-storage</span><br></pre></td></tr></table></figure>\n<p>因为grafana用户会在这个目录写入文件，直接设置777，比较简单粗暴！</p>\n<p>启动grafana</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  -p 3000:3000 \\</span><br><span class=\"line\">  --name&#x3D;grafana \\</span><br><span class=\"line\">  -v &#x2F;opt&#x2F;grafana-storage:&#x2F;var&#x2F;lib&#x2F;grafana \\</span><br><span class=\"line\">  grafana&#x2F;grafana</span><br></pre></td></tr></table></figure>\n<p>等待几秒钟，查看端口状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:&#x2F;opt&#x2F;prometheus# netstat -anpt</span><br><span class=\"line\">Active Internet connections (servers and established)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name</span><br><span class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1147&#x2F;sshd       </span><br><span class=\"line\">tcp        0     36 192.168.91.132:22       192.168.91.1:63648      ESTABLISHED 2969&#x2F;0          </span><br><span class=\"line\">tcp        0      0 192.168.91.132:22       192.168.91.1:63340      ESTABLISHED 1321&#x2F;1          </span><br><span class=\"line\">tcp6       0      0 :::9100                 :::*                    LISTEN      3070&#x2F;node_exporter</span><br><span class=\"line\">tcp6       0      0 :::22                   :::*                    LISTEN      1147&#x2F;sshd       </span><br><span class=\"line\">tcp6       0      0 :::3000                 :::*                    LISTEN      3494&#x2F;docker-proxy</span><br><span class=\"line\">tcp6       0      0 :::9090                 :::*                    LISTEN      3336&#x2F;docker-proxy</span><br><span class=\"line\">tcp6       0      0 192.168.91.132:9100     172.17.0.2:55108        ESTABLISHED 3070&#x2F;node_exporter</span><br></pre></td></tr></table></figure>\n<p>访问url：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.91.132:3000&#x2F;</span><br></pre></td></tr></table></figure>\n<p>默认会先跳转到登录页面，默认的用户名和密码都是admin</p>\n<p> <img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175033563-1187448777.png\" alt=\"img\"></p>\n<p>登录之后，它会要求你重置密码。你还可以再输次admin密码！</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175115397-1630657428.png\" alt=\"img\"></p>\n<p>密码设置完成之后，就会跳转到首页</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175150766-1146838339.png\" alt=\"img\"></p>\n<p>点击Add data source，由于使用的是镜像方式，所以版本比较新。和网络上的文章展示的图片不一样！</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175335901-209843394.png\" alt=\"img\"></p>\n<p>name名字写Prometheus</p>\n<p>type 选择Prometheus，因为数据都从它那里获取</p>\n<p>url 输入Prometheus的ip+端口</p>\n<p>点击下面的Save &amp; Test，如果出现绿色的，说明ok了</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175543609-598692887.png\" alt=\"img\"></p>\n<p>回到首页，点击New dashboard</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175634654-924081366.png\" alt=\"img\"></p>\n<p>点击 Graph</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175652536-52423850.png\" alt=\"img\"></p>\n<p>效果如下：</p>\n<p> <img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175730765-2063837837.png\" alt=\"img\"></p>\n<p> 点击标题下方的编辑</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175913741-475587810.png\" alt=\"img\"></p>\n<p>效果如下：</p>\n<p> <img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175957546-479306322.png\" alt=\"img\"></p>\n<p>输入cpu，底部会有提示</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108180101326-1366026901.png\" alt=\"img\"></p>\n<p>这里监控 node_load15，表示系统15分钟的负载。点击下面的Add Query</p>\n<p> <img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108180533718-812469530.png\" alt=\"img\"></p>\n<p>效果如下：</p>\n<p> <img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108180627880-1441743252.png\" alt=\"img\"></p>\n<p>添加总内存</p>\n<p> <img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108180746522-1027042926.png\" alt=\"img\"></p>\n<p>这里会多出一条线</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108180821288-1708778991.png\" alt=\"img\"></p>\n<p>点击右边的，可以删除掉 总内存</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181212402-1807243006.png\" alt=\"img\"></p>\n<p>点击General，修改标题为中文</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181243544-126607151.png\" alt=\"img\"></p>\n<p> 图表效果如下：</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181317852-1720800596.png\" alt=\"img\"></p>\n<p> 点击上面的保存按钮</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181403610-481592444.png\" alt=\"img\"></p>\n<p>输入名字</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181436660-1511454160.png\" alt=\"img\"></p>\n<p>效果如下：<br><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181459540-6764391.png\" alt=\"img\"></p>\n<p>点击首页，就会有展示</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181552921-1347274147.png\" alt=\"img\"></p>\n","more":"</p>\n<h3 id=\"介绍Prometheus\"><a href=\"#介绍Prometheus\" class=\"headerlink\" title=\"介绍Prometheus\"></a>介绍Prometheus</h3><p>Prometheus（普罗米修斯）是一套开源的监控&amp;报警&amp;时间序列数据库的组合，起始是由<a href=\"https://soundcloud.com/\" target=\"_blank\" rel=\"noopener\">SoundCloud</a>公司开发的。随着发展，越来越多公司和组织接受采用Prometheus，社会也十分活跃，他们便将它独立成开源项目，并且有公司来运作。Google SRE的书内也曾提到跟他们BorgMon监控系统相似的实现是Prometheus。现在最常见的Kubernetes容器管理系统中，通常会搭配Prometheus进行监控。</p>\n<p>Prometheus基本原理是通过HTTP协议周期性抓取被监控组件的状态，这样做的好处是任意组件只要提供HTTP接口就可以接入监控系统，不需要任何SDK或者其他的集成过程。这样做非常适合虚拟化环境比如VM或者Docker 。</p>\n<p>Prometheus应该是为数不多的适合Docker、Mesos、Kubernetes环境的监控系统之一。</p>\n<p>输出被监控组件信息的HTTP接口被叫做exporter 。目前互联网公司常用的组件大部分都有exporter可以直接使用，比如Varnish、Haproxy、Nginx、MySQL、Linux 系统信息 (包括磁盘、内存、CPU、网络等等)，具体支持的源看：<a href=\"https://github.com/prometheus。\" target=\"_blank\" rel=\"noopener\">https://github.com/prometheus。</a></p>\n<p>与其他监控系统相比，Prometheus的主要特点是：<sunfy-line></p>\n<ul>\n<li>一个多维数据模型（时间序列由指标名称定义和设置键/值尺寸）。</li>\n<li>非常高效的存储，平均一个采样数据占~3.5bytes左右，320万的时间序列，每30秒采样，保持60天，消耗磁盘大概228G。</li>\n<li>一种灵活的查询语言。</li>\n<li>不依赖分布式存储，单个服务器节点。</li>\n<li>时间集合通过HTTP上的PULL模型进行。</li>\n<li>通过中间网关支持推送时间。</li>\n<li>通过服务发现或静态配置发现目标。</li>\n<li>多种模式的图形和仪表板支持。</li>\n</ul>\n<h3 id=\"Prometheus架构概览\"><a href=\"#Prometheus架构概览\" class=\"headerlink\" title=\"Prometheus架构概览\"></a>Prometheus架构概览</h3><p>该图说明了普罗米修斯（Prometheus）及其一些生态系统组件的整体架构：</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108170701192-544617423.jpg\" alt=\"img\"></p>\n<p>它的服务过程是这样的Prometheus daemon负责定时去目标上抓取metrics(指标) 数据，每个抓取目标需要暴露一个http服务的接口给它定时抓取。</p>\n<p>Prometheus：支持通过配置文件、文本文件、zookeeper、Consul、DNS SRV lookup等方式指定抓取目标。支持很多方式的图表可视化，例如十分精美的Grafana，自带的Promdash，以及自身提供的模版引擎等等，还提供HTTP API的查询方式，自定义所需要的输出。</p>\n<p>Alertmanager：是独立于Prometheus的一个组件，可以支持Prometheus的查询语句，提供十分灵活的报警方式。</p>\n<p>PushGateway：这个组件是支img持Client主动推送metrics到PushGateway，而Prometheus只是定时去Gateway上抓取数据。</p>\n<p>如果有使用过statsd的用户，则会觉得这十分相似，只是statsd是直接发送给服务器端，而Prometheus主要还是靠进程主动去抓取。</p>\n<p>大多数Prometheus组件都是用Go编写的，它们可以轻松地构建和部署为静态二进制文件。访问<a href=\"https://prometheus.io/\" target=\"_blank\" rel=\"noopener\">prometheus.io</a>以获取完整的文档，示例和指南。</p>\n<h3 id=\"Prometheus的数据模型\"><a href=\"#Prometheus的数据模型\" class=\"headerlink\" title=\"Prometheus的数据模型\"></a>Prometheus的数据模型</h3><p>Prometheus从根本上所有的存储都是按时间序列去实现的，相同的metrics(指标名称) 和label(一个或多个标签) 组成一条时间序列，不同的label表示不同的时间序列。为了支持一些查询，有时还会临时产生一些时间序列存储。</p>\n<p>metrics name&amp;label指标名称和标签</p>\n<p>每条时间序列是由唯一的”指标名称”和一组”标签（key=value）”的形式组成。</p>\n<p>指标名称：一般是给监测对像起一名字，例如http<em>requests_total这样，它有一些命名规则，可以包字母数字</em>之类的的。通常是以应用名称开头<em>监测对像</em>数值类型_单位这样。例如：push_total、userlogin_mysql_duration_seconds、app_memory_usage_bytes。</p>\n<p>标签：就是对一条时间序列不同维度的识别了，例如一个http请求用的是POST还是GET，它的endpoint是什么，这时候就要用标签去标记了。最终形成的标识便是这样了：http_requests_total{method=”POST”,endpoint=”/api/tracks”}。</p>\n<p>记住，针对http_requests_total这个metrics name无论是增加标签还是删除标签都会形成一条新的时间序列。</p>\n<p>查询语句就可以跟据上面标签的组合来查询聚合结果了。</p>\n<p>如果以传统数据库的理解来看这条语句，则可以考虑http_requests_total是表名，标签是字段，而timestamp是主键，还有一个float64字段是值了。（Prometheus里面所有值都是按float64存储）。</p>\n<h3 id=\"Prometheus四种数据类型\"><a href=\"#Prometheus四种数据类型\" class=\"headerlink\" title=\"Prometheus四种数据类型\"></a>Prometheus四种数据类型</h3><p>Counter</p>\n<p>Counter用于累计值，例如记录请求次数、任务完成数、错误发生次数。一直增加，不会减少。重启进程后，会被重置。</p>\n<p>例如：http_response_total{method=”GET”,endpoint=”/api/tracks”} 100，10秒后抓取http_response_total{method=”GET”,endpoint=”/api/tracks”} 100。</p>\n<p>Gauge</p>\n<p>Gauge常规数值，例如 温度变化、内存使用变化。可变大，可变小。重启进程后，会被重置。</p>\n<p>例如： memory_usage_bytes{host=”master-01″} 100 &lt; 抓取值、memory_usage_bytes{host=”master-01″} 30、memory_usage_bytes{host=”master-01″} 50、memory_usage_bytes{host=”master-01″} 80 &lt; 抓取值。</p>\n<p>Histogram</p>\n<p>Histogram（直方图）可以理解为柱状图的意思，常用于跟踪事件发生的规模，例如：请求耗时、响应大小。它特别之处是可以对记录的内容进行分组，提供count和sum全部值的功能。</p>\n<p>例如：{小于10=5次，小于20=1次，小于30=2次}，count=7次，sum=7次的求和值。</p>\n<p>Summary</p>\n<p>Summary和Histogram十分相似，常用于跟踪事件发生的规模，例如：请求耗时、响应大小。同样提供 count 和 sum 全部值的功能。</p>\n<p>例如：count=7次，sum=7次的值求值。</p>\n<p>它提供一个quantiles的功能，可以按%比划分跟踪的结果。例如：quantile取值0.95，表示取采样值里面的95%数据。</p>\n<h3 id=\"安装运行Prometheus-docker版\"><a href=\"#安装运行Prometheus-docker版\" class=\"headerlink\" title=\"安装运行Prometheus(docker版)\"></a>安装运行Prometheus(docker版)</h3><p>下面介绍如何使用Prometheus和Grafana对本机服务器性能进行监控。</p>\n<p>监控本机，只需要一个exporter</p>\n<p>node_exporter – 用于机器系统数据收集</p>\n<p>Grafana是一个开源的功能丰富的数据可视化平台，通常用于时序数据的可视化。它内置了以下数据源的支持：</p>\n<p>下面是我们安装时用到的架构图：</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108171729613-1031744778.png\" alt=\"img\"></p>\n<p><strong>注意：本文使用的是ubuntu-16.04.5-server-amd64，只需要一台服务器即可！</strong> </p>\n<h4 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install -y docker.io</span><br></pre></td></tr></table></figure>\n<p>注意：网上的文章说要安装docker-engine和docker-ce，那都是扯淡的。包压根都找不到！</p>\n<p>只需要安装docker.io就可以了！</p>\n<p>如果是Centos系统，使用 yum install -y docker-io 安装 </p>\n<h4 id=\"下载镜像包\"><a href=\"#下载镜像包\" class=\"headerlink\" title=\"下载镜像包\"></a>下载镜像包</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull prom&#x2F;node-exporter</span><br><span class=\"line\">docker pull prom&#x2F;prometheus</span><br><span class=\"line\">docker pull grafana&#x2F;grafana</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动node-exporter\"><a href=\"#启动node-exporter\" class=\"headerlink\" title=\"启动node-exporter\"></a>启动node-exporter</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 9100:9100 \\</span><br><span class=\"line\">  -v &quot;&#x2F;proc:&#x2F;host&#x2F;proc:ro&quot; \\</span><br><span class=\"line\">  -v &quot;&#x2F;sys:&#x2F;host&#x2F;sys:ro&quot; \\</span><br><span class=\"line\">  -v &quot;&#x2F;:&#x2F;rootfs:ro&quot; \\</span><br><span class=\"line\">  --net&#x3D;&quot;host&quot; \\</span><br><span class=\"line\">  prom&#x2F;node-exporter</span><br></pre></td></tr></table></figure>\n<p> 等待几秒钟，查看端口是否起来了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~# netstat -anpt</span><br><span class=\"line\">Active Internet connections (servers and established)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name</span><br><span class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1147&#x2F;sshd       </span><br><span class=\"line\">tcp        0     36 192.168.91.132:22       192.168.91.1:63648      ESTABLISHED 2969&#x2F;0          </span><br><span class=\"line\">tcp        0      0 192.168.91.132:22       192.168.91.1:63340      ESTABLISHED 1321&#x2F;1          </span><br><span class=\"line\">tcp6       0      0 :::9100                 :::*                    LISTEN      3070&#x2F;node_exporter</span><br></pre></td></tr></table></figure>\n<p>访问url：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.91.132:9100&#x2F;metrics</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108172459066-1268369984.png\" alt=\"img\"></p>\n<p>这些都是收集到数据，有了它就可以做数据展示了</p>\n<h4 id=\"启动prometheus\"><a href=\"#启动prometheus\" class=\"headerlink\" title=\"启动prometheus\"></a>启动prometheus</h4><p>新建目录prometheus，编辑配置文件prometheus.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir &#x2F;opt&#x2F;prometheus</span><br><span class=\"line\">cd &#x2F;opt&#x2F;prometheus&#x2F;</span><br><span class=\"line\">vim prometheus.yml</span><br></pre></td></tr></table></figure>\n<p>内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global:</span><br><span class=\"line\">  scrape_interval:     60s</span><br><span class=\"line\">  evaluation_interval: 60s</span><br><span class=\"line\"> </span><br><span class=\"line\">scrape_configs:</span><br><span class=\"line\">  - job_name: prometheus</span><br><span class=\"line\">    static_configs:</span><br><span class=\"line\">      - targets: [&#39;localhost:9090&#39;]</span><br><span class=\"line\">        labels:</span><br><span class=\"line\">          instance: prometheus</span><br><span class=\"line\"> </span><br><span class=\"line\">  - job_name: linux</span><br><span class=\"line\">    static_configs:</span><br><span class=\"line\">      - targets: [&#39;192.168.91.132:9100&#39;]</span><br><span class=\"line\">        labels:</span><br><span class=\"line\">          instance: localhost</span><br></pre></td></tr></table></figure>\n<p>注意：修改IP地址，这里的192.168.91.132就是本机地址</p>\n<p>启动prometheus</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run  -d \\</span><br><span class=\"line\">  -p 9090:9090 \\</span><br><span class=\"line\">  -v &#x2F;opt&#x2F;prometheus&#x2F;prometheus.yml:&#x2F;etc&#x2F;prometheus&#x2F;prometheus.yml  \\</span><br><span class=\"line\">  prom&#x2F;prometheus</span><br></pre></td></tr></table></figure>\n<p>等待几秒钟，查看端口状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:&#x2F;opt&#x2F;prometheus# netstat -anpt</span><br><span class=\"line\">Active Internet connections (servers and established)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name</span><br><span class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1147&#x2F;sshd       </span><br><span class=\"line\">tcp        0     36 192.168.91.132:22       192.168.91.1:63648      ESTABLISHED 2969&#x2F;0          </span><br><span class=\"line\">tcp        0      0 192.168.91.132:22       192.168.91.1:63340      ESTABLISHED 1321&#x2F;1          </span><br><span class=\"line\">tcp6       0      0 :::9100                 :::*                    LISTEN      3070&#x2F;node_exporter</span><br><span class=\"line\">tcp6       0      0 :::22                   :::*                    LISTEN      1147&#x2F;sshd       </span><br><span class=\"line\">tcp6       0      0 :::9090                 :::*                    LISTEN      3336&#x2F;docker-proxy</span><br></pre></td></tr></table></figure>\n<p>访问url：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.91.132:9090&#x2F;graph</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108173214667-1683170215.png\" alt=\"img\"></p>\n<p>访问targets，url如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.91.132:9090&#x2F;targets</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108173301486-803834624.png\" alt=\"img\"></p>\n<p>如果状态没有UP起来，等待一会，就会UP了</p>\n<h4 id=\"启动grafana\"><a href=\"#启动grafana\" class=\"headerlink\" title=\"启动grafana\"></a>启动grafana</h4><p>新建空文件夹grafana-storage，用来存储数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir &#x2F;opt&#x2F;grafana-storage</span><br></pre></td></tr></table></figure>\n<p>设置权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 777 -R &#x2F;opt&#x2F;grafana-storage</span><br></pre></td></tr></table></figure>\n<p>因为grafana用户会在这个目录写入文件，直接设置777，比较简单粗暴！</p>\n<p>启动grafana</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  -p 3000:3000 \\</span><br><span class=\"line\">  --name&#x3D;grafana \\</span><br><span class=\"line\">  -v &#x2F;opt&#x2F;grafana-storage:&#x2F;var&#x2F;lib&#x2F;grafana \\</span><br><span class=\"line\">  grafana&#x2F;grafana</span><br></pre></td></tr></table></figure>\n<p>等待几秒钟，查看端口状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:&#x2F;opt&#x2F;prometheus# netstat -anpt</span><br><span class=\"line\">Active Internet connections (servers and established)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name</span><br><span class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1147&#x2F;sshd       </span><br><span class=\"line\">tcp        0     36 192.168.91.132:22       192.168.91.1:63648      ESTABLISHED 2969&#x2F;0          </span><br><span class=\"line\">tcp        0      0 192.168.91.132:22       192.168.91.1:63340      ESTABLISHED 1321&#x2F;1          </span><br><span class=\"line\">tcp6       0      0 :::9100                 :::*                    LISTEN      3070&#x2F;node_exporter</span><br><span class=\"line\">tcp6       0      0 :::22                   :::*                    LISTEN      1147&#x2F;sshd       </span><br><span class=\"line\">tcp6       0      0 :::3000                 :::*                    LISTEN      3494&#x2F;docker-proxy</span><br><span class=\"line\">tcp6       0      0 :::9090                 :::*                    LISTEN      3336&#x2F;docker-proxy</span><br><span class=\"line\">tcp6       0      0 192.168.91.132:9100     172.17.0.2:55108        ESTABLISHED 3070&#x2F;node_exporter</span><br></pre></td></tr></table></figure>\n<p>访问url：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.91.132:3000&#x2F;</span><br></pre></td></tr></table></figure>\n<p>默认会先跳转到登录页面，默认的用户名和密码都是admin</p>\n<p> <img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175033563-1187448777.png\" alt=\"img\"></p>\n<p>登录之后，它会要求你重置密码。你还可以再输次admin密码！</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175115397-1630657428.png\" alt=\"img\"></p>\n<p>密码设置完成之后，就会跳转到首页</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175150766-1146838339.png\" alt=\"img\"></p>\n<p>点击Add data source，由于使用的是镜像方式，所以版本比较新。和网络上的文章展示的图片不一样！</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175335901-209843394.png\" alt=\"img\"></p>\n<p>name名字写Prometheus</p>\n<p>type 选择Prometheus，因为数据都从它那里获取</p>\n<p>url 输入Prometheus的ip+端口</p>\n<p>点击下面的Save &amp; Test，如果出现绿色的，说明ok了</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175543609-598692887.png\" alt=\"img\"></p>\n<p>回到首页，点击New dashboard</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175634654-924081366.png\" alt=\"img\"></p>\n<p>点击 Graph</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175652536-52423850.png\" alt=\"img\"></p>\n<p>效果如下：</p>\n<p> <img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175730765-2063837837.png\" alt=\"img\"></p>\n<p> 点击标题下方的编辑</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175913741-475587810.png\" alt=\"img\"></p>\n<p>效果如下：</p>\n<p> <img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108175957546-479306322.png\" alt=\"img\"></p>\n<p>输入cpu，底部会有提示</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108180101326-1366026901.png\" alt=\"img\"></p>\n<p>这里监控 node_load15，表示系统15分钟的负载。点击下面的Add Query</p>\n<p> <img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108180533718-812469530.png\" alt=\"img\"></p>\n<p>效果如下：</p>\n<p> <img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108180627880-1441743252.png\" alt=\"img\"></p>\n<p>添加总内存</p>\n<p> <img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108180746522-1027042926.png\" alt=\"img\"></p>\n<p>这里会多出一条线</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108180821288-1708778991.png\" alt=\"img\"></p>\n<p>点击右边的，可以删除掉 总内存</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181212402-1807243006.png\" alt=\"img\"></p>\n<p>点击General，修改标题为中文</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181243544-126607151.png\" alt=\"img\"></p>\n<p> 图表效果如下：</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181317852-1720800596.png\" alt=\"img\"></p>\n<p> 点击上面的保存按钮</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181403610-481592444.png\" alt=\"img\"></p>\n<p>输入名字</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181436660-1511454160.png\" alt=\"img\"></p>\n<p>效果如下：<br><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181459540-6764391.png\" alt=\"img\"></p>\n<p>点击首页，就会有展示</p>\n<p><img src=\"../../../../img/Centos-Docker-Prometheus+Grafana/1341090-20181108181552921-1347274147.png\" alt=\"img\"></p>","next":{"title":"docker下springCloud-alibaba组件安装配置使用","path":"api/articles/resource-RPC-Docker-Docker-springcloud-alibaba.json","image":"/img/header_img/docker/docker.jpg","num_read":664,"num_like":236,"num_collection":222,"num_comments":34},"prev":{"title":"MongoDB安装和可视化工具以及数据备份与恢复","path":"api/articles/resource-DB-MongoDB-MongoDB-copy.json","image":"/img/header_img/DB/mongodb.jpg","num_read":1524,"num_like":171,"num_collection":289,"num_comments":140},"categories":[{"name":"RPC远程调用","path":"api/categories/RPC远程调用.json","pathContent":"api/categories/RPC远程调用","description":"RPC（Remote Procedure Call）远程过程调用，简单的理解是一个节点请求另一个节点提供的服务","cover":"https://sunfy9.gitee.io/project/photo/project/rpc.jpg"}],"tags":[{"name":"Docker","path":"api/tags/Docker.json","pathContent":"api/tags/Docker","description":"一个开源的应用容器引擎。","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"}]}