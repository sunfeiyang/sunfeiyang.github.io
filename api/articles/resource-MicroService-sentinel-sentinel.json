{"title":"sentinel简介","num_read":1014,"num_like":727,"num_collection":786,"num_comments":285,"slug":"resource-MicroService-sentinel-sentinel","date":"2021-12-21T16:00:00.000Z","img":"/img/header_img/MicroService/sentinel.png","format":"gallery","_id":"clhrbp2e400dio5lg9saj1nya","project":"MicroService","type":"hot","subtitle":"分布式系统的流量防卫兵","hot":"collection","site":{"data":{}},"updated":"2022-09-20T01:59:47.346Z","author":"Sunfy","comments":true,"path":"api/articles/resource-MicroService-sentinel-sentinel.json","webPath":"2021/12/22/resource-MicroService-sentinel-sentinel/","permalink":"https://sunfy9.gitee.io/2021/12/22/resource-MicroService-sentinel-sentinel/","excerpt":null,"covers":["../../../../img/sentinel/50505538-2c484880-0aaf-11e9-9ffc-cbaaef20be2b.png","../../../../img/sentinel/1720fe3c659033f7ac4bdd5742aa1ceb.png","../../../../img/sentinel/69955207-1e5d3c00-1538-11ea-9ab2-297efff32809.png"],"keywords":"sunfy, hexo-theme-snail","content":"<h1 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>1、当服务访问量达到一定程度，流量扛不住的时候，该如何处理？</p>\n<p>2、服务之间相互依赖，当服务A出现响应时间过长，影响到服务B的响应，进而产生连锁反应，直至影响整个依赖链上的所有服务，该如何处理？</p>\n<p>这是分布式、微服务开发不可避免的问题。</p>\n<h1 id=\"服务雪崩\"><a href=\"#服务雪崩\" class=\"headerlink\" title=\"服务雪崩\"></a>服务雪崩</h1><p>服务雪崩效应：因服务提供者的不可用导致服务调用者的不可用,并将不可用逐渐放大的过程，就叫服务雪崩效应</p>\n<p>导致服务不可用的原因： 程序Bug，大流量请求，硬件故障，缓存击穿</p>\n<ul>\n<li>【大流量请求】：在秒杀和大促开始前,如果准备不充分,瞬间大量请求会造成服务提供者的不可用。</li>\n<li>【硬件故障】：可能为硬件损坏造成的服务器主机宕机, 网络硬件故障造成的服务提供者的不可访问。</li>\n<li>【缓存击穿】：一般发生在缓存应用重启, 缓存失效时高并发，所有缓存被清空时,以及短时间内大量缓存失效时。大量的缓存不命中, 使请求直击后端,造成服务提供者超负荷运行,引起服务不可用。</li>\n</ul>\n<p>在服务提供者不可用的时候，会出现大量重试的情况：用户重试、代码逻辑重试，这些重试最终导致：进一步加大请求流量。所以归根结底导致雪崩效应的最根本原因是：大量请求线程同步等待造成的资源耗尽。当服务调用者使用同步调用时, 会产生大量的等待线程占用系统资源。一旦线程资源被耗尽,服务调用者提供的服务也将处于不可用状态, 于是服务雪崩效应产生了。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a><strong>解决方案</strong><sunfy-line></h2><p><strong>1. 超时机制</strong></p>\n<p>在不做任何处理的情况下，服务提供者不可用会导致消费者请求线程强制等待，而造成系统资源耗尽。加入超时机制，一旦超时，就释放资源。由于释放资源速度较快，一定程度上可以抑制资源耗尽的问题。</p>\n<p><strong>2. 服务限流(资源隔离)</strong></p>\n<p>限制请求核心服务提供者的流量，使大流量拦截在核心服务之外，这样可以更好的保证核心服务提供者不出问题，对于一些出问题的服务可以限制流量访问，只分配固定线程资源访问，这样能使整体的资源不至于被出问题的服务耗尽，进而整个系统雪崩。那么服务之间怎么限流，怎么资源隔离？例如可以通过线程池+队列的方式，通过信号量的方式。</p>\n<p>如下图所示, 当商品评论服务不可用时, 即使商品服务独立分配的20个线程全部处于同步等待状态,也不会影响其他依赖服务的调用。</p>\n<p><strong>3. 服务熔断</strong></p>\n<p>远程服务不稳定或网络抖动时暂时关闭，就叫服务熔断。</p>\n<p>现实世界的断路器大家肯定都很了解，断路器实时监控电路的情况，如果发现电路电流异常，就会跳闸，从而防止电路被烧毁。</p>\n<p>软件世界的断路器可以这样理解：实时监测应用，如果发现在一定时间内失败次数/失败率达到一定阈值，就“跳闸”，断路器打开——此时，请求直接返回，而不去调用原本调用的逻辑。跳闸一段时间后（例如10秒），断路器会进入半开状态，这是一个瞬间态，此时允许一次请求调用原本的逻辑，如果成功，则断路器关闭，应用正常调用；如果调用依然不成功，断路器继续回到打开状态，过段时间再进入半开状态尝试——通过”跳闸“，应用可以保护自己，而且避免浪费资源；而通过半开的设计，可实现应用的“自我修复“。</p>\n<p>所以，同样的道理，当依赖的服务有大量超时时，在让新的请求去访问根本没有意义，只会无畏的消耗现有资源。比如我们设置了超时时间为1s,如果短时间内有大量请求在1s内都得不到响应，就意味着这个服务出现了异常，此时就没有必要再让其他的请求去访问这个依赖了，这个时候就应该使用断路器避免资源浪费。</p>\n<p><strong>4. 服务降级</strong></p>\n<p>有服务熔断，必然要有服务降级。</p>\n<p>所谓降级，就是当某个服务熔断之后，服务将不再被调用，此时客户端可以自己准备一个本地的fallback（回退）回调，返回一个缺省值。 例如：(备用接口/缓存/mock数据) 。这样做，虽然服务水平下降，但好歹可用，比直接挂掉要强，当然这也要看适合的业务场景。</p>\n<h1 id=\"Sentinel\"><a href=\"#Sentinel\" class=\"headerlink\" title=\"Sentinel\"></a><strong>Sentinel</strong></h1><p><strong>分布式系统的流量防卫兵</strong></p>\n<p>Sentinel 是面向分布式服务架构的流量控制组件，主要以流量为切入点，从限流、流量整形、熔断降级、系统负载保护、热点防护等多个维度来帮助开发者保障微服务的稳定性。</p>\n<p>Sentinel具有以下特征:</p>\n<ul>\n<li><strong>丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li>\n<li><strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li>\n<li><strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Apache Dubbo、gRPC、Quarkus 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。同时 Sentinel 提供 Java/Go/C++ 等多语言的原生实现。</li>\n<li><strong>完善的 SPI 扩展机制</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li>\n</ul>\n<p>主要特性：</p>\n<p><img src=\"../../../../img/sentinel/50505538-2c484880-0aaf-11e9-9ffc-cbaaef20be2b.png\" alt=\"Sentinel-features-overview\"></p>\n<p><img src=\"../../../../img/sentinel/1720fe3c659033f7ac4bdd5742aa1ceb.png\" alt=\"1720fe3c659033f7ac4bdd5742aa1ceb\"><strong>Sentinel和Hystrix对比</strong></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/alibaba/Sentinel/wiki/Sentinel-<span class=\"comment\">%E4%B8%8E-Hystrix-%E7%9A%84%E5%AF%B9%E6%AF%94</span></span><br></pre></td></tr></table></figure>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Sentinel</th>\n<th>Hystrix</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>隔离策略</td>\n<td>信号量隔离</td>\n<td>线程池隔离/信号量隔离</td>\n</tr>\n<tr>\n<td>熔断降级策略</td>\n<td>基于响应时间或失败比率</td>\n<td>基于失败比率</td>\n</tr>\n<tr>\n<td>实时指标实现</td>\n<td>滑动窗口</td>\n<td>滑动窗口（基于 RxJava）</td>\n</tr>\n<tr>\n<td>规则配置</td>\n<td>支持多种数据源</td>\n<td>支持多种数据源</td>\n</tr>\n<tr>\n<td>扩展性</td>\n<td>多个扩展点</td>\n<td>插件的形式</td>\n</tr>\n<tr>\n<td>基于注解的支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>限流</td>\n<td>基于 QPS，支持基于调用关系的限流</td>\n<td>有限的支持</td>\n</tr>\n<tr>\n<td>流量整形</td>\n<td>支持慢启动、匀速器模式</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>系统负载保护</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>控制台</td>\n<td>开箱即用，可配置规则、查看秒级监控、机器发现等</td>\n<td>不完善</td>\n</tr>\n<tr>\n<td>常见框架的适配</td>\n<td>Servlet、Spring Cloud、Dubbo、gRPC 等</td>\n<td>Servlet、Spring Cloud Netflix</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"Sentinel-工作原理\"><a href=\"#Sentinel-工作原理\" class=\"headerlink\" title=\"Sentinel 工作原理\"></a><strong>Sentinel 工作原理</strong></h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a><strong>基本概念</strong></h3><p><strong>资源</strong></p>\n<p>资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。</p>\n<p><strong>只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</strong></p>\n<p><strong>规则</strong></p>\n<p>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p>\n<p><strong>Sentinel工作主流程</strong></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/alibaba/Sentinel/wiki/Sentinel<span class=\"comment\">%E5%B7%A5%E4%BD%9C%E4%B8%BB%E6%B5%81%E7%A8%8B - 工作主流程</span></span><br></pre></td></tr></table></figure>\n<p>在 Sentinel 里面，所有的资源都对应一个资源名称（resourceName），每次资源调用都会创建一个 Entry 对象。Entry 可以通过对主流框架的适配自动创建，也可以通过注解的方式或调用 SphU API 显式创建。Entry 创建的时候，同时也会创建一系列功能插槽（slot chain），这些插槽有不同的职责，例如:</p>\n<ul>\n<li>NodeSelectorSlot 负责收集资源的路径，并将这些资源的调用路径，以树状结构存储起来，用于根据调用路径来限流降级；</li>\n<li>ClusterBuilderSlot 则用于存储资源的统计信息以及调用者信息，例如该资源的 RT, QPS, thread count 等等，这些信息将用作为多维度限流，降级的依据；</li>\n<li>StatisticSlot 则用于记录、统计不同纬度的 runtime 指标监控信息；</li>\n<li>FlowSlot 则用于根据预设的限流规则以及前面 slot 统计的状态，来进行流量控制；</li>\n<li>AuthoritySlot 则根据配置的黑白名单和调用来源信息，来做黑白名单控制；</li>\n<li>DegradeSlot 则通过统计信息以及预设的规则，来做熔断降级；</li>\n<li>SystemSlot 则通过系统的状态，例如 load1 等，来控制总的入口流量；</li>\n</ul>\n<p><img src=\"../../../../img/sentinel/69955207-1e5d3c00-1538-11ea-9ab2-297efff32809.png\" alt=\"image\"><img src=\"../../../../img/sentinel/slots.gif\" alt=\"img\"></p>\n","more":"<h1 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>1、当服务访问量达到一定程度，流量扛不住的时候，该如何处理？</p>\n<p>2、服务之间相互依赖，当服务A出现响应时间过长，影响到服务B的响应，进而产生连锁反应，直至影响整个依赖链上的所有服务，该如何处理？</p>\n<p>这是分布式、微服务开发不可避免的问题。</p>\n<h1 id=\"服务雪崩\"><a href=\"#服务雪崩\" class=\"headerlink\" title=\"服务雪崩\"></a>服务雪崩</h1><p>服务雪崩效应：因服务提供者的不可用导致服务调用者的不可用,并将不可用逐渐放大的过程，就叫服务雪崩效应</p>\n<p>导致服务不可用的原因： 程序Bug，大流量请求，硬件故障，缓存击穿</p>\n<ul>\n<li>【大流量请求】：在秒杀和大促开始前,如果准备不充分,瞬间大量请求会造成服务提供者的不可用。</li>\n<li>【硬件故障】：可能为硬件损坏造成的服务器主机宕机, 网络硬件故障造成的服务提供者的不可访问。</li>\n<li>【缓存击穿】：一般发生在缓存应用重启, 缓存失效时高并发，所有缓存被清空时,以及短时间内大量缓存失效时。大量的缓存不命中, 使请求直击后端,造成服务提供者超负荷运行,引起服务不可用。</li>\n</ul>\n<p>在服务提供者不可用的时候，会出现大量重试的情况：用户重试、代码逻辑重试，这些重试最终导致：进一步加大请求流量。所以归根结底导致雪崩效应的最根本原因是：大量请求线程同步等待造成的资源耗尽。当服务调用者使用同步调用时, 会产生大量的等待线程占用系统资源。一旦线程资源被耗尽,服务调用者提供的服务也将处于不可用状态, 于是服务雪崩效应产生了。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a><strong>解决方案</strong><sunfy-line></h2><p><strong>1. 超时机制</strong></p>\n<p>在不做任何处理的情况下，服务提供者不可用会导致消费者请求线程强制等待，而造成系统资源耗尽。加入超时机制，一旦超时，就释放资源。由于释放资源速度较快，一定程度上可以抑制资源耗尽的问题。</p>\n<p><strong>2. 服务限流(资源隔离)</strong></p>\n<p>限制请求核心服务提供者的流量，使大流量拦截在核心服务之外，这样可以更好的保证核心服务提供者不出问题，对于一些出问题的服务可以限制流量访问，只分配固定线程资源访问，这样能使整体的资源不至于被出问题的服务耗尽，进而整个系统雪崩。那么服务之间怎么限流，怎么资源隔离？例如可以通过线程池+队列的方式，通过信号量的方式。</p>\n<p>如下图所示, 当商品评论服务不可用时, 即使商品服务独立分配的20个线程全部处于同步等待状态,也不会影响其他依赖服务的调用。</p>\n<p><strong>3. 服务熔断</strong></p>\n<p>远程服务不稳定或网络抖动时暂时关闭，就叫服务熔断。</p>\n<p>现实世界的断路器大家肯定都很了解，断路器实时监控电路的情况，如果发现电路电流异常，就会跳闸，从而防止电路被烧毁。</p>\n<p>软件世界的断路器可以这样理解：实时监测应用，如果发现在一定时间内失败次数/失败率达到一定阈值，就“跳闸”，断路器打开——此时，请求直接返回，而不去调用原本调用的逻辑。跳闸一段时间后（例如10秒），断路器会进入半开状态，这是一个瞬间态，此时允许一次请求调用原本的逻辑，如果成功，则断路器关闭，应用正常调用；如果调用依然不成功，断路器继续回到打开状态，过段时间再进入半开状态尝试——通过”跳闸“，应用可以保护自己，而且避免浪费资源；而通过半开的设计，可实现应用的“自我修复“。</p>\n<p>所以，同样的道理，当依赖的服务有大量超时时，在让新的请求去访问根本没有意义，只会无畏的消耗现有资源。比如我们设置了超时时间为1s,如果短时间内有大量请求在1s内都得不到响应，就意味着这个服务出现了异常，此时就没有必要再让其他的请求去访问这个依赖了，这个时候就应该使用断路器避免资源浪费。</p>\n<p><strong>4. 服务降级</strong></p>\n<p>有服务熔断，必然要有服务降级。</p>\n<p>所谓降级，就是当某个服务熔断之后，服务将不再被调用，此时客户端可以自己准备一个本地的fallback（回退）回调，返回一个缺省值。 例如：(备用接口/缓存/mock数据) 。这样做，虽然服务水平下降，但好歹可用，比直接挂掉要强，当然这也要看适合的业务场景。</p>\n<h1 id=\"Sentinel\"><a href=\"#Sentinel\" class=\"headerlink\" title=\"Sentinel\"></a><strong>Sentinel</strong></h1><p><strong>分布式系统的流量防卫兵</strong></p>\n<p>Sentinel 是面向分布式服务架构的流量控制组件，主要以流量为切入点，从限流、流量整形、熔断降级、系统负载保护、热点防护等多个维度来帮助开发者保障微服务的稳定性。</p>\n<p>Sentinel具有以下特征:</p>\n<ul>\n<li><strong>丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li>\n<li><strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li>\n<li><strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Apache Dubbo、gRPC、Quarkus 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。同时 Sentinel 提供 Java/Go/C++ 等多语言的原生实现。</li>\n<li><strong>完善的 SPI 扩展机制</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li>\n</ul>\n<p>主要特性：</p>\n<p><img src=\"../../../../img/sentinel/50505538-2c484880-0aaf-11e9-9ffc-cbaaef20be2b.png\" alt=\"Sentinel-features-overview\"></p>\n<p><img src=\"../../../../img/sentinel/1720fe3c659033f7ac4bdd5742aa1ceb.png\" alt=\"1720fe3c659033f7ac4bdd5742aa1ceb\"><strong>Sentinel和Hystrix对比</strong></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/alibaba/Sentinel/wiki/Sentinel-<span class=\"comment\">%E4%B8%8E-Hystrix-%E7%9A%84%E5%AF%B9%E6%AF%94</span></span><br></pre></td></tr></table></figure>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Sentinel</th>\n<th>Hystrix</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>隔离策略</td>\n<td>信号量隔离</td>\n<td>线程池隔离/信号量隔离</td>\n</tr>\n<tr>\n<td>熔断降级策略</td>\n<td>基于响应时间或失败比率</td>\n<td>基于失败比率</td>\n</tr>\n<tr>\n<td>实时指标实现</td>\n<td>滑动窗口</td>\n<td>滑动窗口（基于 RxJava）</td>\n</tr>\n<tr>\n<td>规则配置</td>\n<td>支持多种数据源</td>\n<td>支持多种数据源</td>\n</tr>\n<tr>\n<td>扩展性</td>\n<td>多个扩展点</td>\n<td>插件的形式</td>\n</tr>\n<tr>\n<td>基于注解的支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>限流</td>\n<td>基于 QPS，支持基于调用关系的限流</td>\n<td>有限的支持</td>\n</tr>\n<tr>\n<td>流量整形</td>\n<td>支持慢启动、匀速器模式</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>系统负载保护</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>控制台</td>\n<td>开箱即用，可配置规则、查看秒级监控、机器发现等</td>\n<td>不完善</td>\n</tr>\n<tr>\n<td>常见框架的适配</td>\n<td>Servlet、Spring Cloud、Dubbo、gRPC 等</td>\n<td>Servlet、Spring Cloud Netflix</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"Sentinel-工作原理\"><a href=\"#Sentinel-工作原理\" class=\"headerlink\" title=\"Sentinel 工作原理\"></a><strong>Sentinel 工作原理</strong></h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a><strong>基本概念</strong></h3><p><strong>资源</strong></p>\n<p>资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。</p>\n<p><strong>只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</strong></p>\n<p><strong>规则</strong></p>\n<p>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p>\n<p><strong>Sentinel工作主流程</strong></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/alibaba/Sentinel/wiki/Sentinel<span class=\"comment\">%E5%B7%A5%E4%BD%9C%E4%B8%BB%E6%B5%81%E7%A8%8B - 工作主流程</span></span><br></pre></td></tr></table></figure>\n<p>在 Sentinel 里面，所有的资源都对应一个资源名称（resourceName），每次资源调用都会创建一个 Entry 对象。Entry 可以通过对主流框架的适配自动创建，也可以通过注解的方式或调用 SphU API 显式创建。Entry 创建的时候，同时也会创建一系列功能插槽（slot chain），这些插槽有不同的职责，例如:</p>\n<ul>\n<li>NodeSelectorSlot 负责收集资源的路径，并将这些资源的调用路径，以树状结构存储起来，用于根据调用路径来限流降级；</li>\n<li>ClusterBuilderSlot 则用于存储资源的统计信息以及调用者信息，例如该资源的 RT, QPS, thread count 等等，这些信息将用作为多维度限流，降级的依据；</li>\n<li>StatisticSlot 则用于记录、统计不同纬度的 runtime 指标监控信息；</li>\n<li>FlowSlot 则用于根据预设的限流规则以及前面 slot 统计的状态，来进行流量控制；</li>\n<li>AuthoritySlot 则根据配置的黑白名单和调用来源信息，来做黑白名单控制；</li>\n<li>DegradeSlot 则通过统计信息以及预设的规则，来做熔断降级；</li>\n<li>SystemSlot 则通过系统的状态，例如 load1 等，来控制总的入口流量；</li>\n</ul>\n<p><img src=\"../../../../img/sentinel/69955207-1e5d3c00-1538-11ea-9ab2-297efff32809.png\" alt=\"image\"><img src=\"../../../../img/sentinel/slots.gif\" alt=\"img\"></p>\n","next":{"title":"如何选择适合的阻塞队列","path":"api/articles/resource-java-concurrent-BlockingQueueSelect.json","image":"/img/header_img/concurrent/SelectBlockingQueue.png","num_read":1366,"num_like":75,"num_collection":829,"num_comments":165},"prev":{"title":"Redis常见的面试题","path":"api/articles/resource-java-redis-redisInterview.json","image":"/img/header_img/java/redisInterview.png","num_read":1287,"num_like":551,"num_collection":713,"num_comments":182},"categories":[{"name":"微服务","path":"api/categories/微服务.json","pathContent":"api/categories/微服务","description":"一种云原生框架方法，其中单个应用程序由许多松散耦合且可独立部署的较小组件或服务组成","cover":"https://sunfy9.gitee.io/project/photo/project/MicroService.PNG"}],"tags":[{"name":"seata","path":"api/tags/seata.json","pathContent":"api/tags/seata","description":"[seata]暂未设置说明","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"}]}