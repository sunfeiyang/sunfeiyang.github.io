{"title":"Java面试题003-说一下HashMap的put方法","num_read":1842,"num_like":51,"num_collection":503,"num_comments":147,"slug":"resource-java-Base-003HashMap-put","date":"2021-07-14T16:00:00.000Z","img":"/img/header_img/3.jpg","_id":"clhrbp2du00avo5lg42fthiz0","subtitle":"put方法大致流程--》put方法时下标位置元素为空（1.7、1.8）--》不为空","site":{"data":{}},"updated":"2022-09-19T15:01:03.601Z","author":"Sunfy","comments":true,"path":"api/articles/resource-java-Base-003HashMap-put.json","webPath":"2021/07/15/resource-java-Base-003HashMap-put/","permalink":"https://sunfy9.gitee.io/2021/07/15/resource-java-Base-003HashMap-put/","excerpt":null,"covers":["../../../../img/003HashMap-put/1024555-20161113235348670-746615111.png","../../../../img/003HashMap-put/20347625-8a203bab21e20da8.png","../../../../img/003HashMap-put/image-20210714105926432.png","../../../../img/003HashMap-put/image-20210714103620320.png","../../../../img/003HashMap-put/image-20210714103758529.png","../../../../img/003HashMap-put/image-20210714104500071.png","../../../../img/003HashMap-put/image-20210714104734333.png"],"keywords":"sunfy, hexo-theme-snail","content":"<p><strong>思路</strong></p>\n<p>1.7与1.8方法的比较</p>\n<p>put方法大致流程—》put方法时下标位置元素为空（1.7、1.8）—》不为空</p>\n<hr>\n<p><strong>1.7 HashMap采用的是数据+链表</strong></p>\n<p><img src=\"../../../../img/003HashMap-put/1024555-20161113235348670-746615111.png\" alt=\"img\"></p>\n<p><strong>1.8 HashMap采用的是数组+链表+红黑树</strong><sunfy-line></p>\n<p><img src=\"../../../../img/003HashMap-put/20347625-8a203bab21e20da8.png\" alt=\"img\"></p>\n<h2 id=\"大致流程\"><a href=\"#大致流程\" class=\"headerlink\" title=\"大致流程\"></a>大致流程</h2><p>根据key通过哈希算法与运算得出数据下标。</p>\n<h3 id=\"下标位置元素为空\"><a href=\"#下标位置元素为空\" class=\"headerlink\" title=\"下标位置元素为空\"></a>下标位置元素为空</h3><p>将key和value封装成Entry对象（1.7中是Entry对象，1.8中采用Node对象），并放入该位置</p>\n<h3 id=\"下标位置不为空\"><a href=\"#下标位置不为空\" class=\"headerlink\" title=\"下标位置不为空\"></a>下标位置不为空</h3><h4 id=\"1-7\"><a href=\"#1-7\" class=\"headerlink\" title=\"1.7\"></a>1.7</h4><p>先判断是否需要扩容，如果需要则先进行扩容，如果不用就生成Entry对象，并使用头插法添加到当前位置的链表中。<sunfy-line></p>\n<p><img src=\"../../../../img/003HashMap-put/image-20210714105926432.png\" alt=\"image-20210714105926432\"><img src=\"../../../../img/003HashMap-put/image-20210714110106993.png\" alt=\"image-20210714110106993\"><img src=\"../../../../img/003HashMap-put/image-20210714110259662.png\" alt=\"image-20210714110259662\"></p>\n<h4 id=\"1-8\"><a href=\"#1-8\" class=\"headerlink\" title=\"1.8\"></a>1.8</h4><p>先判断当前位置上的Node类型，看是红黑树Node还是链表Node</p>\n<ol>\n<li><p>如果是红黑树Node，则将key和value封装成一个红黑树节点添加到红黑树中，在这个过程中判断红黑树中是否存在当前key，如果存在则更新value<img src=\"../../../../img/003HashMap-put/image-20210714103620320.png\" alt=\"image-20210714103620320\"></p>\n<p><img src=\"../../../../img/003HashMap-put/image-20210714103758529.png\" alt=\"image-20210714103758529\"><img src=\"../../../../img/003HashMap-put/image-20210714103918638.png\" alt=\"image-20210714103918638\"></p>\n</li>\n<li><p>如果此位置上的Node对象是链表节点，则将key和value封装成一个链表Node并通过尾插法插入到链表的最后位置，因为是尾插法，所以需要遍历链表，在遍历链表的过程中判断是否存在当前key，如果存在则更新value，当遍历完链表之后，将新链表Node插入后链表中，插入链表后，会看当前链表的个数，如果大于等于8，那么就会将链表转换成红黑树</p>\n<p><img src=\"../../../../img/003HashMap-put/image-20210714104500071.png\" alt=\"image-20210714104500071\"><img src=\"../../../../img/003HashMap-put/image-20210714104536816.png\" alt=\"image-20210714104536816\"></p>\n</li>\n<li><p>将key和value封装位Node插入到链表或红黑树中后，再判断是否需要进行扩容，如果需要就扩容，如果不需要就结束put方法</p>\n<p><img src=\"../../../../img/003HashMap-put/image-20210714104734333.png\" alt=\"image-20210714104734333\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;  <span class=\"comment\">//数据扩容方法</span></span><br><span class=\"line\">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldThr = threshold;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">                threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">                newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></span><br><span class=\"line\">            newCap = oldThr;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults</span></span><br><span class=\"line\">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">            newThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">float</span> ft = (<span class=\"keyword\">float</span>)newCap * loadFactor;</span><br><span class=\"line\">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                      (<span class=\"keyword\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        threshold = newThr;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"rawtypes\"</span>,<span class=\"string\">\"unchecked\"</span>&#125;)</span><br><span class=\"line\">            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</span><br><span class=\"line\">        table = newTab;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldTab != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">                Node&lt;K,V&gt; e;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    oldTab[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (e.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                        newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                        ((TreeNode&lt;K,V&gt;)e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// preserve order</span></span><br><span class=\"line\">                        Node&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        Node&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        Node&lt;K,V&gt; next;</span><br><span class=\"line\">                        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                            next = e.next;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                    loHead = e;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span></span><br><span class=\"line\">                                    loTail.next = e;</span><br><span class=\"line\">                                loTail = e;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                    hiHead = e;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span></span><br><span class=\"line\">                                    hiTail.next = e;</span><br><span class=\"line\">                                hiTail = e;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            loTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                            newTab[j] = loHead;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            hiTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                            newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","more":"<p><strong>思路</strong></p>\n<p>1.7与1.8方法的比较</p>\n<p>put方法大致流程—》put方法时下标位置元素为空（1.7、1.8）—》不为空</p>\n<hr>\n<p><strong>1.7 HashMap采用的是数据+链表</strong></p>\n<p><img src=\"../../../../img/003HashMap-put/1024555-20161113235348670-746615111.png\" alt=\"img\"></p>\n<p><strong>1.8 HashMap采用的是数组+链表+红黑树</strong><sunfy-line></p>\n<p><img src=\"../../../../img/003HashMap-put/20347625-8a203bab21e20da8.png\" alt=\"img\"></p>\n<h2 id=\"大致流程\"><a href=\"#大致流程\" class=\"headerlink\" title=\"大致流程\"></a>大致流程</h2><p>根据key通过哈希算法与运算得出数据下标。</p>\n<h3 id=\"下标位置元素为空\"><a href=\"#下标位置元素为空\" class=\"headerlink\" title=\"下标位置元素为空\"></a>下标位置元素为空</h3><p>将key和value封装成Entry对象（1.7中是Entry对象，1.8中采用Node对象），并放入该位置</p>\n<h3 id=\"下标位置不为空\"><a href=\"#下标位置不为空\" class=\"headerlink\" title=\"下标位置不为空\"></a>下标位置不为空</h3><h4 id=\"1-7\"><a href=\"#1-7\" class=\"headerlink\" title=\"1.7\"></a>1.7</h4><p>先判断是否需要扩容，如果需要则先进行扩容，如果不用就生成Entry对象，并使用头插法添加到当前位置的链表中。<sunfy-line></p>\n<p><img src=\"../../../../img/003HashMap-put/image-20210714105926432.png\" alt=\"image-20210714105926432\"><img src=\"../../../../img/003HashMap-put/image-20210714110106993.png\" alt=\"image-20210714110106993\"><img src=\"../../../../img/003HashMap-put/image-20210714110259662.png\" alt=\"image-20210714110259662\"></p>\n<h4 id=\"1-8\"><a href=\"#1-8\" class=\"headerlink\" title=\"1.8\"></a>1.8</h4><p>先判断当前位置上的Node类型，看是红黑树Node还是链表Node</p>\n<ol>\n<li><p>如果是红黑树Node，则将key和value封装成一个红黑树节点添加到红黑树中，在这个过程中判断红黑树中是否存在当前key，如果存在则更新value<img src=\"../../../../img/003HashMap-put/image-20210714103620320.png\" alt=\"image-20210714103620320\"></p>\n<p><img src=\"../../../../img/003HashMap-put/image-20210714103758529.png\" alt=\"image-20210714103758529\"><img src=\"../../../../img/003HashMap-put/image-20210714103918638.png\" alt=\"image-20210714103918638\"></p>\n</li>\n<li><p>如果此位置上的Node对象是链表节点，则将key和value封装成一个链表Node并通过尾插法插入到链表的最后位置，因为是尾插法，所以需要遍历链表，在遍历链表的过程中判断是否存在当前key，如果存在则更新value，当遍历完链表之后，将新链表Node插入后链表中，插入链表后，会看当前链表的个数，如果大于等于8，那么就会将链表转换成红黑树</p>\n<p><img src=\"../../../../img/003HashMap-put/image-20210714104500071.png\" alt=\"image-20210714104500071\"><img src=\"../../../../img/003HashMap-put/image-20210714104536816.png\" alt=\"image-20210714104536816\"></p>\n</li>\n<li><p>将key和value封装位Node插入到链表或红黑树中后，再判断是否需要进行扩容，如果需要就扩容，如果不需要就结束put方法</p>\n<p><img src=\"../../../../img/003HashMap-put/image-20210714104734333.png\" alt=\"image-20210714104734333\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;  <span class=\"comment\">//数据扩容方法</span></span><br><span class=\"line\">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldThr = threshold;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">                threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">                newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></span><br><span class=\"line\">            newCap = oldThr;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults</span></span><br><span class=\"line\">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">            newThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">float</span> ft = (<span class=\"keyword\">float</span>)newCap * loadFactor;</span><br><span class=\"line\">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"keyword\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                      (<span class=\"keyword\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        threshold = newThr;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"rawtypes\"</span>,<span class=\"string\">\"unchecked\"</span>&#125;)</span><br><span class=\"line\">            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</span><br><span class=\"line\">        table = newTab;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldTab != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">                Node&lt;K,V&gt; e;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    oldTab[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (e.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                        newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                        ((TreeNode&lt;K,V&gt;)e).split(<span class=\"keyword\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// preserve order</span></span><br><span class=\"line\">                        Node&lt;K,V&gt; loHead = <span class=\"keyword\">null</span>, loTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        Node&lt;K,V&gt; hiHead = <span class=\"keyword\">null</span>, hiTail = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        Node&lt;K,V&gt; next;</span><br><span class=\"line\">                        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                            next = e.next;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (loTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                    loHead = e;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span></span><br><span class=\"line\">                                    loTail.next = e;</span><br><span class=\"line\">                                loTail = e;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (hiTail == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                                    hiHead = e;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span></span><br><span class=\"line\">                                    hiTail.next = e;</span><br><span class=\"line\">                                hiTail = e;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (loTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            loTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                            newTab[j] = loHead;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (hiTail != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            hiTail.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                            newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","next":{"title":"算法常用的解题思路---快速排序及优化","path":"api/articles/resource-java-algorithm-802-qualkSort.json","image":"/img/header_img/10.jpg","num_read":1778,"num_like":642,"num_collection":572,"num_comments":42},"prev":{"title":"Java面试题004-JVM中的共享区，哪些可以作为GC ROOT？","path":"api/articles/resource-java-Base-004JVM-gc.json","image":"/img/header_img/4.jpg","num_read":113,"num_like":92,"num_collection":256,"num_comments":168},"categories":[{"name":"Java","path":"api/categories/Java.json","pathContent":"api/categories/Java","description":"知识点、常用功能","cover":"https://sunfy9.gitee.io/project/photo/project/java.png"}],"tags":[{"name":"Interview","path":"api/tags/Interview.json","pathContent":"api/tags/Interview","description":"面试题相关内容","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"}]}