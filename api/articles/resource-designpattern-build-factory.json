{"title":"java设计模式之工厂模式","num_read":214,"num_like":472,"num_collection":138,"num_comments":36,"slug":"resource-designpattern-build-factory","date":"2020-09-09T16:00:00.000Z","img":"/img/header_img/Design/Factory.PNG","format":"max","_id":"clhrbp2b80051o5lg9nhl3i8h","project":"designPattern","site":{"data":{}},"updated":"2022-09-20T01:33:54.728Z","author":"Sunfy","comments":true,"path":"api/articles/resource-designpattern-build-factory.json","webPath":"2020/09/10/resource-designpattern-build-factory/","permalink":"https://sunfy9.gitee.io/2020/09/10/resource-designpattern-build-factory/","excerpt":null,"covers":["../../../../img/factory/AB6B814A-0B09-4863-93D6-1E22D6B07FF8.jpg"],"keywords":"sunfy, hexo-theme-snail","content":"<p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><strong>意图：</strong>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p>\n<p><strong>主要解决：</strong>主要解决接口选择的问题。</p>\n<p><strong>何时使用：</strong>我们明确地计划不同条件下创建不同实例时。</p>\n<p><strong>如何解决：</strong>让其子类实现工厂接口，返回的也是一个抽象的产品。</p>\n<p><strong>关键代码：</strong>创建过程在其子类执行。</p>\n<p><strong>应用实例：</strong> 1、您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。 2、Hibernate 换数据库只需换方言和驱动就可以。</p>\n<p><strong>优点：</strong> 1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。</p>\n<p><strong>缺点：</strong>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p>\n<p><strong>使用场景：</strong> 1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。 2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。 3、设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。</p>\n<p><strong>注意事项：</strong>作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p>\n<ul>\n<li>工厂方法模式一种创建对象的模式，它被广泛应用在jdk中以及Spring和Struts框架中；</li>\n<li>工厂方法模式基于”输入”，应用在超类和多个子类之间的情况，这种模式将创建对象的责任转移到工厂类；</li>\n<li>首先让我们学习一下如何在Java中应用工厂方法模式并且学习到工厂方法的优点，另外工厂方法模式也广泛应用在jdk中；</li>\n<li>超类可以是接口、抽象类、父类，本例中将通过重写 toString() 方法来解释工厂方法模式；</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现<sunfy-line></h2><p>我们将创建一个 <em>Shape</em> 接口和实现 <em>Shape</em> 接口的实体类。下一步是定义工厂类 <em>ShapeFactory</em>。</p>\n<p><em>FactoryPatternDemo</em> 类使用 <em>ShapeFactory</em> 来获取 <em>Shape</em> 对象。它将向 <em>ShapeFactory</em> 传递信息（<em>CIRCLE / RECTANGLE / SQUARE</em>），以便获取它所需对象的类型。</p>\n<p><img src=\"../../../../img/factory/AB6B814A-0B09-4863-93D6-1E22D6B07FF8.jpg\" alt=\"工厂模式的 UML 图\"></p>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤 1\"></a>步骤 1</h3><p>创建一个接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-2\"><a href=\"#步骤-2\" class=\"headerlink\" title=\"步骤 2\"></a>步骤 2</h3><p>创建实现接口的实体类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Inside Rectangle::draw() method.\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Inside Square::draw() method.\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Inside Circle::draw() method.\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-3\"><a href=\"#步骤-3\" class=\"headerlink\" title=\"步骤 3\"></a>步骤 3</h3><p>创建一个工厂，生成基于给定信息的实体类的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShapeFactory</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"comment\">//使用 getShape 方法获取形状类型的对象</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Shape <span class=\"title\">getShape</span><span class=\"params\">(String shapeType)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(shapeType == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      &#125;        </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(shapeType.equalsIgnoreCase(<span class=\"string\">\"CIRCLE\"</span>))&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Circle();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(shapeType.equalsIgnoreCase(<span class=\"string\">\"RECTANGLE\"</span>))&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Rectangle();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(shapeType.equalsIgnoreCase(<span class=\"string\">\"SQUARE\"</span>))&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Square();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-4\"><a href=\"#步骤-4\" class=\"headerlink\" title=\"步骤 4\"></a>步骤 4</h3><p>使用该工厂，通过传递类型信息来获取实体类的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryPatternDemo</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      ShapeFactory shapeFactory = <span class=\"keyword\">new</span> ShapeFactory();</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">//获取 Circle 的对象，并调用它的 draw 方法</span></span><br><span class=\"line\">      Shape shape1 = shapeFactory.getShape(<span class=\"string\">\"CIRCLE\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">//调用 Circle 的 draw 方法</span></span><br><span class=\"line\">      shape1.draw();</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">//获取 Rectangle 的对象，并调用它的 draw 方法</span></span><br><span class=\"line\">      Shape shape2 = shapeFactory.getShape(<span class=\"string\">\"RECTANGLE\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">//调用 Rectangle 的 draw 方法</span></span><br><span class=\"line\">      shape2.draw();</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">//获取 Square 的对象，并调用它的 draw 方法</span></span><br><span class=\"line\">      Shape shape3 = shapeFactory.getShape(<span class=\"string\">\"SQUARE\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">//调用 Square 的 draw 方法</span></span><br><span class=\"line\">      shape3.draw();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-5\"><a href=\"#步骤-5\" class=\"headerlink\" title=\"步骤 5\"></a>步骤 5</h3><p>执行程序，输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Inside Circle::draw() method.</span><br><span class=\"line\">Inside Rectangle::draw() method.</span><br><span class=\"line\">Inside Square::draw() method.</span><br></pre></td></tr></table></figure>\n<h2 id=\"工厂设计模式的优点\"><a href=\"#工厂设计模式的优点\" class=\"headerlink\" title=\"工厂设计模式的优点\"></a>工厂设计模式的优点</h2><ul>\n<li>面向接口编程，体现了面向对象的思想；</li>\n<li>将创建对象的工作转移到了工厂类；</li>\n</ul>\n<h2 id=\"JDK-中的工厂设计模式实例\"><a href=\"#JDK-中的工厂设计模式实例\" class=\"headerlink\" title=\"JDK 中的工厂设计模式实例\"></a>JDK 中的工厂设计模式实例</h2><ul>\n<li>java.util.Calendar, ResourceBundle and NumberFormat getInstance() 使用了工厂方法模式；</li>\n<li>valueOf() 在包装类中，如Boolean, Integer 也使用了工厂方法模式；</li>\n</ul>\n","more":"<p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><strong>意图：</strong>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p>\n<p><strong>主要解决：</strong>主要解决接口选择的问题。</p>\n<p><strong>何时使用：</strong>我们明确地计划不同条件下创建不同实例时。</p>\n<p><strong>如何解决：</strong>让其子类实现工厂接口，返回的也是一个抽象的产品。</p>\n<p><strong>关键代码：</strong>创建过程在其子类执行。</p>\n<p><strong>应用实例：</strong> 1、您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。 2、Hibernate 换数据库只需换方言和驱动就可以。</p>\n<p><strong>优点：</strong> 1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。</p>\n<p><strong>缺点：</strong>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p>\n<p><strong>使用场景：</strong> 1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。 2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。 3、设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。</p>\n<p><strong>注意事项：</strong>作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p>\n<ul>\n<li>工厂方法模式一种创建对象的模式，它被广泛应用在jdk中以及Spring和Struts框架中；</li>\n<li>工厂方法模式基于”输入”，应用在超类和多个子类之间的情况，这种模式将创建对象的责任转移到工厂类；</li>\n<li>首先让我们学习一下如何在Java中应用工厂方法模式并且学习到工厂方法的优点，另外工厂方法模式也广泛应用在jdk中；</li>\n<li>超类可以是接口、抽象类、父类，本例中将通过重写 toString() 方法来解释工厂方法模式；</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现<sunfy-line></h2><p>我们将创建一个 <em>Shape</em> 接口和实现 <em>Shape</em> 接口的实体类。下一步是定义工厂类 <em>ShapeFactory</em>。</p>\n<p><em>FactoryPatternDemo</em> 类使用 <em>ShapeFactory</em> 来获取 <em>Shape</em> 对象。它将向 <em>ShapeFactory</em> 传递信息（<em>CIRCLE / RECTANGLE / SQUARE</em>），以便获取它所需对象的类型。</p>\n<p><img src=\"../../../../img/factory/AB6B814A-0B09-4863-93D6-1E22D6B07FF8.jpg\" alt=\"工厂模式的 UML 图\"></p>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤 1\"></a>步骤 1</h3><p>创建一个接口:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-2\"><a href=\"#步骤-2\" class=\"headerlink\" title=\"步骤 2\"></a>步骤 2</h3><p>创建实现接口的实体类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Inside Rectangle::draw() method.\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Inside Square::draw() method.\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Inside Circle::draw() method.\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-3\"><a href=\"#步骤-3\" class=\"headerlink\" title=\"步骤 3\"></a>步骤 3</h3><p>创建一个工厂，生成基于给定信息的实体类的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShapeFactory</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"comment\">//使用 getShape 方法获取形状类型的对象</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Shape <span class=\"title\">getShape</span><span class=\"params\">(String shapeType)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(shapeType == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      &#125;        </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(shapeType.equalsIgnoreCase(<span class=\"string\">\"CIRCLE\"</span>))&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Circle();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(shapeType.equalsIgnoreCase(<span class=\"string\">\"RECTANGLE\"</span>))&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Rectangle();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(shapeType.equalsIgnoreCase(<span class=\"string\">\"SQUARE\"</span>))&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Square();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-4\"><a href=\"#步骤-4\" class=\"headerlink\" title=\"步骤 4\"></a>步骤 4</h3><p>使用该工厂，通过传递类型信息来获取实体类的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryPatternDemo</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      ShapeFactory shapeFactory = <span class=\"keyword\">new</span> ShapeFactory();</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">//获取 Circle 的对象，并调用它的 draw 方法</span></span><br><span class=\"line\">      Shape shape1 = shapeFactory.getShape(<span class=\"string\">\"CIRCLE\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">//调用 Circle 的 draw 方法</span></span><br><span class=\"line\">      shape1.draw();</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">//获取 Rectangle 的对象，并调用它的 draw 方法</span></span><br><span class=\"line\">      Shape shape2 = shapeFactory.getShape(<span class=\"string\">\"RECTANGLE\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">//调用 Rectangle 的 draw 方法</span></span><br><span class=\"line\">      shape2.draw();</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">//获取 Square 的对象，并调用它的 draw 方法</span></span><br><span class=\"line\">      Shape shape3 = shapeFactory.getShape(<span class=\"string\">\"SQUARE\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">//调用 Square 的 draw 方法</span></span><br><span class=\"line\">      shape3.draw();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤-5\"><a href=\"#步骤-5\" class=\"headerlink\" title=\"步骤 5\"></a>步骤 5</h3><p>执行程序，输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Inside Circle::draw() method.</span><br><span class=\"line\">Inside Rectangle::draw() method.</span><br><span class=\"line\">Inside Square::draw() method.</span><br></pre></td></tr></table></figure>\n<h2 id=\"工厂设计模式的优点\"><a href=\"#工厂设计模式的优点\" class=\"headerlink\" title=\"工厂设计模式的优点\"></a>工厂设计模式的优点</h2><ul>\n<li>面向接口编程，体现了面向对象的思想；</li>\n<li>将创建对象的工作转移到了工厂类；</li>\n</ul>\n<h2 id=\"JDK-中的工厂设计模式实例\"><a href=\"#JDK-中的工厂设计模式实例\" class=\"headerlink\" title=\"JDK 中的工厂设计模式实例\"></a>JDK 中的工厂设计模式实例</h2><ul>\n<li>java.util.Calendar, ResourceBundle and NumberFormat getInstance() 使用了工厂方法模式；</li>\n<li>valueOf() 在包装类中，如Boolean, Integer 也使用了工厂方法模式；</li>\n</ul>\n","next":{"title":"java设计模式之过滤器模式","path":"api/articles/resource-designpattern-structure-Filter.json","image":"/img/header_img/Design/Filter.PNG","num_read":222,"num_like":412,"num_collection":638,"num_comments":182},"prev":{"title":"java设计模式之抽象工厂模式","path":"api/articles/resource-designpattern-build-Abstractfactory.json","image":"/img/header_img/Design/AbstractFactory.PNG","num_read":1189,"num_like":689,"num_collection":863,"num_comments":156},"categories":[{"name":"设计模式","path":"api/categories/设计模式.json","pathContent":"api/categories/设计模式","description":"简单快捷、解决方案","cover":"https://sunfy9.gitee.io/project/photo/project/design.jpg"}],"tags":[]}