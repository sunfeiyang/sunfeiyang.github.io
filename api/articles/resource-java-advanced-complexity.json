{"title":"如何从容应对复杂性","num_read":1872,"num_like":923,"num_collection":560,"num_comments":138,"slug":"resource-java-advanced-complexity","date":"2022-03-19T16:00:00.000Z","img":"/img/header_img/java/complexity.png","_id":"clhrbp2db006to5lg9i1s20mr","top":true,"project":"Java","type":"hot","subtitle":"软件的复杂性，是一个很泛的概念。但是一直都是开发过程中的一个难题，本文旨在探讨如何去从容应对复杂性。","site":{"data":{}},"updated":"2022-09-19T15:02:04.745Z","author":"Sunfy","comments":true,"path":"api/articles/resource-java-advanced-complexity.json","webPath":"2022/03/20/resource-java-advanced-complexity/","permalink":"https://sunfy9.gitee.io/2022/03/20/resource-java-advanced-complexity/","excerpt":null,"covers":["../../../../img/complexity/image-20220406162900062.png","../../../../img/complexity/image-20220406163007474.png","../../../../img/complexity/image-20220406163025816.png","../../../../img/complexity/image-20220406163305619.png","../../../../img/complexity/image-20220406163841963.png","../../../../img/2022/end-1660211330938.gif"],"keywords":"sunfy, hexo-theme-snail","content":"<h1 id=\"一-软件的熵增、构造定律\"><a href=\"#一-软件的熵增、构造定律\" class=\"headerlink\" title=\"一 软件的熵增、构造定律\"></a><strong>一 软件的熵增、构造定律</strong></h1><h2 id=\"1-熵增定律\"><a href=\"#1-熵增定律\" class=\"headerlink\" title=\"1 熵增定律\"></a>1 熵增定律</h2><p>熵的概念最早起源于物理学，热力学第二定律（又称“熵增定律”），表明了在自然过程中，一个孤立的系统总是从最初的集中、有序的排列状态，趋向于分散、混乱和无序；当熵达到最大时，系统就会处于一种静寂状态。</p>\n<p>软件系统亦是如此， 在软件系统的维护过程中。软件的生命力会从最初的集中、有序的排列状态，逐步趋向复杂、无序状态，直到软件不可维护而被迫下线或重构。</p>\n<p><img src=\"../../../../img/complexity/image-20220406162900062.png\" alt=\"image-20220406162900062\"></p>\n<h2 id=\"2-构造定律\"><a href=\"#2-构造定律\" class=\"headerlink\" title=\"2 构造定律\"></a>2 构造定律</h2><p>自然界是如何应对这复杂性？</p>\n<p>这在物理中被称为构造定律 （Constructal Law), 是由Adrian Bejan于1995提出的：</p>\n<p>For a finite-size system to persist in time (to live), it must evolve in such a way that it provides easier access to the imposed currents that flow through it.</p>\n<p>对于一个有限大小的持续活动的系统，它必须以这种方式发展演进：它提供了一种在自身元素之间更容易访问的流动方式。<sunfy-line></p>\n<p>这个定理在自然界中比比皆是，最典型的比如水循环系统，海水蒸发到大气，下雨时降落在地面，一部分渗入地面流入江河，一部分继续蒸发，不断循环。这种自发性质的设计反映了这一趋势：他们允许实体或事物更容易地流动 - 以最少的能量消耗到达最远的地方，就连街道和道路这些人为地构建物体，往往也是有排序的模式，以提供最大的灵活性。</p>\n<h1 id=\"二-如何应对软件系统的复杂性？\"><a href=\"#二-如何应对软件系统的复杂性？\" class=\"headerlink\" title=\"二 如何应对软件系统的复杂性？\"></a><strong>二 如何应对软件系统的复杂性？</strong></h1><p>软件系统的复杂性往往是被低估的。复杂越高，开发人员会感到不安。对其的理解认知负荷代价就越高，我们就更不快乐。真正的挑战是在构建我们的系统时要保持其有序以及工程师的生产方式。</p>\n<p>Ousterhout教授在《软件设计的哲学》书中提到：软件设计的最大目标，就是降低复杂度（complexity）。</p>\n<p>就是设计符合业务的构造定律的演进方式，一种可以以最小的开发维护成本， 使业务更快更好的流动发展的方式。</p>\n<p><img src=\"../../../../img/complexity/image-20220406163007474.png\" alt=\"image-20220406163007474\"></p>\n<h1 id=\"三-软件复杂性来自哪里，-如何解决？\"><a href=\"#三-软件复杂性来自哪里，-如何解决？\" class=\"headerlink\" title=\"三 软件复杂性来自哪里， 如何解决？\"></a><strong>三 软件复杂性来自哪里， 如何解决？</strong></h1><p> <img src=\"../../../../img/complexity/image-20220406163025816.png\" alt=\"image-20220406163025816\"></p>\n<h2 id=\"1-不确定性的来源\"><a href=\"#1-不确定性的来源\" class=\"headerlink\" title=\"1 不确定性的来源\"></a>1 不确定性的来源</h2><p>​    1、业务的不确定性<br>​    2、技术的不确定性<br>​    3、人员流动的不确定性</p>\n<h2 id=\"2-如何面对不确定性\"><a href=\"#2-如何面对不确定性\" class=\"headerlink\" title=\"2 如何面对不确定性\"></a>2 如何面对不确定性</h2><p>面对外部的确定性，转化为内核的确定性。</p>\n<p>面对外部的不确定性，找到稳定的内核基础。</p>\n<p><strong>专注问题域</strong></p>\n<p>当下互联网发展速度是迅猛的， 软件的形态也在不断的变化演进。面对未来的业务及变化，横向业务与纵向业务的发展都是不确定性的。</p>\n<p>Robert C. Martin提到的BDUF，永远不要想着在开始就设计好了全部的事情(big design up front)，一定要避免过度设计。除非能够十分确认的可预见变化， 业务边界，否则专注解决当前1-2年内业务变化设计, 讲好当下的用户故事，专注解决眼前的问题域。 面向不确定设计，增量敏捷开发。</p>\n<p><strong>确认稳定的系统内核</strong></p>\n<p>随着业务的变化、系统设计也要持续演进升级。没有一开始就完美的架构， 好的架构设计一定演化来的，不是一开始就设计出来的。</p>\n<p>一个健康公司的成长，业务横向、纵向会发展的会越来越复杂，支持业务的系统也一定会越来越复杂。</p>\n<p>系统演进过程中的成本，会受到最开始的设计、系统最初的内核影响的。面对外部业务的不确定性， 技术的不确定性，外部依赖的不确定性。一个稳定的内核应该尽量把外部的不确定性隔离。</p>\n<ul>\n<li>业务与技术的隔离</li>\n</ul>\n<p>以业务为核心，分离业务复杂度和技术复杂度。</p>\n<ul>\n<li>内部系统与外部依赖的隔离</li>\n<li>系统中常变部分与不常变部分的隔离</li>\n<li>隔离复杂性（把复杂性的部分隔离在一个模块，尽量不与其他模块互动）</li>\n</ul>\n<h2 id=\"3-无序性\"><a href=\"#3-无序性\" class=\"headerlink\" title=\"3 无序性\"></a>3 无序性</h2><p>系统和代码像多个线团一样散落一地一样，混乱不堪，毫无头绪。</p>\n<h2 id=\"4-如何面对无序性\"><a href=\"#4-如何面对无序性\" class=\"headerlink\" title=\"4 如何面对无序性\"></a>4 如何面对无序性</h2><p>​    1、统一认知（秩序化）<br>​    2、系统清晰明了的结构（结构化）<br>​    3、业务开发流程化（标准化）</p>\n<p>注：这里说的流程化并非指必须使用类似BPM的流程编排系统，</p>\n<p>而是指对于一个需求，业务开发有一定的顺序， 有规划的先做一部分事情，开发哪一个模块再去做剩下的工作，是可以流程化的。</p>\n<h2 id=\"5-规模\"><a href=\"#5-规模\" class=\"headerlink\" title=\"5 规模\"></a>5 规模</h2><p>业务规模的膨胀以及开发团队规模的膨胀，都会带来系统的复杂性提升。</p>\n<h2 id=\"6-如何面对规模膨胀带来的复杂性\"><a href=\"#6-如何面对规模膨胀带来的复杂性\" class=\"headerlink\" title=\"6 如何面对规模膨胀带来的复杂性\"></a>6 如何面对规模膨胀带来的复杂性</h2><p>​    1、业务隔离， 分而治之<br>​    2、专注产品核心竞争力的发展<br>​    3、场景分层</p>\n<p><strong>关键场景</strong></p>\n<p>投入更多的开发、测试资源、业务资源(比如单元测试覆盖率在90%以上)在关键场景。</p>\n<p><strong>普通场景</strong></p>\n<p>更快，更低成本、更少资源投入地完成普通场景的迭代</p>\n<h2 id=\"7-认知成本\"><a href=\"#7-认知成本\" class=\"headerlink\" title=\"7 认知成本\"></a>7 认知成本</h2><p>是指开发人员需要多少知识才能完成一项任务。</p>\n<p>在引入新的变化时，要考虑到带来的好处是否大于系统认知成本的提升，比如：之前提到的BPM流程编排引擎，如果对系统带来的好处不够多也是增加认知成本的一种。</p>\n<p>不合适的设计模式也是增加认知成本的一种，前台同学吐槽的中台架构比较高的学习成本， 也是认知成本的一种。</p>\n<h2 id=\"8-如何降低认知成本\"><a href=\"#8-如何降低认知成本\" class=\"headerlink\" title=\"8 如何降低认知成本\"></a>8 如何降低认知成本</h2><p>1、系统与现实业务更自然真实的映射，对业务抽象建模<br><img src=\"../../../../img/complexity/image-20220406163305619.png\" alt=\"image-20220406163305619\"></p>\n<p>软件工程师实际上只在做一件事情，即把现实中的问题搬到计算机上，通过信息化提升生产力。<br>2、代码的含义清晰，不模糊<br>3、代码的整洁度<br>4、系统的有序性， 架构清晰<br>5、避免过度设计<br>6、减少复杂、重复概念， 降低学习成本<br>7、谨慎引入会带来系统复杂性的变化</p>\n<h1 id=\"四-应对复杂性的利器\"><a href=\"#四-应对复杂性的利器\" class=\"headerlink\" title=\"四 应对复杂性的利器\"></a><strong>四 应对复杂性的利器</strong></h1><h2 id=\"1-领域驱动设计——DDD\"><a href=\"#1-领域驱动设计——DDD\" class=\"headerlink\" title=\"1 领域驱动设计——DDD\"></a>1 领域驱动设计——DDD</h2><p>DDD是把业务模型翻译成系统架构设计的一种方式, 领域模型是对业务模型的抽象。</p>\n<p>不是所有的业务服务都合适做DDD架构，DDD合适产品化，可持续迭代，业务逻辑足够复杂的业务系统，小规模的系统与简单业务不适合使用，毕竟相比较于MVC架构，认知成本和开发成本会大不少。但是DDD里面的一些战略思想我认为还是较为通用的。</p>\n<h3 id=\"对通用语言的提炼和推广\"><a href=\"#对通用语言的提炼和推广\" class=\"headerlink\" title=\"对通用语言的提炼和推广\"></a><strong>对通用语言的提炼和推广</strong></h3><p>清晰语言认知， 比如之前在详情装修系统中：</p>\n<p>ItemTemplate : 表示当前具体的装修页面</p>\n<p>ItemDescTemplate、Template，两个都能表示模板概概念</p>\n<p>刚开始接触这块的时候比较难理解这一块逻辑，之后在负责设计详情编辑器大融合这个项目时第一件事就是团队内先重新统一认知。</p>\n<ul>\n<li>装修页面统一使用 —— Page概念</li>\n<li>模板统一使用 —— Template概念</li>\n</ul>\n<p>不将模板和页面的概念糅杂在一起，含糊不清，避免重复和混乱的概念定义。</p>\n<h3 id=\"贫血模型和充血模型\"><a href=\"#贫血模型和充血模型\" class=\"headerlink\" title=\"贫血模型和充血模型\"></a><strong>贫血模型和充血模型</strong></h3><h4 id=\"1）贫血模型\"><a href=\"#1）贫血模型\" class=\"headerlink\" title=\"1）贫血模型\"></a>1）贫血模型</h4><p>贫血模型的基本特征是：它第一眼看起来还真像这么回事儿。项目中有许多对象，它们的命名都是根据领域模型来的。然而当你真正检视这些对象的行为时，会发现它们基本上没有任何行为，仅仅是一堆getter/setter方法。</p>\n<p>这些贫血对象在设计之初就被定义为只能包含数据，不能加入领域逻辑；所有的业务逻辑是放在所谓的业务层（xxxService, xxxManager对象中)，需要使用这些模型来传递数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 姓名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 年龄</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生日</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birthday;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当前状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Stauts stauts;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">PersonService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">(Person person)</span> </span>&#123;</span><br><span class=\"line\">        person.setStauts(SleepStatus.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAgeByBirth</span><span class=\"params\">(Person person)</span> </span>&#123;</span><br><span class=\"line\">        Date birthday = person.getBirthday();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentDate.before(birthday)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The birthday is before Now,It's unbelievable\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> yearNow = cal.get(Calendar.YEAR);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> dayBirth = bir.get(Calendar.DAY_OF_MONTH);</span><br><span class=\"line\">        <span class=\"comment\">/*大概计算， 忽略月份等，年龄是当前年减去出生年*/</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> age = yearNow - yearBirth;</span><br><span class=\"line\">        person.setAge(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">WorkService</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">code</span><span class=\"params\">(Person person)</span> </span>&#123;</span><br><span class=\"line\">        person.setStauts(CodeStatus.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一段代码就是贫血对象的处理过程，Person类， 通过PersonService、WorkingService去控制Person的行为，第一眼看起来像是没什么问题，但是真正去思考整个流程。WorkingService， PersonService到底是什么样的存在？与真实世界逻辑相比， 过于抽象。基于贫血模型的传统开发模式，将数据与业务逻辑分离，违反了 OOP 的封装特性，实际上是一种面向过程的编程风格。但是，现在几乎所有的 Web 项目，都是基于这种贫血模型的开发模式，甚至连 Java Spring 框架的官方 demo，都是按照这种开发模式来编写的。</p>\n<p>面向过程编程风格有种种弊端，比如，数据和操作分离之后，数据本身的操作就不受限制了。任何代码都可以随意修改数据。</p>\n<h4 id=\"2）充血模型\"><a href=\"#2）充血模型\" class=\"headerlink\" title=\"2）充血模型\"></a>2）充血模型</h4><p>充血模型是一种有行为的模型，模型中状态的改变只能通过模型上的行为来触发，同时所有的约束及业务逻辑都收敛在模型上。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">Entity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 姓名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 年龄</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生日</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birthday;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当前状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Stauts stauts;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">code</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setStauts(CodeStatus.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setStauts(SleepStatus.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAgeByBirth</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Date birthday = <span class=\"keyword\">this</span>.getBirthday();</span><br><span class=\"line\">        Calendar currentDate = Calendar.getInstance();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentDate.before(birthday)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The birthday is before Now,It's unbelievable\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> yearNow = currentDate.get(Calendar.YEAR);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> yearBirth = birthday.getYear();</span><br><span class=\"line\">        <span class=\"comment\">/*粗略计算， 忽略月份等，年龄是当前年减去出生年*/</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> age = yearNow - yearBirth;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setAge(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3）贫血模型和充血模型的区别\"><a href=\"#3）贫血模型和充血模型的区别\" class=\"headerlink\" title=\"3）贫血模型和充血模型的区别\"></a>3）贫血模型和充血模型的区别</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 贫血模型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PersonService personService;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> WorkService workService;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">        personService.setAgeByBirth(person);</span><br><span class=\"line\">        workService.code(person);</span><br><span class=\"line\">        personService.sleep(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 充血模型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">        person.setAgeByBirth();</span><br><span class=\"line\">        person.code();</span><br><span class=\"line\">        person.sleep();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面两段代码很明显第二段的认知成本更低， 这在满是Service，Manage 的系统下更为明显，Person的行为交由自己去管理， 而不是交给各种Service去管理。</p>\n<p>贫血模型是事务脚本模式</p>\n<p>贫血模型相对简单，模型上只有数据没有行为，业务逻辑由xxxService、xxxManger等类来承载，相对来说比较直接，针对简单的业务，贫血模型可以快速的完成交付，但后期的维护成本比较高，很容易变成我们所说的面条代码。</p>\n<p>充血模型是领域模型模式</p>\n<p>充血模型的实现相对比较复杂，但所有逻辑都由各自的类来负责，职责比较清晰，方便后期的迭代与维护。</p>\n<p>面向对象设计主张将数据和行为绑定在一起也就是充血模型，而贫血领域模型则更像是一种面向过程设计，很多人认为这些贫血领域对象是真正的对象，从而彻底误解了面向对象设计的涵义。</p>\n<p>Martin Fowler 曾经和 Eric Evans 聊天谈到它时，都觉得这个模型似乎越来越流行了。作为领域模型的推广者，他们觉得这不是一件好事，极力反对这种做法。</p>\n<p>贫血领域模型的根本问题是，它引入了领域模型设计的所有成本，却没有带来任何好处。最主要的成本是将对象映射到数据库中，从而产生了一个O/R（对象关系）映射层。</p>\n<p>只有当你充分使用了面向对象设计来组织复杂的业务逻辑后，这一成本才能够被抵消。如果将所有行为都写入到Service对象，那最终你会得到一组事务处理脚本，从而错过了领域模型带来的好处。而且当业务足够复杂时， 你将会得到一堆爆炸的事务处理脚本。</p>\n<h3 id=\"对业务的理解和抽象\"><a href=\"#对业务的理解和抽象\" class=\"headerlink\" title=\"对业务的理解和抽象\"></a><strong>对业务的理解和抽象</strong></h3><p>限定业务边界，对业务进行与现实更自然的理解和抽象，数据模型与业务模型隔离，把业务映射成为领域模型沉淀在系统中。</p>\n<h3 id=\"结构与防腐层\"><a href=\"#结构与防腐层\" class=\"headerlink\" title=\"结构与防腐层\"></a><strong>结构与防腐层</strong></h3><p><img src=\"../../../../img/complexity/image-20220406163841963.png\" alt=\"image-20220406163841963\"></p>\n<p>User Interfaces</p>\n<p>负责对外交互, 提供对外远程接口</p>\n<p>application</p>\n<p>应用程序执行其任务所需的代码。<br>它协调域层对象以执行实际任务。<br>该层适用于跨事务、安全检查和高级日志记录。</p>\n<p>domain</p>\n<p>负责表达业务概念。<br>对业务的分解，抽象，建模 。<br>业务逻辑、程序的核心。<br>防腐层接口放在这里。</p>\n<p>infrastucture</p>\n<p>为其他层提供通用的技术能力。如repository的implementation（ibatis，hibernate, nosql），中间件服务等anti-corruption layer的implementation 防腐层实现放在这里。</p>\n<p>防腐层的作用：</p>\n<p>封装三方服务。</p>\n<p>隔离内部系统对外部的依赖。</p>\n<h3 id=\"让隐性概念显性化\"><a href=\"#让隐性概念显性化\" class=\"headerlink\" title=\"让隐性概念显性化\"></a><strong>让隐性概念显性化</strong></h3><p>文档与注释可能会失去实时性（文档、注释没有人持续维护），但是线上生产代码是业务逻辑最真实的展现，减少代码中模糊的地方，让业务逻辑显性化体现出来，提升代码清晰度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (itemDO != <span class=\"keyword\">null</span> &amp;&amp; MapUtils.isNotEmpty(itemDO.getFeatures()) &amp;&amp; itemDO.getFeatures().containsKey(ITEM_PC_DESCRIPTION_PUSH)) &#123;</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_PC_TEMPLATEID, <span class=\"string\">\"\"</span> + templateId);</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_PC_PUSH, <span class=\"string\">\"\"</span> + pcContent.hashCode());</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_PC_TEMPLATEID, <span class=\"string\">\"\"</span> + templateId);</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_WL_TEMPLATEID, <span class=\"string\">\"\"</span> + templateId);</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_PC_PUSH, <span class=\"string\">\"\"</span> + pcContent.hashCode());</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_WL_PUSH, <span class=\"string\">\"\"</span> + content.hashCode());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如这一段代码就把判断里的业务逻辑隐藏了起来，这段代码其实的业务逻辑是这样， 判断商品是否有PC装修内容。如果有做一些操作， 如果没有做一些操作，将hasPCContent 这个逻辑表现出来， 一眼就能看出来大概的业务逻辑，让业务逻辑显现化，能让代码更清晰。可以改写成这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span> hasPCContent = itemDO != <span class=\"keyword\">null</span> &amp;&amp; MapUtils.isNotEmpty(itemDO.getFeatures()) &amp;&amp; itemDO.getFeatures().containsKey(ITEM_PC_DESCRIPTION_PUSH);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (hasPCContent) &#123;</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_PC_TEMPLATEID, <span class=\"string\">\"\"</span> + templateId);</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_PC_PUSH, <span class=\"string\">\"\"</span> + pcContent.hashCode());</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_PC_TEMPLATEID, <span class=\"string\">\"\"</span> + templateId);</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_WL_TEMPLATEID, <span class=\"string\">\"\"</span> + templateId);</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_PC_PUSH, <span class=\"string\">\"\"</span> + pcContent.hashCode());</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_WL_PUSH, <span class=\"string\">\"\"</span> + content.hashCode());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-简单设计原则——《Clean-Code》\"><a href=\"#2-简单设计原则——《Clean-Code》\" class=\"headerlink\" title=\"2 简单设计原则——《Clean Code》\"></a>2 简单设计原则——《Clean Code》</h2><p>1、保持系统最大可测试</p>\n<p>只要系统可测试并且越丰富的单元测试越会导向保持类短小且目的单一的设计方案，遵循单一职责的类，测试起来比较简单。</p>\n<p>遵循有关编写测试并持续运行测试的简单、明确规则，系统就会更贴近OO低偶尔度，高内聚度的目标。编写测试越多，就越会遵循DIP之类的规则，编写最大可测试可改进并走向更好的系统设计。</p>\n<p>2、避免重复</p>\n<p>重复是拥有良好设计系统的大敌。它代表着额外的工作、额外的风险和额外且不必要的复杂度。除了雷同的代码，功能类似的方法也可以进行包装减少重复，“小规模复用”可大量降低系统复杂性。要想实现大规模复用，必须理解如何实现小规模复用。</p>\n<p>共性的抽取也会使代码更好的符合单一职责原则。</p>\n<p>3、更清晰的表达开发者的意图</p>\n<p>软件项目的主要成本在于长期维护，当系统变得越来越复杂，开发者就需要越来越多的时间来理解他，而且也极有可能误解。</p>\n<p>所以作者需要将代码写的更清晰：选用好名称、保持函数和类的短小、采用标准命名法、标准的设计模式名，编写良好的单元测试。用心是最珍贵的资源。</p>\n<p>4、尽可能减少类和方法</p>\n<p>如果过度使用以上原则，为了保持类的函数短小，我们可能会造出太多细小的类和方法。所以这条规则也主张函数和类的数量要少。</p>\n<p>如应当为每个类创建接口、字段和行为必须切分到数据类和行为类中。应该抵制这类教条，采用更实用的手段。目标是在保持函数和类短小的同时，保持系统的短小精悍。不过这是优先级最低的一条。更重要的是测试，消除重复和清晰表达。</p>\n<h1 id=\"五-最后\"><a href=\"#五-最后\" class=\"headerlink\" title=\"五 最后\"></a><strong>五 最后</strong></h1><p>总而言之，做业务开发其实一点也不简单，面对不确定性的问题域，复杂的业务变化，</p>\n<p>如何更好的理解和抽象业务，如何更优雅的应对复杂性，一直都是软件开发的一个难题。</p>\n<p>在对抗软件熵增，寻找对抗软件复杂性，符合业务的构造定律的演进方式，我们一直都在路上。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a><strong>参考</strong></h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1] 《Domain-Driven Design》 ：https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;1629512&#x2F;</span><br><span class=\"line\">[2] 《Implementing Domain-Driven Design》 ：https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;25844633&#x2F;</span><br><span class=\"line\">[3] 《Clean Code》：https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;4199741&#x2F;</span><br><span class=\"line\">[4] 《A Philosophy of Software Design》 ：https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;30218046&#x2F;</span><br></pre></td></tr></table></figure>\n<p><img src=\"../../../../img/2022/end-1660211330938.gif\" alt=\"end\"></p>\n","more":"<h1 id=\"一-软件的熵增、构造定律\"><a href=\"#一-软件的熵增、构造定律\" class=\"headerlink\" title=\"一 软件的熵增、构造定律\"></a><strong>一 软件的熵增、构造定律</strong></h1><h2 id=\"1-熵增定律\"><a href=\"#1-熵增定律\" class=\"headerlink\" title=\"1 熵增定律\"></a>1 熵增定律</h2><p>熵的概念最早起源于物理学，热力学第二定律（又称“熵增定律”），表明了在自然过程中，一个孤立的系统总是从最初的集中、有序的排列状态，趋向于分散、混乱和无序；当熵达到最大时，系统就会处于一种静寂状态。</p>\n<p>软件系统亦是如此， 在软件系统的维护过程中。软件的生命力会从最初的集中、有序的排列状态，逐步趋向复杂、无序状态，直到软件不可维护而被迫下线或重构。</p>\n<p><img src=\"../../../../img/complexity/image-20220406162900062.png\" alt=\"image-20220406162900062\"></p>\n<h2 id=\"2-构造定律\"><a href=\"#2-构造定律\" class=\"headerlink\" title=\"2 构造定律\"></a>2 构造定律</h2><p>自然界是如何应对这复杂性？</p>\n<p>这在物理中被称为构造定律 （Constructal Law), 是由Adrian Bejan于1995提出的：</p>\n<p>For a finite-size system to persist in time (to live), it must evolve in such a way that it provides easier access to the imposed currents that flow through it.</p>\n<p>对于一个有限大小的持续活动的系统，它必须以这种方式发展演进：它提供了一种在自身元素之间更容易访问的流动方式。<sunfy-line></p>\n<p>这个定理在自然界中比比皆是，最典型的比如水循环系统，海水蒸发到大气，下雨时降落在地面，一部分渗入地面流入江河，一部分继续蒸发，不断循环。这种自发性质的设计反映了这一趋势：他们允许实体或事物更容易地流动 - 以最少的能量消耗到达最远的地方，就连街道和道路这些人为地构建物体，往往也是有排序的模式，以提供最大的灵活性。</p>\n<h1 id=\"二-如何应对软件系统的复杂性？\"><a href=\"#二-如何应对软件系统的复杂性？\" class=\"headerlink\" title=\"二 如何应对软件系统的复杂性？\"></a><strong>二 如何应对软件系统的复杂性？</strong></h1><p>软件系统的复杂性往往是被低估的。复杂越高，开发人员会感到不安。对其的理解认知负荷代价就越高，我们就更不快乐。真正的挑战是在构建我们的系统时要保持其有序以及工程师的生产方式。</p>\n<p>Ousterhout教授在《软件设计的哲学》书中提到：软件设计的最大目标，就是降低复杂度（complexity）。</p>\n<p>就是设计符合业务的构造定律的演进方式，一种可以以最小的开发维护成本， 使业务更快更好的流动发展的方式。</p>\n<p><img src=\"../../../../img/complexity/image-20220406163007474.png\" alt=\"image-20220406163007474\"></p>\n<h1 id=\"三-软件复杂性来自哪里，-如何解决？\"><a href=\"#三-软件复杂性来自哪里，-如何解决？\" class=\"headerlink\" title=\"三 软件复杂性来自哪里， 如何解决？\"></a><strong>三 软件复杂性来自哪里， 如何解决？</strong></h1><p> <img src=\"../../../../img/complexity/image-20220406163025816.png\" alt=\"image-20220406163025816\"></p>\n<h2 id=\"1-不确定性的来源\"><a href=\"#1-不确定性的来源\" class=\"headerlink\" title=\"1 不确定性的来源\"></a>1 不确定性的来源</h2><p>​    1、业务的不确定性<br>​    2、技术的不确定性<br>​    3、人员流动的不确定性</p>\n<h2 id=\"2-如何面对不确定性\"><a href=\"#2-如何面对不确定性\" class=\"headerlink\" title=\"2 如何面对不确定性\"></a>2 如何面对不确定性</h2><p>面对外部的确定性，转化为内核的确定性。</p>\n<p>面对外部的不确定性，找到稳定的内核基础。</p>\n<p><strong>专注问题域</strong></p>\n<p>当下互联网发展速度是迅猛的， 软件的形态也在不断的变化演进。面对未来的业务及变化，横向业务与纵向业务的发展都是不确定性的。</p>\n<p>Robert C. Martin提到的BDUF，永远不要想着在开始就设计好了全部的事情(big design up front)，一定要避免过度设计。除非能够十分确认的可预见变化， 业务边界，否则专注解决当前1-2年内业务变化设计, 讲好当下的用户故事，专注解决眼前的问题域。 面向不确定设计，增量敏捷开发。</p>\n<p><strong>确认稳定的系统内核</strong></p>\n<p>随着业务的变化、系统设计也要持续演进升级。没有一开始就完美的架构， 好的架构设计一定演化来的，不是一开始就设计出来的。</p>\n<p>一个健康公司的成长，业务横向、纵向会发展的会越来越复杂，支持业务的系统也一定会越来越复杂。</p>\n<p>系统演进过程中的成本，会受到最开始的设计、系统最初的内核影响的。面对外部业务的不确定性， 技术的不确定性，外部依赖的不确定性。一个稳定的内核应该尽量把外部的不确定性隔离。</p>\n<ul>\n<li>业务与技术的隔离</li>\n</ul>\n<p>以业务为核心，分离业务复杂度和技术复杂度。</p>\n<ul>\n<li>内部系统与外部依赖的隔离</li>\n<li>系统中常变部分与不常变部分的隔离</li>\n<li>隔离复杂性（把复杂性的部分隔离在一个模块，尽量不与其他模块互动）</li>\n</ul>\n<h2 id=\"3-无序性\"><a href=\"#3-无序性\" class=\"headerlink\" title=\"3 无序性\"></a>3 无序性</h2><p>系统和代码像多个线团一样散落一地一样，混乱不堪，毫无头绪。</p>\n<h2 id=\"4-如何面对无序性\"><a href=\"#4-如何面对无序性\" class=\"headerlink\" title=\"4 如何面对无序性\"></a>4 如何面对无序性</h2><p>​    1、统一认知（秩序化）<br>​    2、系统清晰明了的结构（结构化）<br>​    3、业务开发流程化（标准化）</p>\n<p>注：这里说的流程化并非指必须使用类似BPM的流程编排系统，</p>\n<p>而是指对于一个需求，业务开发有一定的顺序， 有规划的先做一部分事情，开发哪一个模块再去做剩下的工作，是可以流程化的。</p>\n<h2 id=\"5-规模\"><a href=\"#5-规模\" class=\"headerlink\" title=\"5 规模\"></a>5 规模</h2><p>业务规模的膨胀以及开发团队规模的膨胀，都会带来系统的复杂性提升。</p>\n<h2 id=\"6-如何面对规模膨胀带来的复杂性\"><a href=\"#6-如何面对规模膨胀带来的复杂性\" class=\"headerlink\" title=\"6 如何面对规模膨胀带来的复杂性\"></a>6 如何面对规模膨胀带来的复杂性</h2><p>​    1、业务隔离， 分而治之<br>​    2、专注产品核心竞争力的发展<br>​    3、场景分层</p>\n<p><strong>关键场景</strong></p>\n<p>投入更多的开发、测试资源、业务资源(比如单元测试覆盖率在90%以上)在关键场景。</p>\n<p><strong>普通场景</strong></p>\n<p>更快，更低成本、更少资源投入地完成普通场景的迭代</p>\n<h2 id=\"7-认知成本\"><a href=\"#7-认知成本\" class=\"headerlink\" title=\"7 认知成本\"></a>7 认知成本</h2><p>是指开发人员需要多少知识才能完成一项任务。</p>\n<p>在引入新的变化时，要考虑到带来的好处是否大于系统认知成本的提升，比如：之前提到的BPM流程编排引擎，如果对系统带来的好处不够多也是增加认知成本的一种。</p>\n<p>不合适的设计模式也是增加认知成本的一种，前台同学吐槽的中台架构比较高的学习成本， 也是认知成本的一种。</p>\n<h2 id=\"8-如何降低认知成本\"><a href=\"#8-如何降低认知成本\" class=\"headerlink\" title=\"8 如何降低认知成本\"></a>8 如何降低认知成本</h2><p>1、系统与现实业务更自然真实的映射，对业务抽象建模<br><img src=\"../../../../img/complexity/image-20220406163305619.png\" alt=\"image-20220406163305619\"></p>\n<p>软件工程师实际上只在做一件事情，即把现实中的问题搬到计算机上，通过信息化提升生产力。<br>2、代码的含义清晰，不模糊<br>3、代码的整洁度<br>4、系统的有序性， 架构清晰<br>5、避免过度设计<br>6、减少复杂、重复概念， 降低学习成本<br>7、谨慎引入会带来系统复杂性的变化</p>\n<h1 id=\"四-应对复杂性的利器\"><a href=\"#四-应对复杂性的利器\" class=\"headerlink\" title=\"四 应对复杂性的利器\"></a><strong>四 应对复杂性的利器</strong></h1><h2 id=\"1-领域驱动设计——DDD\"><a href=\"#1-领域驱动设计——DDD\" class=\"headerlink\" title=\"1 领域驱动设计——DDD\"></a>1 领域驱动设计——DDD</h2><p>DDD是把业务模型翻译成系统架构设计的一种方式, 领域模型是对业务模型的抽象。</p>\n<p>不是所有的业务服务都合适做DDD架构，DDD合适产品化，可持续迭代，业务逻辑足够复杂的业务系统，小规模的系统与简单业务不适合使用，毕竟相比较于MVC架构，认知成本和开发成本会大不少。但是DDD里面的一些战略思想我认为还是较为通用的。</p>\n<h3 id=\"对通用语言的提炼和推广\"><a href=\"#对通用语言的提炼和推广\" class=\"headerlink\" title=\"对通用语言的提炼和推广\"></a><strong>对通用语言的提炼和推广</strong></h3><p>清晰语言认知， 比如之前在详情装修系统中：</p>\n<p>ItemTemplate : 表示当前具体的装修页面</p>\n<p>ItemDescTemplate、Template，两个都能表示模板概概念</p>\n<p>刚开始接触这块的时候比较难理解这一块逻辑，之后在负责设计详情编辑器大融合这个项目时第一件事就是团队内先重新统一认知。</p>\n<ul>\n<li>装修页面统一使用 —— Page概念</li>\n<li>模板统一使用 —— Template概念</li>\n</ul>\n<p>不将模板和页面的概念糅杂在一起，含糊不清，避免重复和混乱的概念定义。</p>\n<h3 id=\"贫血模型和充血模型\"><a href=\"#贫血模型和充血模型\" class=\"headerlink\" title=\"贫血模型和充血模型\"></a><strong>贫血模型和充血模型</strong></h3><h4 id=\"1）贫血模型\"><a href=\"#1）贫血模型\" class=\"headerlink\" title=\"1）贫血模型\"></a>1）贫血模型</h4><p>贫血模型的基本特征是：它第一眼看起来还真像这么回事儿。项目中有许多对象，它们的命名都是根据领域模型来的。然而当你真正检视这些对象的行为时，会发现它们基本上没有任何行为，仅仅是一堆getter/setter方法。</p>\n<p>这些贫血对象在设计之初就被定义为只能包含数据，不能加入领域逻辑；所有的业务逻辑是放在所谓的业务层（xxxService, xxxManager对象中)，需要使用这些模型来传递数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 姓名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 年龄</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生日</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birthday;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当前状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Stauts stauts;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">PersonService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">(Person person)</span> </span>&#123;</span><br><span class=\"line\">        person.setStauts(SleepStatus.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAgeByBirth</span><span class=\"params\">(Person person)</span> </span>&#123;</span><br><span class=\"line\">        Date birthday = person.getBirthday();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentDate.before(birthday)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The birthday is before Now,It's unbelievable\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> yearNow = cal.get(Calendar.YEAR);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> dayBirth = bir.get(Calendar.DAY_OF_MONTH);</span><br><span class=\"line\">        <span class=\"comment\">/*大概计算， 忽略月份等，年龄是当前年减去出生年*/</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> age = yearNow - yearBirth;</span><br><span class=\"line\">        person.setAge(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">WorkService</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">code</span><span class=\"params\">(Person person)</span> </span>&#123;</span><br><span class=\"line\">        person.setStauts(CodeStatus.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一段代码就是贫血对象的处理过程，Person类， 通过PersonService、WorkingService去控制Person的行为，第一眼看起来像是没什么问题，但是真正去思考整个流程。WorkingService， PersonService到底是什么样的存在？与真实世界逻辑相比， 过于抽象。基于贫血模型的传统开发模式，将数据与业务逻辑分离，违反了 OOP 的封装特性，实际上是一种面向过程的编程风格。但是，现在几乎所有的 Web 项目，都是基于这种贫血模型的开发模式，甚至连 Java Spring 框架的官方 demo，都是按照这种开发模式来编写的。</p>\n<p>面向过程编程风格有种种弊端，比如，数据和操作分离之后，数据本身的操作就不受限制了。任何代码都可以随意修改数据。</p>\n<h4 id=\"2）充血模型\"><a href=\"#2）充血模型\" class=\"headerlink\" title=\"2）充血模型\"></a>2）充血模型</h4><p>充血模型是一种有行为的模型，模型中状态的改变只能通过模型上的行为来触发，同时所有的约束及业务逻辑都收敛在模型上。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">Entity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 姓名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 年龄</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生日</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birthday;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当前状态</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Stauts stauts;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">code</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setStauts(CodeStatus.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setStauts(SleepStatus.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAgeByBirth</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Date birthday = <span class=\"keyword\">this</span>.getBirthday();</span><br><span class=\"line\">        Calendar currentDate = Calendar.getInstance();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentDate.before(birthday)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The birthday is before Now,It's unbelievable\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> yearNow = currentDate.get(Calendar.YEAR);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> yearBirth = birthday.getYear();</span><br><span class=\"line\">        <span class=\"comment\">/*粗略计算， 忽略月份等，年龄是当前年减去出生年*/</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> age = yearNow - yearBirth;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setAge(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3）贫血模型和充血模型的区别\"><a href=\"#3）贫血模型和充血模型的区别\" class=\"headerlink\" title=\"3）贫血模型和充血模型的区别\"></a>3）贫血模型和充血模型的区别</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 贫血模型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PersonService personService;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> WorkService workService;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">        personService.setAgeByBirth(person);</span><br><span class=\"line\">        workService.code(person);</span><br><span class=\"line\">        personService.sleep(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 充血模型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">        person.setAgeByBirth();</span><br><span class=\"line\">        person.code();</span><br><span class=\"line\">        person.sleep();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面两段代码很明显第二段的认知成本更低， 这在满是Service，Manage 的系统下更为明显，Person的行为交由自己去管理， 而不是交给各种Service去管理。</p>\n<p>贫血模型是事务脚本模式</p>\n<p>贫血模型相对简单，模型上只有数据没有行为，业务逻辑由xxxService、xxxManger等类来承载，相对来说比较直接，针对简单的业务，贫血模型可以快速的完成交付，但后期的维护成本比较高，很容易变成我们所说的面条代码。</p>\n<p>充血模型是领域模型模式</p>\n<p>充血模型的实现相对比较复杂，但所有逻辑都由各自的类来负责，职责比较清晰，方便后期的迭代与维护。</p>\n<p>面向对象设计主张将数据和行为绑定在一起也就是充血模型，而贫血领域模型则更像是一种面向过程设计，很多人认为这些贫血领域对象是真正的对象，从而彻底误解了面向对象设计的涵义。</p>\n<p>Martin Fowler 曾经和 Eric Evans 聊天谈到它时，都觉得这个模型似乎越来越流行了。作为领域模型的推广者，他们觉得这不是一件好事，极力反对这种做法。</p>\n<p>贫血领域模型的根本问题是，它引入了领域模型设计的所有成本，却没有带来任何好处。最主要的成本是将对象映射到数据库中，从而产生了一个O/R（对象关系）映射层。</p>\n<p>只有当你充分使用了面向对象设计来组织复杂的业务逻辑后，这一成本才能够被抵消。如果将所有行为都写入到Service对象，那最终你会得到一组事务处理脚本，从而错过了领域模型带来的好处。而且当业务足够复杂时， 你将会得到一堆爆炸的事务处理脚本。</p>\n<h3 id=\"对业务的理解和抽象\"><a href=\"#对业务的理解和抽象\" class=\"headerlink\" title=\"对业务的理解和抽象\"></a><strong>对业务的理解和抽象</strong></h3><p>限定业务边界，对业务进行与现实更自然的理解和抽象，数据模型与业务模型隔离，把业务映射成为领域模型沉淀在系统中。</p>\n<h3 id=\"结构与防腐层\"><a href=\"#结构与防腐层\" class=\"headerlink\" title=\"结构与防腐层\"></a><strong>结构与防腐层</strong></h3><p><img src=\"../../../../img/complexity/image-20220406163841963.png\" alt=\"image-20220406163841963\"></p>\n<p>User Interfaces</p>\n<p>负责对外交互, 提供对外远程接口</p>\n<p>application</p>\n<p>应用程序执行其任务所需的代码。<br>它协调域层对象以执行实际任务。<br>该层适用于跨事务、安全检查和高级日志记录。</p>\n<p>domain</p>\n<p>负责表达业务概念。<br>对业务的分解，抽象，建模 。<br>业务逻辑、程序的核心。<br>防腐层接口放在这里。</p>\n<p>infrastucture</p>\n<p>为其他层提供通用的技术能力。如repository的implementation（ibatis，hibernate, nosql），中间件服务等anti-corruption layer的implementation 防腐层实现放在这里。</p>\n<p>防腐层的作用：</p>\n<p>封装三方服务。</p>\n<p>隔离内部系统对外部的依赖。</p>\n<h3 id=\"让隐性概念显性化\"><a href=\"#让隐性概念显性化\" class=\"headerlink\" title=\"让隐性概念显性化\"></a><strong>让隐性概念显性化</strong></h3><p>文档与注释可能会失去实时性（文档、注释没有人持续维护），但是线上生产代码是业务逻辑最真实的展现，减少代码中模糊的地方，让业务逻辑显性化体现出来，提升代码清晰度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (itemDO != <span class=\"keyword\">null</span> &amp;&amp; MapUtils.isNotEmpty(itemDO.getFeatures()) &amp;&amp; itemDO.getFeatures().containsKey(ITEM_PC_DESCRIPTION_PUSH)) &#123;</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_PC_TEMPLATEID, <span class=\"string\">\"\"</span> + templateId);</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_PC_PUSH, <span class=\"string\">\"\"</span> + pcContent.hashCode());</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_PC_TEMPLATEID, <span class=\"string\">\"\"</span> + templateId);</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_WL_TEMPLATEID, <span class=\"string\">\"\"</span> + templateId);</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_PC_PUSH, <span class=\"string\">\"\"</span> + pcContent.hashCode());</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_WL_PUSH, <span class=\"string\">\"\"</span> + content.hashCode());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如这一段代码就把判断里的业务逻辑隐藏了起来，这段代码其实的业务逻辑是这样， 判断商品是否有PC装修内容。如果有做一些操作， 如果没有做一些操作，将hasPCContent 这个逻辑表现出来， 一眼就能看出来大概的业务逻辑，让业务逻辑显现化，能让代码更清晰。可以改写成这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span> hasPCContent = itemDO != <span class=\"keyword\">null</span> &amp;&amp; MapUtils.isNotEmpty(itemDO.getFeatures()) &amp;&amp; itemDO.getFeatures().containsKey(ITEM_PC_DESCRIPTION_PUSH);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (hasPCContent) &#123;</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_PC_TEMPLATEID, <span class=\"string\">\"\"</span> + templateId);</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_PC_PUSH, <span class=\"string\">\"\"</span> + pcContent.hashCode());</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_PC_TEMPLATEID, <span class=\"string\">\"\"</span> + templateId);</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_WL_TEMPLATEID, <span class=\"string\">\"\"</span> + templateId);</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_PC_PUSH, <span class=\"string\">\"\"</span> + pcContent.hashCode());</span><br><span class=\"line\">   itemUpdateBO.getFeatures().put(ItemTemplateConstant.FEATURE_TSP_SELL_WL_PUSH, <span class=\"string\">\"\"</span> + content.hashCode());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-简单设计原则——《Clean-Code》\"><a href=\"#2-简单设计原则——《Clean-Code》\" class=\"headerlink\" title=\"2 简单设计原则——《Clean Code》\"></a>2 简单设计原则——《Clean Code》</h2><p>1、保持系统最大可测试</p>\n<p>只要系统可测试并且越丰富的单元测试越会导向保持类短小且目的单一的设计方案，遵循单一职责的类，测试起来比较简单。</p>\n<p>遵循有关编写测试并持续运行测试的简单、明确规则，系统就会更贴近OO低偶尔度，高内聚度的目标。编写测试越多，就越会遵循DIP之类的规则，编写最大可测试可改进并走向更好的系统设计。</p>\n<p>2、避免重复</p>\n<p>重复是拥有良好设计系统的大敌。它代表着额外的工作、额外的风险和额外且不必要的复杂度。除了雷同的代码，功能类似的方法也可以进行包装减少重复，“小规模复用”可大量降低系统复杂性。要想实现大规模复用，必须理解如何实现小规模复用。</p>\n<p>共性的抽取也会使代码更好的符合单一职责原则。</p>\n<p>3、更清晰的表达开发者的意图</p>\n<p>软件项目的主要成本在于长期维护，当系统变得越来越复杂，开发者就需要越来越多的时间来理解他，而且也极有可能误解。</p>\n<p>所以作者需要将代码写的更清晰：选用好名称、保持函数和类的短小、采用标准命名法、标准的设计模式名，编写良好的单元测试。用心是最珍贵的资源。</p>\n<p>4、尽可能减少类和方法</p>\n<p>如果过度使用以上原则，为了保持类的函数短小，我们可能会造出太多细小的类和方法。所以这条规则也主张函数和类的数量要少。</p>\n<p>如应当为每个类创建接口、字段和行为必须切分到数据类和行为类中。应该抵制这类教条，采用更实用的手段。目标是在保持函数和类短小的同时，保持系统的短小精悍。不过这是优先级最低的一条。更重要的是测试，消除重复和清晰表达。</p>\n<h1 id=\"五-最后\"><a href=\"#五-最后\" class=\"headerlink\" title=\"五 最后\"></a><strong>五 最后</strong></h1><p>总而言之，做业务开发其实一点也不简单，面对不确定性的问题域，复杂的业务变化，</p>\n<p>如何更好的理解和抽象业务，如何更优雅的应对复杂性，一直都是软件开发的一个难题。</p>\n<p>在对抗软件熵增，寻找对抗软件复杂性，符合业务的构造定律的演进方式，我们一直都在路上。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a><strong>参考</strong></h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1] 《Domain-Driven Design》 ：https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;1629512&#x2F;</span><br><span class=\"line\">[2] 《Implementing Domain-Driven Design》 ：https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;25844633&#x2F;</span><br><span class=\"line\">[3] 《Clean Code》：https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;4199741&#x2F;</span><br><span class=\"line\">[4] 《A Philosophy of Software Design》 ：https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;30218046&#x2F;</span><br></pre></td></tr></table></figure>\n<p><img src=\"../../../../img/2022/end-1660211330938.gif\" alt=\"end\"></p>\n","next":{"title":"并发场景下的幂等问题——分布式锁详解","path":"api/articles/resource-MicroService-other-幂等问题-分布式锁.json","image":"/img/header_img/MicroService/mideng.png","num_read":738,"num_like":609,"num_collection":365,"num_comments":102},"prev":{"title":"一文搞懂redis","path":"api/articles/resource-java-redis-redis.json","image":"/img/header_img/java/redisBeginner.png","num_read":321,"num_like":817,"num_collection":339,"num_comments":48},"categories":[{"name":"Java","path":"api/categories/Java.json","pathContent":"api/categories/Java","description":"知识点、常用功能","cover":"https://sunfy9.gitee.io/project/photo/project/java.png"}],"tags":[]}