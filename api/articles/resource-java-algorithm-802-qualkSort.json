{"title":"算法常用的解题思路---快速排序及优化","num_read":215,"num_like":444,"num_collection":734,"num_comments":253,"slug":"resource-java-algorithm-802-qualkSort","date":"2021-07-13T16:00:00.000Z","img":"/img/header_img/10.jpg","_id":"clhrbp2dh0089o5lgeidv2f50","project":"algorithm","site":{"data":{}},"updated":"2022-10-28T08:29:56.143Z","author":"Sunfy","comments":true,"path":"api/articles/resource-java-algorithm-802-qualkSort.json","webPath":"2021/07/14/resource-java-algorithm-802-qualkSort/","permalink":"https://sunfy9.gitee.io/2021/07/14/resource-java-algorithm-802-qualkSort/","excerpt":null,"covers":["../../../../img/802-qualkSort/1251417-20171130124622198-29578695.bmp"],"keywords":"sunfy, hexo-theme-snail","content":"<p>快速排序及优化</p>\n<hr>\n<p>快速排序算法通过多次比较和交换来实现排序，其排序流程如下： </p>\n<p>(1)首先设定一个分界值，通过该分界值将数组分成左右两部分。</p>\n<p>(2)将大于或等于分界值的数据集中到数组右边，小于分界值的数据集中到数组的左边。此时，左边部分中各元素都小于或等于分界值，而右边部分中各元素都大于或等于分界值。</p>\n<p>(3)然后，左边和右边的数据可以独立排序。对于左侧的数组数据，又可以取一个分界值，将该部分数据分成左右两部分，同样在左边放置较小值，右边放置较大值。右侧的数组数据也可以做类似处理。</p>\n<p>(4)重复上述过程，可以看出，这是一个递归定义。通过递归将左侧部分排好序后，再递归排好右侧部分的顺序。当左、右两个部分各数据排序完成后，整个数组的排序也就完成了。</p>\n<h1 id=\"快速排序及优化-Java实现\"><a href=\"#快速排序及优化-Java实现\" class=\"headerlink\" title=\"快速排序及优化(Java实现)\"></a><a href=\"https://www.cnblogs.com/noKing/p/7922397.html\" target=\"_blank\" rel=\"noopener\">快速排序及优化(Java实现)</a></h1><h2 id=\"一-普通快速排序\"><a href=\"#一-普通快速排序\" class=\"headerlink\" title=\"一. 普通快速排序\"></a>一. 普通快速排序</h2><p>找一个基准值base，然后一趟排序后让base左边的数都小于base，base右边的数都大于等于base。再分为两个子数组的排序。如此递归下去。<sunfy-line></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr)</span> </span>&#123;</span><br><span class=\"line\">        sort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt;= right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = partition(arr, left, right);</span><br><span class=\"line\">        sort(arr, left, p - <span class=\"number\">1</span>);</span><br><span class=\"line\">        sort(arr, p + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        T base = arr[left];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = left;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = left + <span class=\"number\">1</span>; i &lt;= right; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (base.compareTo(arr[i]) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                swap(arr, j, i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(arr, left, j);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;<span class=\"comment\">//返回一躺排序后基准值的下角标</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(Object[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != j) &#123;</span><br><span class=\"line\">            Object temp = arr[i];</span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArr</span><span class=\"params\">(Object[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object o : arr) &#123;</span><br><span class=\"line\">            System.out.print(o);</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">        Integer[] arr = &#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//3   5   1   7   2   9   8   0   4   6</span></span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//0   1   2   3   4   5   6   7   8   9</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-快速排序优化：随机选取基准值base\"><a href=\"#二-快速排序优化：随机选取基准值base\" class=\"headerlink\" title=\"二. 快速排序优化：随机选取基准值base\"></a>二. 快速排序优化：随机选取基准值base</h2><p>在数组几乎有序时，快排性能不好（因为每趟排序后，左右两个子递归规模相差悬殊，大的那部分最后很可能会达到O(n^2)）。</p>\n<p>解决：基准值随机地选取，而不是每次都取第一个数。这样就不会受“几乎有序的数组”的干扰了。但是对“几乎乱序的数组”的排序性能可能会稍微下降，至少多了排序前交换的那部分，乱序时这个交换没有意义…有很多“运气”成分..</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr)</span> </span>&#123;</span><br><span class=\"line\">        sort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt;= right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = partition(arr, left, right);</span><br><span class=\"line\">        sort(arr, left, p - <span class=\"number\">1</span>);</span><br><span class=\"line\">        sort(arr, p + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//排序前，先让基准值和随机的一个数进行交换。这样，基准值就有随机性。</span></span><br><span class=\"line\">        <span class=\"comment\">//就不至于在数组相对有序时，导致左右两边的递归规模不一致，产生最坏时间复杂度</span></span><br><span class=\"line\">        swap(arr,left,(<span class=\"keyword\">int</span>)(Math.random()*(right - left + <span class=\"number\">1</span>)+left));</span><br><span class=\"line\"> </span><br><span class=\"line\">        T base = arr[left];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = left;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = left + <span class=\"number\">1</span>; i &lt;= right; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (base.compareTo(arr[i]) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                swap(arr, j, i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(arr, left, j);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;<span class=\"comment\">//返回一躺排序后，基准值的下角标</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(Object[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != j) &#123;</span><br><span class=\"line\">            Object temp = arr[i];</span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArr</span><span class=\"params\">(Object[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object o : arr) &#123;</span><br><span class=\"line\">            System.out.print(o);</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">        Integer[] arr = &#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//3   5   1   7   2   9   8   0   4   6</span></span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//0   1   2   3   4   5   6   7   8   9</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-快速排序继续优化：配合着使用插入排序\"><a href=\"#三-快速排序继续优化：配合着使用插入排序\" class=\"headerlink\" title=\"三. 快速排序继续优化：配合着使用插入排序\"></a>三. 快速排序继续优化：配合着使用插入排序</h2><p>快排是不断减小问题规模来解决子问题的，需要不断递归。但是递归到规模足够小时，如果继续采用这种 不稳定+递归 的方式执行下去，效率不见得会很好。</p>\n<p>所以当问题规模较小时，近乎有序时，插入排序表现的很好。Java自带的Arrays.sort()里经常能看到这样的注释：“Use insertion sort on tiny arrays”，“Insertion sort on smallest arrays”</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr)</span> </span>&#123;</span><br><span class=\"line\">        sort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr   待排序的数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left  左闭</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right 右闭</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k     当快排递归到子问题的规模 &lt;= k 时，采用插入排序优化</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;   泛型，待排序可比较类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 规模小时采用插入排序</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right - left &lt;= k) &#123;</span><br><span class=\"line\">            insertionSort(arr, left, right);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = partition(arr, left, right);</span><br><span class=\"line\">        sort(arr, left, p - <span class=\"number\">1</span>, k);</span><br><span class=\"line\">        sort(arr, p + <span class=\"number\">1</span>, right, k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertionSort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = l + <span class=\"number\">1</span>; i &lt;= r; i++) &#123;</span><br><span class=\"line\">            T cur = arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; j &gt;= <span class=\"number\">0</span> &amp;&amp; cur.compareTo(arr[j]) &lt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//排序前，先让基准值和随机的一个数进行交换。这样，基准值就有随机性。</span></span><br><span class=\"line\">        <span class=\"comment\">//就不至于在数组相对有序时，导致左右两边的递归规模不一致，产生最坏时间复杂度</span></span><br><span class=\"line\">        swap(arr, left, (<span class=\"keyword\">int</span>) (Math.random() * (right - left + <span class=\"number\">1</span>) + left));</span><br><span class=\"line\"> </span><br><span class=\"line\">        T base = arr[left];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = left;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = left + <span class=\"number\">1</span>; i &lt;= right; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (base.compareTo(arr[i]) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                swap(arr, j, i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(arr, left, j);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;<span class=\"comment\">//返回一躺排序后，基准值的下角标</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(Object[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != j) &#123;</span><br><span class=\"line\">            Object temp = arr[i];</span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArr</span><span class=\"params\">(Object[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object o : arr) &#123;</span><br><span class=\"line\">            System.out.print(o);</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">        Integer[] arr = &#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//3   5   1   7   2   9   8   0   4   6</span></span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//0   1   2   3   4   5   6   7   8   9</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四-快速排序继续优化：两路快排\"><a href=\"#四-快速排序继续优化：两路快排\" class=\"headerlink\" title=\"四. 快速排序继续优化：两路快排\"></a>四. 快速排序继续优化：两路快排</h2><p>在最开始的普通快速排序说过，让基准值base左边的都比base小，而base右边的都大于等于base。等于base的这些会聚集到右侧(或者稍微改改大小关系就会聚集到左侧)。总之就会聚集到一边。这样在数组中重复数字很多的时候，就又会导致两边子递归规模差距悬殊的情况。这时想把等于base的那些数分派到base两边，而不是让他们聚集到一起。</p>\n<p>（注：测试代码的时候，最好把插入排序那部分注视掉，向我下面代码中那样…不然数据量小于k=16的时候执行的是插入排序…..）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr)</span> </span>&#123;</span><br><span class=\"line\">        sort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr   待排序的数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left  左闭</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right 右闭</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k     当快排递归到子问题的规模 &lt;= k 时，采用插入排序优化</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;   泛型，待排序可比较类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 规模小时采用插入排序</span></span><br><span class=\"line\"><span class=\"comment\">//        if (right - left &lt;= k) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            insertionSort(arr, left, right);</span></span><br><span class=\"line\"><span class=\"comment\">//            return;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt;= right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = partition(arr, left, right);</span><br><span class=\"line\">        sort(arr, left, p - <span class=\"number\">1</span>, k);</span><br><span class=\"line\">        sort(arr, p + <span class=\"number\">1</span>, right, k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertionSort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = l + <span class=\"number\">1</span>; i &lt;= r; i++) &#123;</span><br><span class=\"line\">            T cur = arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; j &gt;= <span class=\"number\">0</span> &amp;&amp; cur.compareTo(arr[j]) &lt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//排序前，先让基准值和随机的一个数进行交换。这样，基准值就有随机性。</span></span><br><span class=\"line\">        <span class=\"comment\">//就不至于在数组相对有序时，导致左右两边的递归规模不一致，产生最坏时间复杂度</span></span><br><span class=\"line\">        swap(arr, left, (<span class=\"keyword\">int</span>) (Math.random() * (right - left + <span class=\"number\">1</span>) + left));</span><br><span class=\"line\"> </span><br><span class=\"line\">        T base = arr[left];<span class=\"comment\">//基准值，每次都把这个基准值抛出去，看成[left+1.....right]左闭右闭区间的排序</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = left + <span class=\"number\">1</span>; <span class=\"comment\">//对于上一行提到的[left+1.....right]区间，i表示 [left+1......i)左闭右开区间的值都小于等于base。</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = right;<span class=\"comment\">//对于上二行提到的[left+1.....right]区间，j表示 (j......right]左开右闭区间的值都大于等于base。</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//从左到右扫描，扫描出第一个比base大的元素，然后i停在那里。</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt;= right &amp;&amp; arr[i].compareTo(base) &lt; <span class=\"number\">0</span>) i++;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">//从右到左扫描，扫描出第一个比base小的元素，然后j停在那里。</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt;= left &amp;&amp; arr[j].compareTo(base) &gt; <span class=\"number\">0</span>) j--;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; j) &#123;<span class=\"comment\">//虽说是i&gt;j，但其实都是以j=i-1为条件结束的</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(arr, i++, j--);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        swap(arr, left, j);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;<span class=\"comment\">//返回一躺排序后，基准值的下角标</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(Object[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != j) &#123;</span><br><span class=\"line\">            Object temp = arr[i];</span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArr</span><span class=\"params\">(Object[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object o : arr) &#123;</span><br><span class=\"line\">            System.out.print(o);</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">        Integer[] arr = &#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//3   5   1   7   2   9   8   0   4   6</span></span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//0   1   2   3   4   5   6   7   8   9</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五-快速排序继续优化：两路快排-不用swap-用直接赋值\"><a href=\"#五-快速排序继续优化：两路快排-不用swap-用直接赋值\" class=\"headerlink\" title=\"五. 快速排序继续优化：两路快排 不用swap, 用直接赋值\"></a>五. 快速排序继续优化：两路快排 不用swap, 用直接赋值</h2><p>上面的两路在找到大于base的值和小于base的值时，用的是swap()方法来进行交换。两数交换涉及到第三个变量temp的操作，多了读写操作。接下来用直接赋值的方法，把小于的放到右边，大于的放到左边，当i和j相遇时，那个位置就是base该放的地方。至此一趟完成。递归即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr)</span> </span>&#123;</span><br><span class=\"line\">        sort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr   待排序的数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left  左闭</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right 右闭</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k     当快排递归到子问题的规模 &lt;= k 时，采用插入排序优化</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;   泛型，待排序可比较类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 规模小时采用插入排序</span></span><br><span class=\"line\"><span class=\"comment\">//        if (right - left &lt;= k) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            insertionSort(arr, left, right);</span></span><br><span class=\"line\"><span class=\"comment\">//            return;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt;= right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = partition(arr, left, right);</span><br><span class=\"line\">        sort(arr, left, p - <span class=\"number\">1</span>, k);</span><br><span class=\"line\">        sort(arr, p + <span class=\"number\">1</span>, right, k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertionSort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = l + <span class=\"number\">1</span>; i &lt;= r; i++) &#123;</span><br><span class=\"line\">            T cur = arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; j &gt;= <span class=\"number\">0</span> &amp;&amp; cur.compareTo(arr[j]) &lt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//排序前，先让基准值和随机的一个数进行交换。这样，基准值就有随机性。</span></span><br><span class=\"line\">        <span class=\"comment\">//就不至于在数组相对有序时，导致左右两边的递归规模不一致，产生最坏时间复杂度</span></span><br><span class=\"line\">        swap(arr, left, (<span class=\"keyword\">int</span>) (Math.random() * (right - left + <span class=\"number\">1</span>) + left));</span><br><span class=\"line\"> </span><br><span class=\"line\">        T base = arr[left];<span class=\"comment\">//基准值，每次都把这个基准值抛出去，看成[left+1.....right]左闭右闭区间的排序</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = left; <span class=\"comment\">//对于上一行提到的[left+1.....right]区间，i表示 [left+1......i)左闭右开区间的值都小于等于base。</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = right;<span class=\"comment\">//对于上二行提到的[left+1.....right]区间，j表示 (j......right]左开右闭区间的值都大于等于base。</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//从右到左扫描，扫描出第一个比base小的元素，然后j停在那里。</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt; i &amp;&amp; arr[j].compareTo(base) &gt; <span class=\"number\">0</span>) j--;</span><br><span class=\"line\"> </span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">//从左到右扫描，扫描出第一个比base大的元素，然后i停在那里。</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; arr[i].compareTo(base) &lt; <span class=\"number\">0</span>) i++;</span><br><span class=\"line\"> </span><br><span class=\"line\">            arr[j] = arr[i];</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        arr[j] = base;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;<span class=\"comment\">//返回一躺排序后，基准值的下角标</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(Object[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != j) &#123;</span><br><span class=\"line\">            Object temp = arr[i];</span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArr</span><span class=\"params\">(Object[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object o : arr) &#123;</span><br><span class=\"line\">            System.out.print(o);</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">        Integer[] arr = &#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//3   5   1   7   2   9   8   0   4   6</span></span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\"> </span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//0   1   2   3   4   5   6   7   8   9</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"六-快速排序继续优化：当大量数据，且重复数多时，用三路快排\"><a href=\"#六-快速排序继续优化：当大量数据，且重复数多时，用三路快排\" class=\"headerlink\" title=\"六. 快速排序继续优化：当大量数据，且重复数多时，用三路快排\"></a>六. 快速排序继续优化：当大量数据，且重复数多时，用三路快排</h2><p>把数组分为三路，第一路都比base小，第二路都等于base，第三路都大于base。</p>\n<p>用指针从前到后扫描，如果：</p>\n<p>1.cur指向的数小于base，那么：交换arr[cur]和arr[i]的值，然后i++,cur++。</p>\n<p>2.cur指向的数等于base, 那么：cur++</p>\n<p>3.cur指向的数大于base，那么：交换arr[cur]和arr[j]的值，然后j—。</p>\n<p>当cur &gt; j的时候说明三路都已经完成。</p>\n<p><img src=\"../../../../img/802-qualkSort/1251417-20171130124622198-29578695.bmp\" alt=\"1251417-20171130124622198-29578695\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr)</span> </span>&#123;</span><br><span class=\"line\">        sort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr   待排序的数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left  左闭</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right 右闭</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k     当快排递归到子问题的规模 &lt;= k 时，采用插入排序优化</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;   泛型，待排序可比较类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 规模小时采用插入排序</span></span><br><span class=\"line\"><span class=\"comment\">//        if (right - left &lt;= k) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            insertionSort(arr, left, right);</span></span><br><span class=\"line\"><span class=\"comment\">//            return;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt;= right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ret = partition(arr, left, right);</span><br><span class=\"line\">        sort(arr, left, ret[<span class=\"number\">0</span>], k);</span><br><span class=\"line\">        sort(arr, ret[<span class=\"number\">1</span>], right, k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertionSort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = l + <span class=\"number\">1</span>; i &lt;= r; i++) &#123;</span><br><span class=\"line\">            T cur = arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; j &gt;= <span class=\"number\">0</span> &amp;&amp; cur.compareTo(arr[j]) &lt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr   待排序的数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left  待排序数组的左边界</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right 待排序数组的右边界</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;   泛型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"keyword\">int</span>[] partition(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//排序前，先让基准值和随机的一个数进行交换。这样，基准值就有随机性。</span></span><br><span class=\"line\">        <span class=\"comment\">//就不至于在数组相对有序时，导致左右两边的递归规模不一致，产生最坏时间复杂度</span></span><br><span class=\"line\">        swap(arr, left, (<span class=\"keyword\">int</span>) (Math.random() * (right - left + <span class=\"number\">1</span>) + left));</span><br><span class=\"line\"> </span><br><span class=\"line\">        T base = arr[left];<span class=\"comment\">//基准值，每次都把这个基准值抛出去，看成[left+1.....right]左闭右闭区间的排序</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//三路快排分为下面这三个路(区间)</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = left; <span class=\"comment\">// left表示，[lleft...left) 左闭右开区间里的数都比base小</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = right;<span class=\"comment\">// left表示，(rright...right] 左开右闭区间里的数都比base大</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur = i;<span class=\"comment\">//用cur来遍历数组。[left...cur)左闭右开区间里的数都等于base</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur &lt;= j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[cur].compareTo(base) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                cur++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[cur].compareTo(base) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                swap(arr, cur++, i++);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                swap(arr, cur, j--);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;i - <span class=\"number\">1</span>, j + <span class=\"number\">1</span>&#125;;<span class=\"comment\">//[i...j]都等于base,子问题就只需要解决i左边和j右边就行了</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(Object[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != j) &#123;</span><br><span class=\"line\">            Object temp = arr[i];</span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArr</span><span class=\"params\">(Object[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object o : arr) &#123;</span><br><span class=\"line\">            System.out.print(o);</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">        Integer[] arr = &#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//3   5   1   7   2   9   8   0   4   6</span></span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\"> </span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//0   1   2   3   4   5   6   7   8   9</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","more":"<p>快速排序及优化</p>\n<hr>\n<p>快速排序算法通过多次比较和交换来实现排序，其排序流程如下： </p>\n<p>(1)首先设定一个分界值，通过该分界值将数组分成左右两部分。</p>\n<p>(2)将大于或等于分界值的数据集中到数组右边，小于分界值的数据集中到数组的左边。此时，左边部分中各元素都小于或等于分界值，而右边部分中各元素都大于或等于分界值。</p>\n<p>(3)然后，左边和右边的数据可以独立排序。对于左侧的数组数据，又可以取一个分界值，将该部分数据分成左右两部分，同样在左边放置较小值，右边放置较大值。右侧的数组数据也可以做类似处理。</p>\n<p>(4)重复上述过程，可以看出，这是一个递归定义。通过递归将左侧部分排好序后，再递归排好右侧部分的顺序。当左、右两个部分各数据排序完成后，整个数组的排序也就完成了。</p>\n<h1 id=\"快速排序及优化-Java实现\"><a href=\"#快速排序及优化-Java实现\" class=\"headerlink\" title=\"快速排序及优化(Java实现)\"></a><a href=\"https://www.cnblogs.com/noKing/p/7922397.html\" target=\"_blank\" rel=\"noopener\">快速排序及优化(Java实现)</a></h1><h2 id=\"一-普通快速排序\"><a href=\"#一-普通快速排序\" class=\"headerlink\" title=\"一. 普通快速排序\"></a>一. 普通快速排序</h2><p>找一个基准值base，然后一趟排序后让base左边的数都小于base，base右边的数都大于等于base。再分为两个子数组的排序。如此递归下去。<sunfy-line></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr)</span> </span>&#123;</span><br><span class=\"line\">        sort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt;= right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = partition(arr, left, right);</span><br><span class=\"line\">        sort(arr, left, p - <span class=\"number\">1</span>);</span><br><span class=\"line\">        sort(arr, p + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        T base = arr[left];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = left;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = left + <span class=\"number\">1</span>; i &lt;= right; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (base.compareTo(arr[i]) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                swap(arr, j, i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(arr, left, j);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;<span class=\"comment\">//返回一躺排序后基准值的下角标</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(Object[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != j) &#123;</span><br><span class=\"line\">            Object temp = arr[i];</span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArr</span><span class=\"params\">(Object[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object o : arr) &#123;</span><br><span class=\"line\">            System.out.print(o);</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">        Integer[] arr = &#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//3   5   1   7   2   9   8   0   4   6</span></span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//0   1   2   3   4   5   6   7   8   9</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-快速排序优化：随机选取基准值base\"><a href=\"#二-快速排序优化：随机选取基准值base\" class=\"headerlink\" title=\"二. 快速排序优化：随机选取基准值base\"></a>二. 快速排序优化：随机选取基准值base</h2><p>在数组几乎有序时，快排性能不好（因为每趟排序后，左右两个子递归规模相差悬殊，大的那部分最后很可能会达到O(n^2)）。</p>\n<p>解决：基准值随机地选取，而不是每次都取第一个数。这样就不会受“几乎有序的数组”的干扰了。但是对“几乎乱序的数组”的排序性能可能会稍微下降，至少多了排序前交换的那部分，乱序时这个交换没有意义…有很多“运气”成分..</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr)</span> </span>&#123;</span><br><span class=\"line\">        sort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt;= right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = partition(arr, left, right);</span><br><span class=\"line\">        sort(arr, left, p - <span class=\"number\">1</span>);</span><br><span class=\"line\">        sort(arr, p + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//排序前，先让基准值和随机的一个数进行交换。这样，基准值就有随机性。</span></span><br><span class=\"line\">        <span class=\"comment\">//就不至于在数组相对有序时，导致左右两边的递归规模不一致，产生最坏时间复杂度</span></span><br><span class=\"line\">        swap(arr,left,(<span class=\"keyword\">int</span>)(Math.random()*(right - left + <span class=\"number\">1</span>)+left));</span><br><span class=\"line\"> </span><br><span class=\"line\">        T base = arr[left];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = left;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = left + <span class=\"number\">1</span>; i &lt;= right; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (base.compareTo(arr[i]) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                swap(arr, j, i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(arr, left, j);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;<span class=\"comment\">//返回一躺排序后，基准值的下角标</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(Object[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != j) &#123;</span><br><span class=\"line\">            Object temp = arr[i];</span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArr</span><span class=\"params\">(Object[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object o : arr) &#123;</span><br><span class=\"line\">            System.out.print(o);</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">        Integer[] arr = &#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//3   5   1   7   2   9   8   0   4   6</span></span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//0   1   2   3   4   5   6   7   8   9</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-快速排序继续优化：配合着使用插入排序\"><a href=\"#三-快速排序继续优化：配合着使用插入排序\" class=\"headerlink\" title=\"三. 快速排序继续优化：配合着使用插入排序\"></a>三. 快速排序继续优化：配合着使用插入排序</h2><p>快排是不断减小问题规模来解决子问题的，需要不断递归。但是递归到规模足够小时，如果继续采用这种 不稳定+递归 的方式执行下去，效率不见得会很好。</p>\n<p>所以当问题规模较小时，近乎有序时，插入排序表现的很好。Java自带的Arrays.sort()里经常能看到这样的注释：“Use insertion sort on tiny arrays”，“Insertion sort on smallest arrays”</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr)</span> </span>&#123;</span><br><span class=\"line\">        sort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr   待排序的数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left  左闭</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right 右闭</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k     当快排递归到子问题的规模 &lt;= k 时，采用插入排序优化</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;   泛型，待排序可比较类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 规模小时采用插入排序</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right - left &lt;= k) &#123;</span><br><span class=\"line\">            insertionSort(arr, left, right);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = partition(arr, left, right);</span><br><span class=\"line\">        sort(arr, left, p - <span class=\"number\">1</span>, k);</span><br><span class=\"line\">        sort(arr, p + <span class=\"number\">1</span>, right, k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertionSort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = l + <span class=\"number\">1</span>; i &lt;= r; i++) &#123;</span><br><span class=\"line\">            T cur = arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; j &gt;= <span class=\"number\">0</span> &amp;&amp; cur.compareTo(arr[j]) &lt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//排序前，先让基准值和随机的一个数进行交换。这样，基准值就有随机性。</span></span><br><span class=\"line\">        <span class=\"comment\">//就不至于在数组相对有序时，导致左右两边的递归规模不一致，产生最坏时间复杂度</span></span><br><span class=\"line\">        swap(arr, left, (<span class=\"keyword\">int</span>) (Math.random() * (right - left + <span class=\"number\">1</span>) + left));</span><br><span class=\"line\"> </span><br><span class=\"line\">        T base = arr[left];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = left;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = left + <span class=\"number\">1</span>; i &lt;= right; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (base.compareTo(arr[i]) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                swap(arr, j, i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(arr, left, j);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;<span class=\"comment\">//返回一躺排序后，基准值的下角标</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(Object[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != j) &#123;</span><br><span class=\"line\">            Object temp = arr[i];</span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArr</span><span class=\"params\">(Object[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object o : arr) &#123;</span><br><span class=\"line\">            System.out.print(o);</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">        Integer[] arr = &#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//3   5   1   7   2   9   8   0   4   6</span></span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//0   1   2   3   4   5   6   7   8   9</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四-快速排序继续优化：两路快排\"><a href=\"#四-快速排序继续优化：两路快排\" class=\"headerlink\" title=\"四. 快速排序继续优化：两路快排\"></a>四. 快速排序继续优化：两路快排</h2><p>在最开始的普通快速排序说过，让基准值base左边的都比base小，而base右边的都大于等于base。等于base的这些会聚集到右侧(或者稍微改改大小关系就会聚集到左侧)。总之就会聚集到一边。这样在数组中重复数字很多的时候，就又会导致两边子递归规模差距悬殊的情况。这时想把等于base的那些数分派到base两边，而不是让他们聚集到一起。</p>\n<p>（注：测试代码的时候，最好把插入排序那部分注视掉，向我下面代码中那样…不然数据量小于k=16的时候执行的是插入排序…..）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr)</span> </span>&#123;</span><br><span class=\"line\">        sort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr   待排序的数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left  左闭</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right 右闭</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k     当快排递归到子问题的规模 &lt;= k 时，采用插入排序优化</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;   泛型，待排序可比较类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 规模小时采用插入排序</span></span><br><span class=\"line\"><span class=\"comment\">//        if (right - left &lt;= k) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            insertionSort(arr, left, right);</span></span><br><span class=\"line\"><span class=\"comment\">//            return;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt;= right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = partition(arr, left, right);</span><br><span class=\"line\">        sort(arr, left, p - <span class=\"number\">1</span>, k);</span><br><span class=\"line\">        sort(arr, p + <span class=\"number\">1</span>, right, k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertionSort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = l + <span class=\"number\">1</span>; i &lt;= r; i++) &#123;</span><br><span class=\"line\">            T cur = arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; j &gt;= <span class=\"number\">0</span> &amp;&amp; cur.compareTo(arr[j]) &lt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//排序前，先让基准值和随机的一个数进行交换。这样，基准值就有随机性。</span></span><br><span class=\"line\">        <span class=\"comment\">//就不至于在数组相对有序时，导致左右两边的递归规模不一致，产生最坏时间复杂度</span></span><br><span class=\"line\">        swap(arr, left, (<span class=\"keyword\">int</span>) (Math.random() * (right - left + <span class=\"number\">1</span>) + left));</span><br><span class=\"line\"> </span><br><span class=\"line\">        T base = arr[left];<span class=\"comment\">//基准值，每次都把这个基准值抛出去，看成[left+1.....right]左闭右闭区间的排序</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = left + <span class=\"number\">1</span>; <span class=\"comment\">//对于上一行提到的[left+1.....right]区间，i表示 [left+1......i)左闭右开区间的值都小于等于base。</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = right;<span class=\"comment\">//对于上二行提到的[left+1.....right]区间，j表示 (j......right]左开右闭区间的值都大于等于base。</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//从左到右扫描，扫描出第一个比base大的元素，然后i停在那里。</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt;= right &amp;&amp; arr[i].compareTo(base) &lt; <span class=\"number\">0</span>) i++;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">//从右到左扫描，扫描出第一个比base小的元素，然后j停在那里。</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt;= left &amp;&amp; arr[j].compareTo(base) &gt; <span class=\"number\">0</span>) j--;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; j) &#123;<span class=\"comment\">//虽说是i&gt;j，但其实都是以j=i-1为条件结束的</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(arr, i++, j--);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        swap(arr, left, j);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;<span class=\"comment\">//返回一躺排序后，基准值的下角标</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(Object[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != j) &#123;</span><br><span class=\"line\">            Object temp = arr[i];</span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArr</span><span class=\"params\">(Object[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object o : arr) &#123;</span><br><span class=\"line\">            System.out.print(o);</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">        Integer[] arr = &#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//3   5   1   7   2   9   8   0   4   6</span></span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//0   1   2   3   4   5   6   7   8   9</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五-快速排序继续优化：两路快排-不用swap-用直接赋值\"><a href=\"#五-快速排序继续优化：两路快排-不用swap-用直接赋值\" class=\"headerlink\" title=\"五. 快速排序继续优化：两路快排 不用swap, 用直接赋值\"></a>五. 快速排序继续优化：两路快排 不用swap, 用直接赋值</h2><p>上面的两路在找到大于base的值和小于base的值时，用的是swap()方法来进行交换。两数交换涉及到第三个变量temp的操作，多了读写操作。接下来用直接赋值的方法，把小于的放到右边，大于的放到左边，当i和j相遇时，那个位置就是base该放的地方。至此一趟完成。递归即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr)</span> </span>&#123;</span><br><span class=\"line\">        sort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr   待排序的数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left  左闭</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right 右闭</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k     当快排递归到子问题的规模 &lt;= k 时，采用插入排序优化</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;   泛型，待排序可比较类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 规模小时采用插入排序</span></span><br><span class=\"line\"><span class=\"comment\">//        if (right - left &lt;= k) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            insertionSort(arr, left, right);</span></span><br><span class=\"line\"><span class=\"comment\">//            return;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt;= right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = partition(arr, left, right);</span><br><span class=\"line\">        sort(arr, left, p - <span class=\"number\">1</span>, k);</span><br><span class=\"line\">        sort(arr, p + <span class=\"number\">1</span>, right, k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertionSort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = l + <span class=\"number\">1</span>; i &lt;= r; i++) &#123;</span><br><span class=\"line\">            T cur = arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; j &gt;= <span class=\"number\">0</span> &amp;&amp; cur.compareTo(arr[j]) &lt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//排序前，先让基准值和随机的一个数进行交换。这样，基准值就有随机性。</span></span><br><span class=\"line\">        <span class=\"comment\">//就不至于在数组相对有序时，导致左右两边的递归规模不一致，产生最坏时间复杂度</span></span><br><span class=\"line\">        swap(arr, left, (<span class=\"keyword\">int</span>) (Math.random() * (right - left + <span class=\"number\">1</span>) + left));</span><br><span class=\"line\"> </span><br><span class=\"line\">        T base = arr[left];<span class=\"comment\">//基准值，每次都把这个基准值抛出去，看成[left+1.....right]左闭右闭区间的排序</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = left; <span class=\"comment\">//对于上一行提到的[left+1.....right]区间，i表示 [left+1......i)左闭右开区间的值都小于等于base。</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = right;<span class=\"comment\">//对于上二行提到的[left+1.....right]区间，j表示 (j......right]左开右闭区间的值都大于等于base。</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//从右到左扫描，扫描出第一个比base小的元素，然后j停在那里。</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt; i &amp;&amp; arr[j].compareTo(base) &gt; <span class=\"number\">0</span>) j--;</span><br><span class=\"line\"> </span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">//从左到右扫描，扫描出第一个比base大的元素，然后i停在那里。</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; arr[i].compareTo(base) &lt; <span class=\"number\">0</span>) i++;</span><br><span class=\"line\"> </span><br><span class=\"line\">            arr[j] = arr[i];</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        arr[j] = base;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;<span class=\"comment\">//返回一躺排序后，基准值的下角标</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(Object[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != j) &#123;</span><br><span class=\"line\">            Object temp = arr[i];</span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArr</span><span class=\"params\">(Object[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object o : arr) &#123;</span><br><span class=\"line\">            System.out.print(o);</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">        Integer[] arr = &#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//3   5   1   7   2   9   8   0   4   6</span></span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\"> </span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//0   1   2   3   4   5   6   7   8   9</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"六-快速排序继续优化：当大量数据，且重复数多时，用三路快排\"><a href=\"#六-快速排序继续优化：当大量数据，且重复数多时，用三路快排\" class=\"headerlink\" title=\"六. 快速排序继续优化：当大量数据，且重复数多时，用三路快排\"></a>六. 快速排序继续优化：当大量数据，且重复数多时，用三路快排</h2><p>把数组分为三路，第一路都比base小，第二路都等于base，第三路都大于base。</p>\n<p>用指针从前到后扫描，如果：</p>\n<p>1.cur指向的数小于base，那么：交换arr[cur]和arr[i]的值，然后i++,cur++。</p>\n<p>2.cur指向的数等于base, 那么：cur++</p>\n<p>3.cur指向的数大于base，那么：交换arr[cur]和arr[j]的值，然后j—。</p>\n<p>当cur &gt; j的时候说明三路都已经完成。</p>\n<p><img src=\"../../../../img/802-qualkSort/1251417-20171130124622198-29578695.bmp\" alt=\"1251417-20171130124622198-29578695\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr)</span> </span>&#123;</span><br><span class=\"line\">        sort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr   待排序的数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left  左闭</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right 右闭</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k     当快排递归到子问题的规模 &lt;= k 时，采用插入排序优化</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;   泛型，待排序可比较类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 规模小时采用插入排序</span></span><br><span class=\"line\"><span class=\"comment\">//        if (right - left &lt;= k) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            insertionSort(arr, left, right);</span></span><br><span class=\"line\"><span class=\"comment\">//            return;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt;= right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ret = partition(arr, left, right);</span><br><span class=\"line\">        sort(arr, left, ret[<span class=\"number\">0</span>], k);</span><br><span class=\"line\">        sort(arr, ret[<span class=\"number\">1</span>], right, k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertionSort</span><span class=\"params\">(T[] arr, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = l + <span class=\"number\">1</span>; i &lt;= r; i++) &#123;</span><br><span class=\"line\">            T cur = arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; j &gt;= <span class=\"number\">0</span> &amp;&amp; cur.compareTo(arr[j]) &lt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr   待排序的数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left  待排序数组的左边界</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right 待排序数组的右边界</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;   泛型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T extends Comparable&lt;? <span class=\"keyword\">super</span> T&gt;&gt; <span class=\"keyword\">int</span>[] partition(T[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//排序前，先让基准值和随机的一个数进行交换。这样，基准值就有随机性。</span></span><br><span class=\"line\">        <span class=\"comment\">//就不至于在数组相对有序时，导致左右两边的递归规模不一致，产生最坏时间复杂度</span></span><br><span class=\"line\">        swap(arr, left, (<span class=\"keyword\">int</span>) (Math.random() * (right - left + <span class=\"number\">1</span>) + left));</span><br><span class=\"line\"> </span><br><span class=\"line\">        T base = arr[left];<span class=\"comment\">//基准值，每次都把这个基准值抛出去，看成[left+1.....right]左闭右闭区间的排序</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//三路快排分为下面这三个路(区间)</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = left; <span class=\"comment\">// left表示，[lleft...left) 左闭右开区间里的数都比base小</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = right;<span class=\"comment\">// left表示，(rright...right] 左开右闭区间里的数都比base大</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur = i;<span class=\"comment\">//用cur来遍历数组。[left...cur)左闭右开区间里的数都等于base</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur &lt;= j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[cur].compareTo(base) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                cur++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[cur].compareTo(base) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                swap(arr, cur++, i++);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                swap(arr, cur, j--);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;i - <span class=\"number\">1</span>, j + <span class=\"number\">1</span>&#125;;<span class=\"comment\">//[i...j]都等于base,子问题就只需要解决i左边和j右边就行了</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(Object[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != j) &#123;</span><br><span class=\"line\">            Object temp = arr[i];</span><br><span class=\"line\">            arr[i] = arr[j];</span><br><span class=\"line\">            arr[j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArr</span><span class=\"params\">(Object[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object o : arr) &#123;</span><br><span class=\"line\">            System.out.print(o);</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"\\t\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">        Integer[] arr = &#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//3   5   1   7   2   9   8   0   4   6</span></span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\"> </span><br><span class=\"line\">        printArr(arr);<span class=\"comment\">//0   1   2   3   4   5   6   7   8   9</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","next":{"title":"Java面试题002-说一下ThreadLocal","path":"api/articles/resource-java-Base-002ThreadLocal.json","image":"/img/header_img/2.jpg","num_read":1792,"num_like":698,"num_collection":608,"num_comments":69},"prev":{"title":"Java面试题003-说一下HashMap的put方法","path":"api/articles/resource-java-Base-003HashMap-put.json","image":"/img/header_img/3.jpg","num_read":209,"num_like":320,"num_collection":627,"num_comments":118},"categories":[{"name":"算法","path":"api/categories/算法.json","pathContent":"api/categories/算法","description":"为了更有效的处理数据，提高数据运算效率。","cover":"https://sunfy9.gitee.io/project/photo/project/algorithm.png"}],"tags":[]}