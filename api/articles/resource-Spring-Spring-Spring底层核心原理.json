{"title":"Spring底层核心原理","num_read":833,"num_like":449,"num_collection":418,"num_comments":210,"slug":"resource-Spring-Spring-Spring底层核心原理","date":"2021-09-03T16:00:00.000Z","img":"/img/header_img/spring/Principles.PNG","_id":"cl8ds69wq000uw3lgdhhj0mx0","project":"Spring","subtitle":"Spring源码分析，Spring全链条理解Spring的源码，先从宏观的角度认识下Spring","site":{"data":{}},"updated":"2022-09-20T02:16:46.953Z","author":"Sunfy","comments":true,"path":"api/articles/resource-Spring-Spring-Spring底层核心原理.json","webPath":"2021/09/04/resource-Spring-Spring-Spring底层核心原理/","permalink":"https://sunfy9.gitee.io/2021/09/04/resource-Spring-Spring-Spring%E5%BA%95%E5%B1%82%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/","excerpt":null,"covers":["../../../../img/Spring底层核心原理/image-20210906110715684.png","../../../../img/Spring底层核心原理/image-20210906110841507.png","../../../../img/Spring底层核心原理/image-20210906110428991.png","../../../../img/Spring底层核心原理/image-20210906110040192.png","../../../../img/Spring底层核心原理/image-20210906110239801.png"],"keywords":"sunfy, hexo-theme-snail","content":"<h1 id=\"Spring如何创建一个对象\"><a href=\"#Spring如何创建一个对象\" class=\"headerlink\" title=\"Spring如何创建一个对象\"></a>Spring如何创建一个对象</h1><p>首先来看一个类<code>org.springframework.context.support.ClassPathXmlApplicationContext</code></p>\n<p>这个类就是我们一开始使用Spring的时候会首先认识的一个类，在Spring 3的时候增加了一个<code>org.springframework.context.annotation.AnnotationConfigApplicationContext</code>, 经常使用Spring的人都应该知道第一个类的作用，创建了spring的容器，并指定了扫描路径。其实这两个类的作用基本相同，只不过在一些具体形式上有一些区别，比如前者主要是去读取指定路径下的<code>xml</code>配置文件，后者则是通过java配置类的形式去配置Spring容器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassPathXmlApplicationContext context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"classpath:spring.xml\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(MainConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br></pre></td></tr></table></figure>\n<p>这里之所以提及<code>AnnotationConfigApplicationContext</code>，是因为我们目前主流使用的<code>SpringBoot</code>就是基于这个类来实现的。</p>\n<p>通过以上代码后，我们通常就可以使用<code>context</code>容器对象通过<code>getBean</code>方法去获取对象，在这个过程中就创建了Bean对象。那接下来就了解Spring是如何创建一个对象的。</p>\n<p><font color=red>那么此处有一个问题可以思考下：通过Spring容器获得的Bean和java中<code>new xxx</code>得到的bean有什么区别呢？</font><sunfy-line></p>\n<h1 id=\"Spring中bean的创建生命周期\"><a href=\"#Spring中bean的创建生命周期\" class=\"headerlink\" title=\"Spring中bean的创建生命周期\"></a>Spring中bean的创建生命周期</h1><p><code>xxx.class</code> —&gt; 判断使用哪个构造方法 —&gt; 普通对象 —&gt; Aware回调 —&gt; 依赖注入(属性赋值<code>@Autowrite</code>)  —&gt; 初始化前(<code>@PostConstruct</code>) —&gt; 初始化 ( <code>InitializingBean</code>)—&gt; 初始化后(AOP) —&gt; AOP之后会生成一个代理对象 —&gt; Bean</p>\n<ol>\n<li>Spring扫描class得到BeanDefinition</li>\n<li>根据得到的BeanDefinition去生成bean</li>\n<li>首先根据class推断构造方法</li>\n<li>根据推断出来的构造方法，反射，得到一个对象（暂时叫做原始对象）</li>\n<li>填充原始对象中的属性（依赖注入）</li>\n<li>如果原始对象中的某个方法被AOP了，那么则需要根据原始对象生成一个代理对象</li>\n<li>把最终生成的代理对象放入单例池（源码中叫做singletonObjects）中，下次getBean时就直接从单例池拿即可</li>\n</ol>\n<h2 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a><strong>依赖注入</strong></h2><p>伪代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过car对象获取其属性，并遍历属性中查找带有Autowired注解的</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Field field : car.getClass().getFields()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (field.isAnnotationPresent(Autowired<span class=\"class\">.<span class=\"keyword\">class</span>)) </span>&#123;</span><br><span class=\"line\">      \t<span class=\"comment\">// 给属性进行赋值（赋值的值从何而来？？？）</span></span><br><span class=\"line\">\t\tfield.set(xxxx, ????)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化前\"><a href=\"#初始化前\" class=\"headerlink\" title=\"初始化前\"></a><strong>初始化前</strong></h2><p><code>@PostConstruct</code>注解，初始化前调用，可以对bean进行一些赋值工作，使用和依赖注入类似 </p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a><strong>初始化</strong></h2><p>判断当前bean是否实现了<code>InitializingBean</code>， 通过 <code>instance of InitializingBean</code>判断是否实现接口，实现了该接口后，就将当前bean转换成<code>InitializingBean</code>对象，然后通过该对象去调用实现接口需要重写的<code>afterPropertiesSet()</code>方法</p>\n<p>Spring源码中对用的位置 <code>AbstractAutowireCapableBeanFactory.initializeBean(String beanName, Object bean, @Nullable RootBeanDefinition mbd)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractAutowireCapableBeanFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractBeanFactory</span></span></span><br><span class=\"line\"><span class=\"class\">\t\t<span class=\"keyword\">implements</span> <span class=\"title\">AutowireCapableBeanFactory</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeInitMethods</span><span class=\"params\">(String beanName, Object bean, @Nullable RootBeanDefinition mbd)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//判断我们的容器中是否实现了InitializingBean接口</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> isInitializingBean = (bean <span class=\"keyword\">instanceof</span> InitializingBean);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isInitializingBean &amp;&amp; (mbd == <span class=\"keyword\">null</span> || !mbd.isExternallyManagedInitMethod(<span class=\"string\">\"afterPropertiesSet\"</span>))) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.trace(<span class=\"string\">\"Invoking afterPropertiesSet() on bean with name '\"</span> + beanName + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Spring的安全管理器</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (System.getSecurityManager() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tAccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\t\t((InitializingBean) bean).afterPropertiesSet();</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;, getAccessControlContext());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> pae.getException();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//回调InitializingBean的afterPropertiesSet()方法</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 这块就是上述关键的位置</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 这块就是上述关键的位置</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 这块就是上述关键的位置</span></span><br><span class=\"line\">\t\t\t\t((InitializingBean) bean).afterPropertiesSet();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (mbd != <span class=\"keyword\">null</span> &amp;&amp; bean.getClass() != NullBean<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//我们beanclass中看是否有自己定义的init方法</span></span><br><span class=\"line\">\t\t\tString initMethodName = mbd.getInitMethodName();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//判断自定义的init方法名称不叫afterPropertiesSet</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (StringUtils.hasLength(initMethodName) &amp;&amp;</span><br><span class=\"line\">\t\t\t\t\t!(isInitializingBean &amp;&amp; <span class=\"string\">\"afterPropertiesSet\"</span>.equals(initMethodName)) &amp;&amp;</span><br><span class=\"line\">\t\t\t\t\t!mbd.isExternallyManagedInitMethod(initMethodName)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//调用我们自己的初始化方法</span></span><br><span class=\"line\">\t\t\t\tinvokeCustomInitMethod(beanName, bean, mbd);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>大致的过程就是上述的，Spring源码中会比这个更多，支持更多的扩展点，比如<code>Aware</code>、<code>beanPostProcess</code>，就是spring提供的很多的扩展点，以及一些常见主流款框架如何通过扩展点集成到Spring中，见<a href=\"/2021/08/18/resource-file-Interview-105-springAbout/#Spring扩展点\">本站链接</a></p>\n<h1 id=\"手写Spring\"><a href=\"#手写Spring\" class=\"headerlink\" title=\"手写Spring\"></a>手写Spring</h1><p>本代码中包含了Spring读取配置文件，实现了<code>@ComponentScan</code>注解，读取指定路径下的所有文件。读取所有文件下的<code>Component</code>标记的类。<code>@Scope</code>注解实现简单的单例bean和原型bean。此处的构造方法使用默认的无参构造方法，并 没有实现复杂判断构造方法的功能。生成普通对象后，实现了简单的<code>BeanNameAware</code>扩展点，并实现了基于<code>@Autowrited</code>依赖注入。</p>\n<p>实现<code>InitializingBean</code>接口，在创建bean的时候，如果实现了<code>InitializingBean</code>接口，会自动执行<code>afterPropertiesSet</code>方法。</p>\n<p>实现<code>BeanPostProcessor</code>接口，bean的后置处理器，两个默认的方法<code>postProcessBeforeInitialization</code>、<code>postProcessAfterInitialization</code>。</p>\n<p>理解了bean的创建过程，bean从读取class文件、通过<code>ClassLoader</code>进行类的加载、创建<code>BeanDefinition</code>对象、保存类的<code>Scope</code>属性保存至<code>BeanDefinition</code>、将<code>BeanDefinition</code>放入Map缓存中、在获取bean的时候，通过scope不同属性创建bean，并将创建的bean保存至相应的map缓存池中。创建bean的时候实现了依赖注入（属性赋值）、判断<code>Aware</code>接口、<code>BeanPostProcessor</code>后置处理器初始化前、<code>InitializingBean</code>初始化接口、<code>`BeanPostProcessor</code>后置处理器初始化后。</p>\n<p><code>BeanPostProcessor</code>类似AOP的实现过程。</p>\n<p>此处只贴出了<code>Application</code>的代码，具体的接口代码就不贴了，那些就是一些注解和接口，很简单，不会的直接从Spring中取一下也可以。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.spring;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.spring.annotations.Autowrited;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.spring.annotations.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.spring.annotations.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.spring.annotations.Scope;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.beans.Introspector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> sunfy</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span> SunfyAppliction</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021-9-4 21:20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SunfyAppliction</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存所有对象的一定定义信息</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashMap&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashMap&lt;String, Object&gt; singletonMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;BeanPostProcessor&gt; beanPostProcessorList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SunfyAppliction</span><span class=\"params\">(Class configClass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(this.getClass().getName() + \"构造方法开始运行！\");</span></span><br><span class=\"line\">        <span class=\"comment\">// 扫描路径下的class</span></span><br><span class=\"line\">        scan(configClass);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//for (Map.Entry&lt;String, BeanDefinition&gt; entry : beanDefinitionMap.entrySet()) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    String beanName = entry.getKey();</span></span><br><span class=\"line\">        <span class=\"comment\">//    BeanDefinition beanDefinition = entry.getValue();</span></span><br><span class=\"line\">        <span class=\"comment\">//    if (beanDefinition.getScope().equals(\"singleton\")) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">//        Object bean = createBean(beanName, beanDefinition);</span></span><br><span class=\"line\">        <span class=\"comment\">//        singletonMap.put(beanName, bean);</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scan</span><span class=\"params\">(Class configClass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前闯入的类是否有ComponentScan注解</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (configClass.isAnnotationPresent(ComponentScan<span class=\"class\">.<span class=\"keyword\">class</span>)) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获得注解中配置的路径</span></span><br><span class=\"line\">            ComponentScan componentScan = (ComponentScan) configClass.getAnnotation(ComponentScan<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">            String path = componentScan.value();</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(\"配置文件路径\" + path);</span></span><br><span class=\"line\">            <span class=\"comment\">// 处理文件路径</span></span><br><span class=\"line\">            path = path.replace(<span class=\"string\">\".\"</span>, <span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(\"配置文件路径替换后\" + path);</span></span><br><span class=\"line\">            <span class=\"comment\">// 获得ClassLoader</span></span><br><span class=\"line\">            ClassLoader classLoader = SunfyAppliction<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getClassLoader</span>()</span>;</span><br><span class=\"line\">            URL resource = classLoader.getResource(path);</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(\"通过ClassLoader获取完整文件路径\" + resource.getPath());</span></span><br><span class=\"line\">            File file = <span class=\"keyword\">new</span> File(resource.getFile());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 开始处理获取的文件</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (file.isDirectory()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (File f :</span><br><span class=\"line\">                        file.listFiles()) &#123;</span><br><span class=\"line\">                    String absolutePath = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (f.isDirectory()) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//System.out.println(\"当前问文件夹，跳过\" + f.getName());</span></span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (File f1 :</span><br><span class=\"line\">                                f.listFiles()) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//System.out.println(\"获取到的文件为：\" + f.getPath());</span></span><br><span class=\"line\">                            absolutePath = f1.getAbsolutePath();</span><br><span class=\"line\">                            <span class=\"comment\">//System.out.println(\"获取到的文件绝对路径为：\" + absolutePath);</span></span><br><span class=\"line\">                            absolutePath = absolutePath.substring(absolutePath.indexOf(<span class=\"string\">\"com\"</span>), absolutePath.indexOf(<span class=\"string\">\".class\"</span>));</span><br><span class=\"line\">                            absolutePath = absolutePath.replace(<span class=\"string\">\"\\\\\"</span>, <span class=\"string\">\".\"</span>);</span><br><span class=\"line\">                            <span class=\"comment\">//System.out.println(\"修改文件路径为：\" + absolutePath);</span></span><br><span class=\"line\">                            loadClass(classLoader, absolutePath);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//System.out.println(\"获取到的文件为：\" + f.getPath());</span></span><br><span class=\"line\">                        absolutePath = f.getAbsolutePath();</span><br><span class=\"line\">                        <span class=\"comment\">//System.out.println(\"获取到的文件绝对路径为：\" + absolutePath);</span></span><br><span class=\"line\">                        absolutePath = absolutePath.substring(absolutePath.indexOf(<span class=\"string\">\"com\"</span>), absolutePath.indexOf(<span class=\"string\">\".class\"</span>));</span><br><span class=\"line\">                        absolutePath = absolutePath.replace(<span class=\"string\">\"\\\\\"</span>, <span class=\"string\">\".\"</span>);</span><br><span class=\"line\">                        <span class=\"comment\">//System.out.println(\"修改文件路径为：\" + absolutePath);</span></span><br><span class=\"line\">                        loadClass(classLoader, absolutePath);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"当前路径不存在\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"当前配置类不存在ComponentScan注解\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">loadClass</span><span class=\"params\">(ClassLoader classLoader, String absolutePath)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 准备通过类加载器加载文件</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class&lt;?&gt; aClass = classLoader.loadClass(absolutePath);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (aClass.isAnnotationPresent(Component<span class=\"class\">.<span class=\"keyword\">class</span>)) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 判断是否有实现了BeanPostProcessor接口</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (BeanPostProcessor<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">isAssignableFrom</span>(<span class=\"title\">aClass</span>)) </span>&#123;</span><br><span class=\"line\">                    BeanPostProcessor instance = (BeanPostProcessor) aClass.getConstructor().newInstance();</span><br><span class=\"line\">                    beanPostProcessorList.add(instance);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                Component componentAnnotation = aClass.getAnnotation(Component<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (componentAnnotation == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"该类没有添加Component注解，不处理\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                String beanName = componentAnnotation.value();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"\"</span>.equals(beanName)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                    获得一个字符串并将它转换成普通 java 变量名称大写形式的实用工具方法。</span></span><br><span class=\"line\"><span class=\"comment\">                    这通常意味着将首字符从大写转换成小写，但在（不平常的）特殊情况下，</span></span><br><span class=\"line\"><span class=\"comment\">                    当有多个字符且第一个和第二个字符都是大写字符时，不执行任何操作。</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    beanName = Introspector.decapitalize(aClass.getSimpleName());</span><br><span class=\"line\">                    <span class=\"comment\">//System.out.println(\"没有配置value，自动获取的名字为：\" + beanName);</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// beanDefinition，Spring中很关键的一个概念</span></span><br><span class=\"line\">                BeanDefinition beanDefinition = <span class=\"keyword\">new</span> BeanDefinition();</span><br><span class=\"line\">                beanDefinition.setType(aClass);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 根据Scope注解设置bean的属性</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (aClass.isAnnotationPresent(Scope<span class=\"class\">.<span class=\"keyword\">class</span>)) </span>&#123;</span><br><span class=\"line\">                    Scope scope = aClass.getAnnotation(Scope<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">                    String value = scope.value();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"string\">\"\"</span>.equals(value)) value = <span class=\"string\">\"singleton\"</span>;</span><br><span class=\"line\">                    beanDefinition.setScope(value);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    beanDefinition.setScope(<span class=\"string\">\"singleton\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 将bean放在一个缓存Map中供后续获取使用，此时只是放入了一个bean定义，并没有真正的创建bean对象</span></span><br><span class=\"line\">                beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getBean</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!beanDefinitionMap.containsKey(beanName)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不存在当前bean定义，抛出异常</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Object bean = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BeanDefinition beanDefinition = beanDefinitionMap.get(beanName);</span><br><span class=\"line\">        <span class=\"comment\">// 根据Scope的属性创建bean</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"singleton\"</span>.equals(beanDefinition.getScope())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (singletonMap.containsKey(beanName)) &#123;</span><br><span class=\"line\">                bean = singletonMap.get(beanName);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                bean = createBean(beanName, beanDefinition);</span><br><span class=\"line\">                singletonMap.put(beanName, bean);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            bean = createBean(beanName, beanDefinition);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">createBean</span><span class=\"params\">(String beanName, BeanDefinition beanDefinition)</span> </span>&#123;</span><br><span class=\"line\">        Class type = beanDefinition.getType();</span><br><span class=\"line\">        Object instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 通过反射创建对象</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 通过构造函数反射创建对象</span></span><br><span class=\"line\">            instance = type.getConstructor().newInstance();</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(\"基础对象创建成功\");</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 实现依赖注入（属性赋值）</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Field field :</span><br><span class=\"line\">                    type.getDeclaredFields()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//System.out.println(\"获取到的相关属性\" + field.getName());</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (field.isAnnotationPresent(Autowrited<span class=\"class\">.<span class=\"keyword\">class</span>)) </span>&#123;</span><br><span class=\"line\">                    field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    field.set(instance, getBean(field.getName()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 创建了bean之后，判断是否实现Aware接口，Spring一个重要的扩展点</span></span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(\"判断是否实现了Aware接口\");</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instance <span class=\"keyword\">instanceof</span> BeanNameAware) &#123;</span><br><span class=\"line\">                ((BeanNameAware) instance).setBeanName(beanName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Bean的后置处理器（Spirng中AOP采用的就是这种实现方式）-初始化前</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (BeanPostProcessor beanPostprocessor :</span><br><span class=\"line\">                    beanPostProcessorList) &#123;</span><br><span class=\"line\">                instance = beanPostprocessor.postProcessBeforeInitialization(instance, beanName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 创建bean之后，判断bean是否实现了InitializingBean接口，这也是Spring的一个重要的扩展点</span></span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(\"判断是否实现了InitializingBean接口\");</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instance <span class=\"keyword\">instanceof</span> InitializingBean) &#123;</span><br><span class=\"line\">                ((InitializingBean) instance).afterPropertiesSet();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Bean的后置处理器（Spirng中AOP采用的就是这种实现方式）-初始化后</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (BeanPostProcessor beanPostprocessor :</span><br><span class=\"line\">                    beanPostProcessorList) &#123;</span><br><span class=\"line\">                instance = beanPostprocessor.postProcessAfterInitialization(instance, beanName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><code>BeanPostProcessor</code>：这属于面向切面的扩展，针对具有默写共同点的类进行统一的扩展。</p>\n<p><code>Aware</code>：面向实现指定接口的类进行扩展。</p>\n<p><code>InitializingBean</code>：面向实现指定接口的类进行扩展。</p>\n<h2 id=\"BeanDefinition\"><a href=\"#BeanDefinition\" class=\"headerlink\" title=\"BeanDefinition\"></a><code>BeanDefinition</code></h2><p>表示Bean定义，<code>BeanDefinition</code>中存在很多属性用来描述一个Bean的特点。通常使用Bean标签（<code>&lt;Bean/&gt;</code>）、<code>@Bean注解</code>、<code>@Component（@Service、@COntroller）</code>等方式来声明一个bean，以上几种方式统称为申明式定义Bean，同时还可以使用编程式定义Bean，在Spring源码中更多的都是通过<code>BeanDefinition</code>来编程式的创建bean的。</p>\n<h2 id=\"BeanDefinitionReader\"><a href=\"#BeanDefinitionReader\" class=\"headerlink\" title=\"BeanDefinitionReader\"></a><code>BeanDefinitionReader</code></h2><p>Spring源码中提供的<code>BeanDefinition</code>读取器，这些我们通常不会使用到，但是在Spring源码中使用的很多。<code>AnnotatedBeanDefinitionReader</code>、<code>XmlBeanDefinitionReader</code>等。</p>\n<h2 id=\"ClassPathBeanDefinitionScanner\"><a href=\"#ClassPathBeanDefinitionScanner\" class=\"headerlink\" title=\"ClassPathBeanDefinitionScanner\"></a><code>ClassPathBeanDefinitionScanner</code></h2><p>扫描器，作用和<code>BeanDefinitionReader</code>类似，可以进行扫描，扫描某个包的路径，对扫描到的类进行解析。</p>\n<h2 id=\"BeanFactory\"><a href=\"#BeanFactory\" class=\"headerlink\" title=\"BeanFactory\"></a><code>BeanFactory</code></h2><p>表示Bean工厂，负责创建Bean，并且提供获取Bean的API。IOCbean工厂的顶级接口 定义一系列对bean的操作。</p>\n<p><img src=\"../../../../img/Spring底层核心原理/image-20210906110715684.png\" alt=\"image-20210906110715684\"></p>\n<p>而<code>ApplicationContext</code>是<code>BeanFactory</code>的一种，在Spring源码中，是这么定义的：</p>\n<p><img src=\"../../../../img/Spring底层核心原理/image-20210906110841507.png\" alt=\"image-20210906110841507\"></p>\n<p>首先，在Java中，接口是可以<strong>多继承</strong>的，我们发现<code>ApplicationContext</code>继承了<code>ListableBeanFactory</code>和<code>HierarchicalBeanFactory</code>，而<code>ListableBeanFactory</code>和<code>HierarchicalBeanFactory</code>都继承至<code>BeanFactory</code>，所以我们可以认为ApplicationContext继承了<code>BeanFactory</code>，<code>ApplicationContext</code>也是<code>BeanFactory</code>的一种，拥有<code>BeanFactory</code>支持的所有功能，不过<code>ApplicationContext</code>比<code>BeanFactory</code>更加强大，<code>ApplicationContext</code>还继承了其他接口，也就表示<code>ApplicationContext</code>还拥有其他功能，</p>\n<p>比如</p>\n<ul>\n<li><code>MessageSource</code>表示国际化，</li>\n<li><code>ApplicationEventPublisher</code>表示事件发布，</li>\n<li><code>EnvironmentCapable</code>表示获取环境变量，等等，关于ApplicationContext后面再详细讨论。</li>\n</ul>\n<p>在Spring的源码实现中，当我们new一个<code>ApplicationContext</code>时，其底层会new一个<code>BeanFactory</code>出来，当使用<code>ApplicationContext</code>的某些方法时，比如<code>getBean()</code>，底层调用的是<code>BeanFactory</code>的<code>getBean()</code>方法。</p>\n<p>在Spring源码中，<code>BeanFactory</code>接口存在一个非常重要的实现类是：<strong><code>DefaultListableBeanFactory</code>，也是非常核心的。</strong></p>\n<p>所以，我们可以直接来使用<strong><code>DefaultListableBeanFactory</code></strong>，而不用使用<code>ApplicationContext</code>的某个实现类，比如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DefaultListableBeanFactory beanFactory = <span class=\"keyword\">new</span> DefaultListableBeanFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">AbstractBeanDefinition beanDefinition = BeanDefinitionBuilder.genericBeanDefinition().getBeanDefinition();</span><br><span class=\"line\">beanDefinition.setBeanClass(User<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">beanFactory.registerBeanDefinition(<span class=\"string\">\"user\"</span>, beanDefinition);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(beanFactory.getBean(<span class=\"string\">\"user\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p><strong><code>DefaultListableBeanFactory</code>是非常强大的，支持很多功能，可以通过查看<code>DefaultListableBeanFactory</code>的类继承实现结构来看</strong></p>\n<p><img src=\"../../../../img/Spring底层核心原理/image-20210906110428991.png\" alt=\"image-20210906110428991\"></p>\n<p>它实现了很多接口，表示，它拥有很多功能：</p>\n<ol>\n<li><code>AliasRegistry</code>：支持别名功能，一个名字可以对应多个别名</li>\n<li><code>BeanDefinitionRegistry</code>：可以注册、保存、移除、获取某个<code>BeanDefinition</code></li>\n<li><code>BeanFactory</code>：Bean工厂，可以根据某个bean的名字、或类型、或别名获取某个Bean对象</li>\n<li><code>SingletonBeanRegistry</code>：可以直接注册、获取某个<strong>单例</strong>Bean</li>\n<li><code>SimpleAliasRegistry</code>：它是一个类，实现了<code>AliasRegistry</code>接口中所定义的功能，支持别名功能</li>\n<li><code>ListableBeanFactory</code>：在<code>BeanFactory</code>的基础上，增加了其他功能，可以获取所有<code>BeanDefinition</code>的<code>beanNames</code>，可以根据某个类型获取对应的<code>beanNames</code>，可以根据某个类型获取{类型：对应的Bean}的映射关系</li>\n<li><code>HierarchicalBeanFactory</code>：在<code>BeanFactory</code>的基础上，添加了获取父<code>BeanFactory</code>的功能</li>\n<li><code>DefaultSingletonBeanRegistry</code>：它是一个类，实现了<code>SingletonBeanRegistry</code>接口，拥有了直接注册、获取某个<strong>单例</strong>Bean的功能</li>\n<li><code>ConfigurableBeanFactory</code>：在<code>HierarchicalBeanFactory</code>和<code>SingletonBeanRegistry</code>的基础上，添加了设置父<code>BeanFactory</code>、类加载器（表示可以指定某个类加载器进行类的加载）、设置Spring EL表达式解析器（表示该<code>BeanFactory</code>可以解析EL表达式）、设置类型转化服务（表示该<code>BeanFactory</code>可以进行类型转化）、可以添加<code>BeanPostProcessor</code>（表示该<code>BeanFactory</code>支持Bean的后置处理器），可以合并<code>BeanDefinition</code>，可以销毁某个Bean等等功能</li>\n<li><code>FactoryBeanRegistrySupport</code>：支持了<code>FactoryBean</code>的功能</li>\n<li><code>AutowireCapableBeanFactory</code>：是直接继承了<code>BeanFactory</code>，在<code>BeanFactory</code>的基础上，支持在创建Bean的过程中能对Bean进行自动装配</li>\n<li><code>AbstractBeanFactory</code>：实现了<code>ConfigurableBeanFactory</code>接口，继承了<code>FactoryBeanRegistrySupport</code>，这个<code>BeanFactory</code>的功能已经很全面了，但是不能自动装配和获取<code>beanNames</code></li>\n<li><code>ConfigurableListableBeanFactory</code>：继承了<code>ListableBeanFactory</code>、<code>AutowireCapableBeanFactory</code>、<code>ConfigurableBeanFactory</code></li>\n<li><code>AbstractAutowireCapableBeanFactory</code>：继承了<code>AbstractBeanFactory</code>，实现了<code>AutowireCapableBeanFactory</code>，拥有了自动装配的功能</li>\n<li><code>DefaultListableBeanFactory</code>：继承了<code>AbstractAutowireCapableBeanFactory</code>，实现了<code>ConfigurableListableBeanFactory</code>接口和<code>BeanDefinitionRegistry</code>接口，所以<code>DefaultListableBeanFactory</code>的功能很强大</li>\n</ol>\n<h2 id=\"ApplicationContext\"><a href=\"#ApplicationContext\" class=\"headerlink\" title=\"ApplicationContext\"></a><code>ApplicationContext</code></h2><p><code>ApplicationContext</code>是一个接口，实际上也是一个<code>BeanFactory</code>，不过相较于<code>BeanFactory</code>更为强大。</p>\n<ol>\n<li><code>HierarchicalBeanFactory</code>：拥有获取父<code>BeanFactory</code>的功能</li>\n<li><code>ListableBeanFactory</code>：拥有获取beanNames的功能</li>\n<li><code>ResourcePatternResolver</code>：资源加载器，可以一次性获取多个资源（文件资源等等）</li>\n<li><code>EnvironmentCapable</code>：可以获取运行时环境（没有设置运行时环境功能）</li>\n<li><code>ApplicationEventPublisher</code>：拥有广播事件的功能（没有添加事件监听器的功能）</li>\n<li><code>MessageSource</code>：拥有国际化功能</li>\n</ol>\n<p>两个比较重要的实现类</p>\n<h3 id=\"AnnotationConfigApplicationContext\"><a href=\"#AnnotationConfigApplicationContext\" class=\"headerlink\" title=\"AnnotationConfigApplicationContext\"></a><code>AnnotationConfigApplicationContext</code></h3><p><img src=\"../../../../img/Spring底层核心原理/image-20210906110040192.png\" alt=\"image-20210906110040192\"></p>\n<ol>\n<li><code>ConfigurableApplicationContext</code>：继承了<code>ApplicationContext</code>接口，增加了，添加事件监听器、添加<code>BeanFactoryPostProcessor</code>、设置<code>Environment</code>，获取<code>ConfigurableListableBeanFactory</code>等功能</li>\n<li><code>AbstractApplicationContext</code>：实现了<code>ConfigurableApplicationContext</code>接口</li>\n<li><code>GenericApplicationContext</code>：继承了<code>AbstractApplicationContext</code>，实现了<code>BeanDefinitionRegistry</code>接口，拥有了所有ApplicationContext的功能，并且可以注册<code>BeanDefinition</code>，注意这个类中有一个属性(<code>DefaultListableBeanFactory</code> <strong><code>beanFactory</code></strong>)</li>\n<li><code>AnnotationConfigRegistry</code>：可以单独注册某个为类为<code>BeanDefinition</code>（可以处理该类上的<strong>@Configuration注解</strong>，已经可以处理<strong>@Bean注解</strong>），同时可以扫描</li>\n<li><code>AnnotationConfigApplicationContext</code>：继承了<code>GenericApplicationContext</code>，实现了<code>AnnotationConfigRegistry</code>接口，拥有了以上所有的功能</li>\n</ol>\n<h3 id=\"ClassPathXmlApplicationContext\"><a href=\"#ClassPathXmlApplicationContext\" class=\"headerlink\" title=\"ClassPathXmlApplicationContext\"></a><code>ClassPathXmlApplicationContext</code></h3><p><img src=\"../../../../img/Spring底层核心原理/image-20210906110239801.png\" alt=\"image-20210906110239801\"></p>\n<p>也是继承了<code>AbstractApplicationContext</code>，但是相对于<code>AnnotationConfigApplicationContext</code>而言，功能没有<code>AnnotationConfigApplicationContext</code>强大，比如不能注册<code>BeanDefinition</code></p>\n<h3 id=\"国际化\"><a href=\"#国际化\" class=\"headerlink\" title=\"国际化\"></a>国际化</h3><p>（MessageSource）</p>\n<h3 id=\"资源加载\"><a href=\"#资源加载\" class=\"headerlink\" title=\"资源加载\"></a>资源加载</h3><p>可以直接利用ApplicationContext获得某个文件的内容</p>\n<h3 id=\"获取运行时环境\"><a href=\"#获取运行时环境\" class=\"headerlink\" title=\"获取运行时环境\"></a>获取运行时环境</h3><h3 id=\"事件发布\"><a href=\"#事件发布\" class=\"headerlink\" title=\"事件发布\"></a>事件发布</h3><h2 id=\"类型转化\"><a href=\"#类型转化\" class=\"headerlink\" title=\"类型转化\"></a>类型转化</h2><p>在Spring源码中，有可能需要把String转换成其他类型，所以在Spring源码中提供了一些技术来更方便的对对象进行类型转化</p>\n<p><code>PropertyEditor</code>：JDK中提供的类型转化工具类</p>\n<p><code>ConversionService</code>：Spring中提供的类型转化服务，比<code>propertyEditor</code>更强大</p>\n<p><code>TypeConverter</code>：整合了上面两个功能，Spring源码中使用的</p>\n<h2 id=\"OrderComparator\"><a href=\"#OrderComparator\" class=\"headerlink\" title=\"OrderComparator\"></a><code>OrderComparator</code></h2><p>是Spring所提供的一种比较器，可以用来根据<code>@Order</code>注解或实现<code>Ordered</code>接口来执行比较从而进行排序的工具类。</p>\n<p>另外，Spring中还提供了一个<code>OrderComparator</code>的子类：<code>AnnotationAwareOrderComparator</code>，它支持用<code>@Order</code>来指定<code>order</code>值。</p>\n<h2 id=\"BeanPostProcessor\"><a href=\"#BeanPostProcessor\" class=\"headerlink\" title=\"BeanPostProcessor\"></a><code>BeanPostProcessor</code></h2><p>表示Bean的后置处理器，我们可以定义一个或多个<code>BeanPostProcessor</code></p>\n<h2 id=\"BeanFactoryPostProcessor\"><a href=\"#BeanFactoryPostProcessor\" class=\"headerlink\" title=\"BeanFactoryPostProcessor\"></a><code>BeanFactoryPostProcessor</code></h2><p>表示bean工厂的后置处理器，其实和<code>BeanPostProcessor</code>类似，<code>BeanPostProcessor</code>是干涉<code>Bean</code>的创建过程，<code>BeanFactoryPostProcessor</code>是干涉<code>BeanFactory</code>的创建过程。</p>\n<h2 id=\"FactoryBean\"><a href=\"#FactoryBean\" class=\"headerlink\" title=\"FactoryBean\"></a><code>FactoryBean</code></h2><p>上面提到的<code>BeanPostProcessor</code>是用来干涉<code>Bean</code>的创建过程，但是如果我们想让一个Bean完全由我们来创建，也是可以的，可以通过<code>FactoryBean</code>来创建，这样创建出来的bean不会经过完成的Bean的生命周期，<strong>只会经过初始化后</strong>，其他的依赖注入等是不会经过的。</p>\n<p>通过<code>FactoryBean</code>创建的bean和我们常用的申明式创建的bean主要区别在于是否有完整的Spring的生命周期，自然申明式创建的bean是具备完整的生命周期的。</p>\n<h2 id=\"ExcludeFilter、IncludeFileter\"><a href=\"#ExcludeFilter、IncludeFileter\" class=\"headerlink\" title=\"ExcludeFilter、IncludeFileter\"></a><code>ExcludeFilter</code>、<code>IncludeFileter</code></h2><p>这两个过滤器是Spring扫描过程中用来过滤的，见名知意，<code>ExcludeFilter</code>表示排除过滤器，<code>IncludeFileter</code>表示包含过滤器。</p>\n<p>在Spring的扫描逻辑中，默认会添加一个<code>AnnotationTypeFilter</code>给<code>includeFilters</code>，表示默认情况下Spring扫描过程中会认为类上有<code>@Component</code>注解的就是Bean。</p>\n<h2 id=\"MetadataReader、ClassMetadata、AnntationMetadata\"><a href=\"#MetadataReader、ClassMetadata、AnntationMetadata\" class=\"headerlink\" title=\"MetadataReader、ClassMetadata、AnntationMetadata\"></a><code>MetadataReader</code>、<code>ClassMetadata</code>、<code>AnntationMetadata</code></h2><p>在Spring中需要取解析类的信息，比如类名、类中的方法、类上的注解等信息，这些都称之为类的元数据，Spring中对上述信息做了一些封装，提供了一些工具类，可以很方便的获取元数据信息。</p>\n<p><code>SimpleMetadataReader</code>解析类的时候，使用的是<strong>ASM技术</strong></p>\n<p>为什么要使用ASM技术呢？</p>\n<p>Spring启动的时候需要去扫描，如果指定的包路径比较宽泛，那么扫描的类是非常多的，那如果在Spring启动的时候就把这些类全部加载进<code>JVM</code>中，这样不太好，就使用了ASM</p>\n<blockquote>\n<p>扩展：</p>\n<p><a href=\"https://blog.csdn.net/zhuoxiuwu/article/details/78619645\" target=\"_blank\" rel=\"noopener\">ASM技术</a>：ASM 是一个 Java 字节码操控框架。它能被用来动态生成类或者增强既有类的功能。ASM 可以直接产生二进制 class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。ASM 从类文件中读入信息后，能够改变类行为，分析类信息，甚至能够根据用户要求生成新类。</p>\n</blockquote>\n","more":"<h1 id=\"Spring如何创建一个对象\"><a href=\"#Spring如何创建一个对象\" class=\"headerlink\" title=\"Spring如何创建一个对象\"></a>Spring如何创建一个对象</h1><p>首先来看一个类<code>org.springframework.context.support.ClassPathXmlApplicationContext</code></p>\n<p>这个类就是我们一开始使用Spring的时候会首先认识的一个类，在Spring 3的时候增加了一个<code>org.springframework.context.annotation.AnnotationConfigApplicationContext</code>, 经常使用Spring的人都应该知道第一个类的作用，创建了spring的容器，并指定了扫描路径。其实这两个类的作用基本相同，只不过在一些具体形式上有一些区别，比如前者主要是去读取指定路径下的<code>xml</code>配置文件，后者则是通过java配置类的形式去配置Spring容器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassPathXmlApplicationContext context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"classpath:spring.xml\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(MainConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br></pre></td></tr></table></figure>\n<p>这里之所以提及<code>AnnotationConfigApplicationContext</code>，是因为我们目前主流使用的<code>SpringBoot</code>就是基于这个类来实现的。</p>\n<p>通过以上代码后，我们通常就可以使用<code>context</code>容器对象通过<code>getBean</code>方法去获取对象，在这个过程中就创建了Bean对象。那接下来就了解Spring是如何创建一个对象的。</p>\n<p><font color=red>那么此处有一个问题可以思考下：通过Spring容器获得的Bean和java中<code>new xxx</code>得到的bean有什么区别呢？</font><sunfy-line></p>\n<h1 id=\"Spring中bean的创建生命周期\"><a href=\"#Spring中bean的创建生命周期\" class=\"headerlink\" title=\"Spring中bean的创建生命周期\"></a>Spring中bean的创建生命周期</h1><p><code>xxx.class</code> —&gt; 判断使用哪个构造方法 —&gt; 普通对象 —&gt; Aware回调 —&gt; 依赖注入(属性赋值<code>@Autowrite</code>)  —&gt; 初始化前(<code>@PostConstruct</code>) —&gt; 初始化 ( <code>InitializingBean</code>)—&gt; 初始化后(AOP) —&gt; AOP之后会生成一个代理对象 —&gt; Bean</p>\n<ol>\n<li>Spring扫描class得到BeanDefinition</li>\n<li>根据得到的BeanDefinition去生成bean</li>\n<li>首先根据class推断构造方法</li>\n<li>根据推断出来的构造方法，反射，得到一个对象（暂时叫做原始对象）</li>\n<li>填充原始对象中的属性（依赖注入）</li>\n<li>如果原始对象中的某个方法被AOP了，那么则需要根据原始对象生成一个代理对象</li>\n<li>把最终生成的代理对象放入单例池（源码中叫做singletonObjects）中，下次getBean时就直接从单例池拿即可</li>\n</ol>\n<h2 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a><strong>依赖注入</strong></h2><p>伪代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过car对象获取其属性，并遍历属性中查找带有Autowired注解的</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Field field : car.getClass().getFields()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (field.isAnnotationPresent(Autowired<span class=\"class\">.<span class=\"keyword\">class</span>)) </span>&#123;</span><br><span class=\"line\">      \t<span class=\"comment\">// 给属性进行赋值（赋值的值从何而来？？？）</span></span><br><span class=\"line\">\t\tfield.set(xxxx, ????)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化前\"><a href=\"#初始化前\" class=\"headerlink\" title=\"初始化前\"></a><strong>初始化前</strong></h2><p><code>@PostConstruct</code>注解，初始化前调用，可以对bean进行一些赋值工作，使用和依赖注入类似 </p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a><strong>初始化</strong></h2><p>判断当前bean是否实现了<code>InitializingBean</code>， 通过 <code>instance of InitializingBean</code>判断是否实现接口，实现了该接口后，就将当前bean转换成<code>InitializingBean</code>对象，然后通过该对象去调用实现接口需要重写的<code>afterPropertiesSet()</code>方法</p>\n<p>Spring源码中对用的位置 <code>AbstractAutowireCapableBeanFactory.initializeBean(String beanName, Object bean, @Nullable RootBeanDefinition mbd)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractAutowireCapableBeanFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractBeanFactory</span></span></span><br><span class=\"line\"><span class=\"class\">\t\t<span class=\"keyword\">implements</span> <span class=\"title\">AutowireCapableBeanFactory</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeInitMethods</span><span class=\"params\">(String beanName, Object bean, @Nullable RootBeanDefinition mbd)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//判断我们的容器中是否实现了InitializingBean接口</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> isInitializingBean = (bean <span class=\"keyword\">instanceof</span> InitializingBean);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isInitializingBean &amp;&amp; (mbd == <span class=\"keyword\">null</span> || !mbd.isExternallyManagedInitMethod(<span class=\"string\">\"afterPropertiesSet\"</span>))) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.trace(<span class=\"string\">\"Invoking afterPropertiesSet() on bean with name '\"</span> + beanName + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Spring的安全管理器</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (System.getSecurityManager() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tAccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\t\t((InitializingBean) bean).afterPropertiesSet();</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;, getAccessControlContext());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> pae.getException();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//回调InitializingBean的afterPropertiesSet()方法</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 这块就是上述关键的位置</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 这块就是上述关键的位置</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 这块就是上述关键的位置</span></span><br><span class=\"line\">\t\t\t\t((InitializingBean) bean).afterPropertiesSet();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (mbd != <span class=\"keyword\">null</span> &amp;&amp; bean.getClass() != NullBean<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//我们beanclass中看是否有自己定义的init方法</span></span><br><span class=\"line\">\t\t\tString initMethodName = mbd.getInitMethodName();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//判断自定义的init方法名称不叫afterPropertiesSet</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (StringUtils.hasLength(initMethodName) &amp;&amp;</span><br><span class=\"line\">\t\t\t\t\t!(isInitializingBean &amp;&amp; <span class=\"string\">\"afterPropertiesSet\"</span>.equals(initMethodName)) &amp;&amp;</span><br><span class=\"line\">\t\t\t\t\t!mbd.isExternallyManagedInitMethod(initMethodName)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//调用我们自己的初始化方法</span></span><br><span class=\"line\">\t\t\t\tinvokeCustomInitMethod(beanName, bean, mbd);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>大致的过程就是上述的，Spring源码中会比这个更多，支持更多的扩展点，比如<code>Aware</code>、<code>beanPostProcess</code>，就是spring提供的很多的扩展点，以及一些常见主流款框架如何通过扩展点集成到Spring中，见<a href=\"/2021/08/18/resource-file-Interview-105-springAbout/#Spring扩展点\">本站链接</a></p>\n<h1 id=\"手写Spring\"><a href=\"#手写Spring\" class=\"headerlink\" title=\"手写Spring\"></a>手写Spring</h1><p>本代码中包含了Spring读取配置文件，实现了<code>@ComponentScan</code>注解，读取指定路径下的所有文件。读取所有文件下的<code>Component</code>标记的类。<code>@Scope</code>注解实现简单的单例bean和原型bean。此处的构造方法使用默认的无参构造方法，并 没有实现复杂判断构造方法的功能。生成普通对象后，实现了简单的<code>BeanNameAware</code>扩展点，并实现了基于<code>@Autowrited</code>依赖注入。</p>\n<p>实现<code>InitializingBean</code>接口，在创建bean的时候，如果实现了<code>InitializingBean</code>接口，会自动执行<code>afterPropertiesSet</code>方法。</p>\n<p>实现<code>BeanPostProcessor</code>接口，bean的后置处理器，两个默认的方法<code>postProcessBeforeInitialization</code>、<code>postProcessAfterInitialization</code>。</p>\n<p>理解了bean的创建过程，bean从读取class文件、通过<code>ClassLoader</code>进行类的加载、创建<code>BeanDefinition</code>对象、保存类的<code>Scope</code>属性保存至<code>BeanDefinition</code>、将<code>BeanDefinition</code>放入Map缓存中、在获取bean的时候，通过scope不同属性创建bean，并将创建的bean保存至相应的map缓存池中。创建bean的时候实现了依赖注入（属性赋值）、判断<code>Aware</code>接口、<code>BeanPostProcessor</code>后置处理器初始化前、<code>InitializingBean</code>初始化接口、<code>`BeanPostProcessor</code>后置处理器初始化后。</p>\n<p><code>BeanPostProcessor</code>类似AOP的实现过程。</p>\n<p>此处只贴出了<code>Application</code>的代码，具体的接口代码就不贴了，那些就是一些注解和接口，很简单，不会的直接从Spring中取一下也可以。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.spring;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.spring.annotations.Autowrited;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.spring.annotations.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.spring.annotations.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.spring.annotations.Scope;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.beans.Introspector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> sunfy</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span> SunfyAppliction</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021-9-4 21:20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SunfyAppliction</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存所有对象的一定定义信息</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashMap&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashMap&lt;String, Object&gt; singletonMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;BeanPostProcessor&gt; beanPostProcessorList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SunfyAppliction</span><span class=\"params\">(Class configClass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(this.getClass().getName() + \"构造方法开始运行！\");</span></span><br><span class=\"line\">        <span class=\"comment\">// 扫描路径下的class</span></span><br><span class=\"line\">        scan(configClass);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//for (Map.Entry&lt;String, BeanDefinition&gt; entry : beanDefinitionMap.entrySet()) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    String beanName = entry.getKey();</span></span><br><span class=\"line\">        <span class=\"comment\">//    BeanDefinition beanDefinition = entry.getValue();</span></span><br><span class=\"line\">        <span class=\"comment\">//    if (beanDefinition.getScope().equals(\"singleton\")) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">//        Object bean = createBean(beanName, beanDefinition);</span></span><br><span class=\"line\">        <span class=\"comment\">//        singletonMap.put(beanName, bean);</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scan</span><span class=\"params\">(Class configClass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断当前闯入的类是否有ComponentScan注解</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (configClass.isAnnotationPresent(ComponentScan<span class=\"class\">.<span class=\"keyword\">class</span>)) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获得注解中配置的路径</span></span><br><span class=\"line\">            ComponentScan componentScan = (ComponentScan) configClass.getAnnotation(ComponentScan<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">            String path = componentScan.value();</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(\"配置文件路径\" + path);</span></span><br><span class=\"line\">            <span class=\"comment\">// 处理文件路径</span></span><br><span class=\"line\">            path = path.replace(<span class=\"string\">\".\"</span>, <span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(\"配置文件路径替换后\" + path);</span></span><br><span class=\"line\">            <span class=\"comment\">// 获得ClassLoader</span></span><br><span class=\"line\">            ClassLoader classLoader = SunfyAppliction<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getClassLoader</span>()</span>;</span><br><span class=\"line\">            URL resource = classLoader.getResource(path);</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(\"通过ClassLoader获取完整文件路径\" + resource.getPath());</span></span><br><span class=\"line\">            File file = <span class=\"keyword\">new</span> File(resource.getFile());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 开始处理获取的文件</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (file.isDirectory()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (File f :</span><br><span class=\"line\">                        file.listFiles()) &#123;</span><br><span class=\"line\">                    String absolutePath = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (f.isDirectory()) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//System.out.println(\"当前问文件夹，跳过\" + f.getName());</span></span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (File f1 :</span><br><span class=\"line\">                                f.listFiles()) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//System.out.println(\"获取到的文件为：\" + f.getPath());</span></span><br><span class=\"line\">                            absolutePath = f1.getAbsolutePath();</span><br><span class=\"line\">                            <span class=\"comment\">//System.out.println(\"获取到的文件绝对路径为：\" + absolutePath);</span></span><br><span class=\"line\">                            absolutePath = absolutePath.substring(absolutePath.indexOf(<span class=\"string\">\"com\"</span>), absolutePath.indexOf(<span class=\"string\">\".class\"</span>));</span><br><span class=\"line\">                            absolutePath = absolutePath.replace(<span class=\"string\">\"\\\\\"</span>, <span class=\"string\">\".\"</span>);</span><br><span class=\"line\">                            <span class=\"comment\">//System.out.println(\"修改文件路径为：\" + absolutePath);</span></span><br><span class=\"line\">                            loadClass(classLoader, absolutePath);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//System.out.println(\"获取到的文件为：\" + f.getPath());</span></span><br><span class=\"line\">                        absolutePath = f.getAbsolutePath();</span><br><span class=\"line\">                        <span class=\"comment\">//System.out.println(\"获取到的文件绝对路径为：\" + absolutePath);</span></span><br><span class=\"line\">                        absolutePath = absolutePath.substring(absolutePath.indexOf(<span class=\"string\">\"com\"</span>), absolutePath.indexOf(<span class=\"string\">\".class\"</span>));</span><br><span class=\"line\">                        absolutePath = absolutePath.replace(<span class=\"string\">\"\\\\\"</span>, <span class=\"string\">\".\"</span>);</span><br><span class=\"line\">                        <span class=\"comment\">//System.out.println(\"修改文件路径为：\" + absolutePath);</span></span><br><span class=\"line\">                        loadClass(classLoader, absolutePath);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"当前路径不存在\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"当前配置类不存在ComponentScan注解\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">loadClass</span><span class=\"params\">(ClassLoader classLoader, String absolutePath)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 准备通过类加载器加载文件</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class&lt;?&gt; aClass = classLoader.loadClass(absolutePath);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (aClass.isAnnotationPresent(Component<span class=\"class\">.<span class=\"keyword\">class</span>)) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 判断是否有实现了BeanPostProcessor接口</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (BeanPostProcessor<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">isAssignableFrom</span>(<span class=\"title\">aClass</span>)) </span>&#123;</span><br><span class=\"line\">                    BeanPostProcessor instance = (BeanPostProcessor) aClass.getConstructor().newInstance();</span><br><span class=\"line\">                    beanPostProcessorList.add(instance);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                Component componentAnnotation = aClass.getAnnotation(Component<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (componentAnnotation == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"该类没有添加Component注解，不处理\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                String beanName = componentAnnotation.value();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"\"</span>.equals(beanName)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                    获得一个字符串并将它转换成普通 java 变量名称大写形式的实用工具方法。</span></span><br><span class=\"line\"><span class=\"comment\">                    这通常意味着将首字符从大写转换成小写，但在（不平常的）特殊情况下，</span></span><br><span class=\"line\"><span class=\"comment\">                    当有多个字符且第一个和第二个字符都是大写字符时，不执行任何操作。</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    beanName = Introspector.decapitalize(aClass.getSimpleName());</span><br><span class=\"line\">                    <span class=\"comment\">//System.out.println(\"没有配置value，自动获取的名字为：\" + beanName);</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// beanDefinition，Spring中很关键的一个概念</span></span><br><span class=\"line\">                BeanDefinition beanDefinition = <span class=\"keyword\">new</span> BeanDefinition();</span><br><span class=\"line\">                beanDefinition.setType(aClass);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 根据Scope注解设置bean的属性</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (aClass.isAnnotationPresent(Scope<span class=\"class\">.<span class=\"keyword\">class</span>)) </span>&#123;</span><br><span class=\"line\">                    Scope scope = aClass.getAnnotation(Scope<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">                    String value = scope.value();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"string\">\"\"</span>.equals(value)) value = <span class=\"string\">\"singleton\"</span>;</span><br><span class=\"line\">                    beanDefinition.setScope(value);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    beanDefinition.setScope(<span class=\"string\">\"singleton\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 将bean放在一个缓存Map中供后续获取使用，此时只是放入了一个bean定义，并没有真正的创建bean对象</span></span><br><span class=\"line\">                beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getBean</span><span class=\"params\">(String beanName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!beanDefinitionMap.containsKey(beanName)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不存在当前bean定义，抛出异常</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Object bean = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BeanDefinition beanDefinition = beanDefinitionMap.get(beanName);</span><br><span class=\"line\">        <span class=\"comment\">// 根据Scope的属性创建bean</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"singleton\"</span>.equals(beanDefinition.getScope())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (singletonMap.containsKey(beanName)) &#123;</span><br><span class=\"line\">                bean = singletonMap.get(beanName);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                bean = createBean(beanName, beanDefinition);</span><br><span class=\"line\">                singletonMap.put(beanName, bean);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            bean = createBean(beanName, beanDefinition);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">createBean</span><span class=\"params\">(String beanName, BeanDefinition beanDefinition)</span> </span>&#123;</span><br><span class=\"line\">        Class type = beanDefinition.getType();</span><br><span class=\"line\">        Object instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 通过反射创建对象</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 通过构造函数反射创建对象</span></span><br><span class=\"line\">            instance = type.getConstructor().newInstance();</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(\"基础对象创建成功\");</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 实现依赖注入（属性赋值）</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Field field :</span><br><span class=\"line\">                    type.getDeclaredFields()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//System.out.println(\"获取到的相关属性\" + field.getName());</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (field.isAnnotationPresent(Autowrited<span class=\"class\">.<span class=\"keyword\">class</span>)) </span>&#123;</span><br><span class=\"line\">                    field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    field.set(instance, getBean(field.getName()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 创建了bean之后，判断是否实现Aware接口，Spring一个重要的扩展点</span></span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(\"判断是否实现了Aware接口\");</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instance <span class=\"keyword\">instanceof</span> BeanNameAware) &#123;</span><br><span class=\"line\">                ((BeanNameAware) instance).setBeanName(beanName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Bean的后置处理器（Spirng中AOP采用的就是这种实现方式）-初始化前</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (BeanPostProcessor beanPostprocessor :</span><br><span class=\"line\">                    beanPostProcessorList) &#123;</span><br><span class=\"line\">                instance = beanPostprocessor.postProcessBeforeInitialization(instance, beanName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 创建bean之后，判断bean是否实现了InitializingBean接口，这也是Spring的一个重要的扩展点</span></span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(\"判断是否实现了InitializingBean接口\");</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instance <span class=\"keyword\">instanceof</span> InitializingBean) &#123;</span><br><span class=\"line\">                ((InitializingBean) instance).afterPropertiesSet();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Bean的后置处理器（Spirng中AOP采用的就是这种实现方式）-初始化后</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (BeanPostProcessor beanPostprocessor :</span><br><span class=\"line\">                    beanPostProcessorList) &#123;</span><br><span class=\"line\">                instance = beanPostprocessor.postProcessAfterInitialization(instance, beanName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><code>BeanPostProcessor</code>：这属于面向切面的扩展，针对具有默写共同点的类进行统一的扩展。</p>\n<p><code>Aware</code>：面向实现指定接口的类进行扩展。</p>\n<p><code>InitializingBean</code>：面向实现指定接口的类进行扩展。</p>\n<h2 id=\"BeanDefinition\"><a href=\"#BeanDefinition\" class=\"headerlink\" title=\"BeanDefinition\"></a><code>BeanDefinition</code></h2><p>表示Bean定义，<code>BeanDefinition</code>中存在很多属性用来描述一个Bean的特点。通常使用Bean标签（<code>&lt;Bean/&gt;</code>）、<code>@Bean注解</code>、<code>@Component（@Service、@COntroller）</code>等方式来声明一个bean，以上几种方式统称为申明式定义Bean，同时还可以使用编程式定义Bean，在Spring源码中更多的都是通过<code>BeanDefinition</code>来编程式的创建bean的。</p>\n<h2 id=\"BeanDefinitionReader\"><a href=\"#BeanDefinitionReader\" class=\"headerlink\" title=\"BeanDefinitionReader\"></a><code>BeanDefinitionReader</code></h2><p>Spring源码中提供的<code>BeanDefinition</code>读取器，这些我们通常不会使用到，但是在Spring源码中使用的很多。<code>AnnotatedBeanDefinitionReader</code>、<code>XmlBeanDefinitionReader</code>等。</p>\n<h2 id=\"ClassPathBeanDefinitionScanner\"><a href=\"#ClassPathBeanDefinitionScanner\" class=\"headerlink\" title=\"ClassPathBeanDefinitionScanner\"></a><code>ClassPathBeanDefinitionScanner</code></h2><p>扫描器，作用和<code>BeanDefinitionReader</code>类似，可以进行扫描，扫描某个包的路径，对扫描到的类进行解析。</p>\n<h2 id=\"BeanFactory\"><a href=\"#BeanFactory\" class=\"headerlink\" title=\"BeanFactory\"></a><code>BeanFactory</code></h2><p>表示Bean工厂，负责创建Bean，并且提供获取Bean的API。IOCbean工厂的顶级接口 定义一系列对bean的操作。</p>\n<p><img src=\"../../../../img/Spring底层核心原理/image-20210906110715684.png\" alt=\"image-20210906110715684\"></p>\n<p>而<code>ApplicationContext</code>是<code>BeanFactory</code>的一种，在Spring源码中，是这么定义的：</p>\n<p><img src=\"../../../../img/Spring底层核心原理/image-20210906110841507.png\" alt=\"image-20210906110841507\"></p>\n<p>首先，在Java中，接口是可以<strong>多继承</strong>的，我们发现<code>ApplicationContext</code>继承了<code>ListableBeanFactory</code>和<code>HierarchicalBeanFactory</code>，而<code>ListableBeanFactory</code>和<code>HierarchicalBeanFactory</code>都继承至<code>BeanFactory</code>，所以我们可以认为ApplicationContext继承了<code>BeanFactory</code>，<code>ApplicationContext</code>也是<code>BeanFactory</code>的一种，拥有<code>BeanFactory</code>支持的所有功能，不过<code>ApplicationContext</code>比<code>BeanFactory</code>更加强大，<code>ApplicationContext</code>还继承了其他接口，也就表示<code>ApplicationContext</code>还拥有其他功能，</p>\n<p>比如</p>\n<ul>\n<li><code>MessageSource</code>表示国际化，</li>\n<li><code>ApplicationEventPublisher</code>表示事件发布，</li>\n<li><code>EnvironmentCapable</code>表示获取环境变量，等等，关于ApplicationContext后面再详细讨论。</li>\n</ul>\n<p>在Spring的源码实现中，当我们new一个<code>ApplicationContext</code>时，其底层会new一个<code>BeanFactory</code>出来，当使用<code>ApplicationContext</code>的某些方法时，比如<code>getBean()</code>，底层调用的是<code>BeanFactory</code>的<code>getBean()</code>方法。</p>\n<p>在Spring源码中，<code>BeanFactory</code>接口存在一个非常重要的实现类是：<strong><code>DefaultListableBeanFactory</code>，也是非常核心的。</strong></p>\n<p>所以，我们可以直接来使用<strong><code>DefaultListableBeanFactory</code></strong>，而不用使用<code>ApplicationContext</code>的某个实现类，比如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DefaultListableBeanFactory beanFactory = <span class=\"keyword\">new</span> DefaultListableBeanFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">AbstractBeanDefinition beanDefinition = BeanDefinitionBuilder.genericBeanDefinition().getBeanDefinition();</span><br><span class=\"line\">beanDefinition.setBeanClass(User<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">beanFactory.registerBeanDefinition(<span class=\"string\">\"user\"</span>, beanDefinition);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(beanFactory.getBean(<span class=\"string\">\"user\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p><strong><code>DefaultListableBeanFactory</code>是非常强大的，支持很多功能，可以通过查看<code>DefaultListableBeanFactory</code>的类继承实现结构来看</strong></p>\n<p><img src=\"../../../../img/Spring底层核心原理/image-20210906110428991.png\" alt=\"image-20210906110428991\"></p>\n<p>它实现了很多接口，表示，它拥有很多功能：</p>\n<ol>\n<li><code>AliasRegistry</code>：支持别名功能，一个名字可以对应多个别名</li>\n<li><code>BeanDefinitionRegistry</code>：可以注册、保存、移除、获取某个<code>BeanDefinition</code></li>\n<li><code>BeanFactory</code>：Bean工厂，可以根据某个bean的名字、或类型、或别名获取某个Bean对象</li>\n<li><code>SingletonBeanRegistry</code>：可以直接注册、获取某个<strong>单例</strong>Bean</li>\n<li><code>SimpleAliasRegistry</code>：它是一个类，实现了<code>AliasRegistry</code>接口中所定义的功能，支持别名功能</li>\n<li><code>ListableBeanFactory</code>：在<code>BeanFactory</code>的基础上，增加了其他功能，可以获取所有<code>BeanDefinition</code>的<code>beanNames</code>，可以根据某个类型获取对应的<code>beanNames</code>，可以根据某个类型获取{类型：对应的Bean}的映射关系</li>\n<li><code>HierarchicalBeanFactory</code>：在<code>BeanFactory</code>的基础上，添加了获取父<code>BeanFactory</code>的功能</li>\n<li><code>DefaultSingletonBeanRegistry</code>：它是一个类，实现了<code>SingletonBeanRegistry</code>接口，拥有了直接注册、获取某个<strong>单例</strong>Bean的功能</li>\n<li><code>ConfigurableBeanFactory</code>：在<code>HierarchicalBeanFactory</code>和<code>SingletonBeanRegistry</code>的基础上，添加了设置父<code>BeanFactory</code>、类加载器（表示可以指定某个类加载器进行类的加载）、设置Spring EL表达式解析器（表示该<code>BeanFactory</code>可以解析EL表达式）、设置类型转化服务（表示该<code>BeanFactory</code>可以进行类型转化）、可以添加<code>BeanPostProcessor</code>（表示该<code>BeanFactory</code>支持Bean的后置处理器），可以合并<code>BeanDefinition</code>，可以销毁某个Bean等等功能</li>\n<li><code>FactoryBeanRegistrySupport</code>：支持了<code>FactoryBean</code>的功能</li>\n<li><code>AutowireCapableBeanFactory</code>：是直接继承了<code>BeanFactory</code>，在<code>BeanFactory</code>的基础上，支持在创建Bean的过程中能对Bean进行自动装配</li>\n<li><code>AbstractBeanFactory</code>：实现了<code>ConfigurableBeanFactory</code>接口，继承了<code>FactoryBeanRegistrySupport</code>，这个<code>BeanFactory</code>的功能已经很全面了，但是不能自动装配和获取<code>beanNames</code></li>\n<li><code>ConfigurableListableBeanFactory</code>：继承了<code>ListableBeanFactory</code>、<code>AutowireCapableBeanFactory</code>、<code>ConfigurableBeanFactory</code></li>\n<li><code>AbstractAutowireCapableBeanFactory</code>：继承了<code>AbstractBeanFactory</code>，实现了<code>AutowireCapableBeanFactory</code>，拥有了自动装配的功能</li>\n<li><code>DefaultListableBeanFactory</code>：继承了<code>AbstractAutowireCapableBeanFactory</code>，实现了<code>ConfigurableListableBeanFactory</code>接口和<code>BeanDefinitionRegistry</code>接口，所以<code>DefaultListableBeanFactory</code>的功能很强大</li>\n</ol>\n<h2 id=\"ApplicationContext\"><a href=\"#ApplicationContext\" class=\"headerlink\" title=\"ApplicationContext\"></a><code>ApplicationContext</code></h2><p><code>ApplicationContext</code>是一个接口，实际上也是一个<code>BeanFactory</code>，不过相较于<code>BeanFactory</code>更为强大。</p>\n<ol>\n<li><code>HierarchicalBeanFactory</code>：拥有获取父<code>BeanFactory</code>的功能</li>\n<li><code>ListableBeanFactory</code>：拥有获取beanNames的功能</li>\n<li><code>ResourcePatternResolver</code>：资源加载器，可以一次性获取多个资源（文件资源等等）</li>\n<li><code>EnvironmentCapable</code>：可以获取运行时环境（没有设置运行时环境功能）</li>\n<li><code>ApplicationEventPublisher</code>：拥有广播事件的功能（没有添加事件监听器的功能）</li>\n<li><code>MessageSource</code>：拥有国际化功能</li>\n</ol>\n<p>两个比较重要的实现类</p>\n<h3 id=\"AnnotationConfigApplicationContext\"><a href=\"#AnnotationConfigApplicationContext\" class=\"headerlink\" title=\"AnnotationConfigApplicationContext\"></a><code>AnnotationConfigApplicationContext</code></h3><p><img src=\"../../../../img/Spring底层核心原理/image-20210906110040192.png\" alt=\"image-20210906110040192\"></p>\n<ol>\n<li><code>ConfigurableApplicationContext</code>：继承了<code>ApplicationContext</code>接口，增加了，添加事件监听器、添加<code>BeanFactoryPostProcessor</code>、设置<code>Environment</code>，获取<code>ConfigurableListableBeanFactory</code>等功能</li>\n<li><code>AbstractApplicationContext</code>：实现了<code>ConfigurableApplicationContext</code>接口</li>\n<li><code>GenericApplicationContext</code>：继承了<code>AbstractApplicationContext</code>，实现了<code>BeanDefinitionRegistry</code>接口，拥有了所有ApplicationContext的功能，并且可以注册<code>BeanDefinition</code>，注意这个类中有一个属性(<code>DefaultListableBeanFactory</code> <strong><code>beanFactory</code></strong>)</li>\n<li><code>AnnotationConfigRegistry</code>：可以单独注册某个为类为<code>BeanDefinition</code>（可以处理该类上的<strong>@Configuration注解</strong>，已经可以处理<strong>@Bean注解</strong>），同时可以扫描</li>\n<li><code>AnnotationConfigApplicationContext</code>：继承了<code>GenericApplicationContext</code>，实现了<code>AnnotationConfigRegistry</code>接口，拥有了以上所有的功能</li>\n</ol>\n<h3 id=\"ClassPathXmlApplicationContext\"><a href=\"#ClassPathXmlApplicationContext\" class=\"headerlink\" title=\"ClassPathXmlApplicationContext\"></a><code>ClassPathXmlApplicationContext</code></h3><p><img src=\"../../../../img/Spring底层核心原理/image-20210906110239801.png\" alt=\"image-20210906110239801\"></p>\n<p>也是继承了<code>AbstractApplicationContext</code>，但是相对于<code>AnnotationConfigApplicationContext</code>而言，功能没有<code>AnnotationConfigApplicationContext</code>强大，比如不能注册<code>BeanDefinition</code></p>\n<h3 id=\"国际化\"><a href=\"#国际化\" class=\"headerlink\" title=\"国际化\"></a>国际化</h3><p>（MessageSource）</p>\n<h3 id=\"资源加载\"><a href=\"#资源加载\" class=\"headerlink\" title=\"资源加载\"></a>资源加载</h3><p>可以直接利用ApplicationContext获得某个文件的内容</p>\n<h3 id=\"获取运行时环境\"><a href=\"#获取运行时环境\" class=\"headerlink\" title=\"获取运行时环境\"></a>获取运行时环境</h3><h3 id=\"事件发布\"><a href=\"#事件发布\" class=\"headerlink\" title=\"事件发布\"></a>事件发布</h3><h2 id=\"类型转化\"><a href=\"#类型转化\" class=\"headerlink\" title=\"类型转化\"></a>类型转化</h2><p>在Spring源码中，有可能需要把String转换成其他类型，所以在Spring源码中提供了一些技术来更方便的对对象进行类型转化</p>\n<p><code>PropertyEditor</code>：JDK中提供的类型转化工具类</p>\n<p><code>ConversionService</code>：Spring中提供的类型转化服务，比<code>propertyEditor</code>更强大</p>\n<p><code>TypeConverter</code>：整合了上面两个功能，Spring源码中使用的</p>\n<h2 id=\"OrderComparator\"><a href=\"#OrderComparator\" class=\"headerlink\" title=\"OrderComparator\"></a><code>OrderComparator</code></h2><p>是Spring所提供的一种比较器，可以用来根据<code>@Order</code>注解或实现<code>Ordered</code>接口来执行比较从而进行排序的工具类。</p>\n<p>另外，Spring中还提供了一个<code>OrderComparator</code>的子类：<code>AnnotationAwareOrderComparator</code>，它支持用<code>@Order</code>来指定<code>order</code>值。</p>\n<h2 id=\"BeanPostProcessor\"><a href=\"#BeanPostProcessor\" class=\"headerlink\" title=\"BeanPostProcessor\"></a><code>BeanPostProcessor</code></h2><p>表示Bean的后置处理器，我们可以定义一个或多个<code>BeanPostProcessor</code></p>\n<h2 id=\"BeanFactoryPostProcessor\"><a href=\"#BeanFactoryPostProcessor\" class=\"headerlink\" title=\"BeanFactoryPostProcessor\"></a><code>BeanFactoryPostProcessor</code></h2><p>表示bean工厂的后置处理器，其实和<code>BeanPostProcessor</code>类似，<code>BeanPostProcessor</code>是干涉<code>Bean</code>的创建过程，<code>BeanFactoryPostProcessor</code>是干涉<code>BeanFactory</code>的创建过程。</p>\n<h2 id=\"FactoryBean\"><a href=\"#FactoryBean\" class=\"headerlink\" title=\"FactoryBean\"></a><code>FactoryBean</code></h2><p>上面提到的<code>BeanPostProcessor</code>是用来干涉<code>Bean</code>的创建过程，但是如果我们想让一个Bean完全由我们来创建，也是可以的，可以通过<code>FactoryBean</code>来创建，这样创建出来的bean不会经过完成的Bean的生命周期，<strong>只会经过初始化后</strong>，其他的依赖注入等是不会经过的。</p>\n<p>通过<code>FactoryBean</code>创建的bean和我们常用的申明式创建的bean主要区别在于是否有完整的Spring的生命周期，自然申明式创建的bean是具备完整的生命周期的。</p>\n<h2 id=\"ExcludeFilter、IncludeFileter\"><a href=\"#ExcludeFilter、IncludeFileter\" class=\"headerlink\" title=\"ExcludeFilter、IncludeFileter\"></a><code>ExcludeFilter</code>、<code>IncludeFileter</code></h2><p>这两个过滤器是Spring扫描过程中用来过滤的，见名知意，<code>ExcludeFilter</code>表示排除过滤器，<code>IncludeFileter</code>表示包含过滤器。</p>\n<p>在Spring的扫描逻辑中，默认会添加一个<code>AnnotationTypeFilter</code>给<code>includeFilters</code>，表示默认情况下Spring扫描过程中会认为类上有<code>@Component</code>注解的就是Bean。</p>\n<h2 id=\"MetadataReader、ClassMetadata、AnntationMetadata\"><a href=\"#MetadataReader、ClassMetadata、AnntationMetadata\" class=\"headerlink\" title=\"MetadataReader、ClassMetadata、AnntationMetadata\"></a><code>MetadataReader</code>、<code>ClassMetadata</code>、<code>AnntationMetadata</code></h2><p>在Spring中需要取解析类的信息，比如类名、类中的方法、类上的注解等信息，这些都称之为类的元数据，Spring中对上述信息做了一些封装，提供了一些工具类，可以很方便的获取元数据信息。</p>\n<p><code>SimpleMetadataReader</code>解析类的时候，使用的是<strong>ASM技术</strong></p>\n<p>为什么要使用ASM技术呢？</p>\n<p>Spring启动的时候需要去扫描，如果指定的包路径比较宽泛，那么扫描的类是非常多的，那如果在Spring启动的时候就把这些类全部加载进<code>JVM</code>中，这样不太好，就使用了ASM</p>\n<blockquote>\n<p>扩展：</p>\n<p><a href=\"https://blog.csdn.net/zhuoxiuwu/article/details/78619645\" target=\"_blank\" rel=\"noopener\">ASM技术</a>：ASM 是一个 Java 字节码操控框架。它能被用来动态生成类或者增强既有类的功能。ASM 可以直接产生二进制 class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。ASM 从类文件中读入信息后，能够改变类行为，分析类信息，甚至能够根据用户要求生成新类。</p>\n</blockquote>\n","next":{"title":"Spring相关的面试题","path":"api/articles/resource-Spring-Spring-Spring相关的面试题.json","image":"/img/header_img/spring/interview.PNG","num_read":826,"num_like":760,"num_collection":698,"num_comments":106},"prev":{"title":"SpringBean的生命周期详解","path":"api/articles/resource-Spring-Spring-SpringBean的生命周期详解.json","image":"/img/header_img/spring/BeanLife.png","num_read":149,"num_like":110,"num_collection":403,"num_comments":25},"categories":[{"name":"Spring全家桶","path":"api/categories/Spring全家桶.json","pathContent":"api/categories/Spring全家桶","description":"更快、更容易、更安全","cover":"https://sunfy9.gitee.io/project/photo/project/spring.png"}],"tags":[{"name":"Spring","path":"api/tags/Spring.json","pathContent":"api/tags/Spring","description":"更快、更容易、更安全","cover":"https://sunfy9.gitee.io/project/photo/project/spring.png"}]}