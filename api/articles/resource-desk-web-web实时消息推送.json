{"title":"7种 实现web实时消息推送的方案，7种！","num_read":1504,"num_like":458,"num_collection":484,"num_comments":57,"slug":"resource-desk-web-web实时消息推送","date":"2022-07-19T16:00:00.000Z","img":"/img/header_img/desk/webMessage.png","format":"gallery","_id":"clhrbp2d6006co5lg9gwa3xm5","project":"desk","type":"banner","subtitle":"web实时消息推送的方案","site":{"data":{}},"updated":"2022-09-20T01:41:27.015Z","author":"Sunfy","comments":true,"path":"api/articles/resource-desk-web-web实时消息推送.json","webPath":"2022/07/20/resource-desk-web-web实时消息推送/","permalink":"https://sunfy9.gitee.io/2022/07/20/resource-desk-web-web%E5%AE%9E%E6%97%B6%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/","excerpt":null,"covers":["../../../../img/web实时消息推送/11888c39774a6de57b989566e678fdf0.png","../../../../img/web实时消息推送/b08fbb575337cc8a4e27a1274fb70eff.png","../../../../img/web实时消息推送/d5b8617c37fd489896603d562f8a98c1.png","../../../../img/web实时消息推送/15ead5d6e8b7afcfdccbcec02a181301.png","../../../../img/web实时消息推送/198443b7c2f609da3bdf5b507bca0918.png","../../../../img/web实时消息推送/b38f9f691b96677bbb27e90a359ca164.gif","../../../../img/web实时消息推送/b1c885fb4ebaf89dddb3f6a57969f2d0.png","../../../../img/web实时消息推送/13707fee6eb0bf7e8a9a52789f2741cb.gif","../../../../img/web实时消息推送/0f22d0ebd18fe3cd8ec91c5652232b37.gif","../../../../img/web实时消息推送/77495aaf0418801529e10ab463deb478.png","../../../../img/web实时消息推送/5ef4004c847b2456203e832c46c6c894.png","../../../../img/web实时消息推送/d8b00310d5105403a486e58533f0d791.gif","../../../../img/web实时消息推送/952a29307642bf8969eed00d52aeb47f.png","../../../../img/web实时消息推送/20200609165130729.png","../../../../img/web实时消息推送/79b43eb8ca0a7ebd482dbb0056b5ff97.png","../../../../img/web实时消息推送/d9630dfefd0177766bcc78ac8f182df3.png","../../../../img/web实时消息推送/c98372bd32fc4ea3651905028649aa17.gif","../../../../img/web实时消息推送/205f4841-1ea9-4a96-8f2d-596563d1a1e8.png","../../../../img/web实时消息推送/20201128210231910.png"],"keywords":"sunfy, hexo-theme-snail","content":"<p>现在要实现一个站内信web消息推送的功能，对，就是下图这个小红点，一个很常用的功能。</p>\n<p><img src=\"../../../../img/web实时消息推送/11888c39774a6de57b989566e678fdf0.png\" alt=\"img\"></p>\n<p>不过他还没想好用什么方式做，这里我帮他整理了一下几种方案，并简单做了实现。</p>\n<p><img src=\"../../../../img/web实时消息推送/b08fbb575337cc8a4e27a1274fb70eff.png\" alt=\"img\"></p>\n<p><a href=\"https://github.com/chengxy-nds/Springboot-Notebook/tree/master/springboot-realtime-data\" target=\"_blank\" rel=\"noopener\">案例下载</a></p>\n<h3 id=\"什么是消息推送（push）\"><a href=\"#什么是消息推送（push）\" class=\"headerlink\" title=\"什么是消息推送（push）\"></a>什么是消息推送（push）</h3><p>推送的场景比较多，比如有人关注我的公众号，这时我就会收到一条推送消息，以此来吸引我点击打开应用。</p>\n<p>消息推送(<code>push</code>)通常是指网站的运营工作等人员，通过某种工具对用户当前网页或移动设备APP进行的主动消息推送。</p>\n<p>消息推送一般又分为<code>web端消息推送</code>和<code>移动端消息推送</code>。</p>\n<p><img src=\"../../../../img/web实时消息推送/d5b8617c37fd489896603d562f8a98c1.png\" alt=\"img\"></p>\n<p>上边的这种属于移动端消息推送，web端消息推送常见的诸如站内信、未读邮件数量、监控报警数量等，应用的也非常广泛。</p>\n<p><img src=\"../../../../img/web实时消息推送/15ead5d6e8b7afcfdccbcec02a181301.png\" alt=\"img\"></p>\n<p>在具体实现之前，咱们再来分析一下前边的需求，其实功能很简单，只要触发某个事件（主动分享了资源或者后台主动推送消息），web页面的通知小红点就会实时的<code>+1</code>就可以了。</p>\n<p>通常在服务端会有若干张消息推送表，用来记录用户触发不同事件所推送不同类型的消息，前端主动查询（拉）或者被动接收（推）用户所有未读的消息数。</p>\n<p><img src=\"../../../../img/web实时消息推送/198443b7c2f609da3bdf5b507bca0918.png\" alt=\"img\"></p>\n<p>消息推送无非是推（<code>push</code>）和拉（<code>pull</code>）两种形式，下边我们逐个了解下。</p>\n<h3 id=\"短轮询\"><a href=\"#短轮询\" class=\"headerlink\" title=\"短轮询\"></a>短轮询</h3><p>轮询(<code>polling</code>)应该是实现消息推送方案中最简单的一种，这里我们暂且将轮询分为<code>短轮询</code>和<code>长轮询</code>。</p>\n<p>短轮询很好理解，指定的时间间隔，由浏览器向服务器发出<code>HTTP</code>请求，服务器实时返回未读消息数据给客户端，浏览器再做渲染显示。</p>\n<p>一个简单的JS定时器就可以搞定，每秒钟请求一次未读消息数接口，返回的数据展示即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 方法请求</span></span><br><span class=\"line\">  messageCount().then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (res.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.messageCount = res.data</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>效果还是可以的，短轮询实现固然简单，缺点也是显而易见，由于推送数据并不会频繁变更，无论后端此时是否有新的消息产生，客户端都会进行请求，势必会对服务端造成很大压力，浪费带宽和服务器资源。</p>\n<p><img src=\"../../../../img/web实时消息推送/b38f9f691b96677bbb27e90a359ca164.gif\" alt=\"img\"></p>\n<h3 id=\"长轮询\"><a href=\"#长轮询\" class=\"headerlink\" title=\"长轮询\"></a>长轮询</h3><p>长轮询是对上边短轮询的一种改进版本，在尽可能减少对服务器资源浪费的同时，保证消息的相对实时性。长轮询在中间件中应用的很广泛，比如<code>Nacos</code>和<code>apollo</code>配置中心，消息队列<code>kafka</code>、<code>RocketMQ</code>中都有用到长轮询。</p>\n<p><a href=\"https://mp.weixin.qq.com/s/94ftESkDoZI9gAGflLiGwg\" target=\"_blank\" rel=\"noopener\">Nacos配置中心交互模型是push还是pull？</a>一文中我详细介绍过<code>Nacos</code>长轮询的实现原理，感兴趣的小伙伴可以瞅瞅。</p>\n<p>这次我使用<code>apollo</code>配置中心实现长轮询的方式，应用了一个类<code>DeferredResult</code>，它是在<code>servelet3.0</code>后经过Spring封装提供的一种异步请求机制，直意就是延迟结果。</p>\n<p><img src=\"../../../../img/web实时消息推送/b1c885fb4ebaf89dddb3f6a57969f2d0.png\" alt=\"img\"></p>\n<p><code>DeferredResult</code>可以允许容器线程快速释放占用的资源，不阻塞请求线程，以此接受更多的请求提升系统的吞吐量，然后启动异步工作线程处理真正的业务逻辑，处理完成调用<code>DeferredResult.setResult(200)</code>提交响应结果。</p>\n<p>下边我们用长轮询来实现消息推送。</p>\n<p>因为一个ID可能会被多个长轮询请求监听，所以我采用了<code>guava</code>包提供的<code>Multimap</code>结构存放长轮询，一个key可以对应多个value。一旦监听到key发生变化，对应的所有长轮询都会响应。前端得到非请求超时的状态码，知晓数据变更，主动查询未读消息数接口，更新页面数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/polling\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PollingController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存放监听某个Id的长轮询集合</span></span><br><span class=\"line\">    <span class=\"comment\">// 线程同步结构</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Multimap&lt;String, DeferredResult&lt;String&gt;&gt; watchRequests = Multimaps.synchronizedMultimap(HashMultimap.create());</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置监听</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(path = <span class=\"string\">\"watch/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DeferredResult&lt;String&gt; <span class=\"title\">watch</span><span class=\"params\">(@PathVariable String id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 延迟对象设置超时时间</span></span><br><span class=\"line\">        DeferredResult&lt;String&gt; deferredResult = <span class=\"keyword\">new</span> DeferredResult&lt;&gt;(TIME_OUT);</span><br><span class=\"line\">        <span class=\"comment\">// 异步请求完成时移除 key，防止内存溢出</span></span><br><span class=\"line\">        deferredResult.onCompletion(() -&gt; &#123;</span><br><span class=\"line\">            watchRequests.remove(id, deferredResult);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 注册长轮询请求</span></span><br><span class=\"line\">        watchRequests.put(id, deferredResult);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> deferredResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 变更数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(path = <span class=\"string\">\"publish/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">publish</span><span class=\"params\">(@PathVariable String id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 数据变更 取出监听ID的所有长轮询请求，并一一响应处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (watchRequests.containsKey(id)) &#123;</span><br><span class=\"line\">            Collection&lt;DeferredResult&lt;String&gt;&gt; deferredResults = watchRequests.get(id);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (DeferredResult&lt;String&gt; deferredResult : deferredResults) &#123;</span><br><span class=\"line\">                deferredResult.setResult(<span class=\"string\">\"我更新了\"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>当请求超过设置的超时时间，会抛出<code>AsyncRequestTimeoutException</code>异常，这里直接用<code>@ControllerAdvice</code>全局捕获统一返回即可，前端获取约定好的状态码后再次发起长轮询请求，如此往复调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncRequestTimeoutHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseStatus</span>(HttpStatus.NOT_MODIFIED)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(AsyncRequestTimeoutException<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">public</span> <span class=\"title\">String</span> <span class=\"title\">asyncRequestTimeoutHandler</span>(<span class=\"title\">AsyncRequestTimeoutException</span> <span class=\"title\">e</span>) </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"异步请求超时\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"304\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们来测试一下，首先页面发起长轮询请求<code>/polling/watch/10086</code>监听消息更变，请求被挂起，不变更数据直至超时，再次发起了长轮询请求；紧接着手动变更数据<code>/polling/publish/10086</code>，长轮询得到响应，前端处理业务逻辑完成后再次发起请求，如此循环往复。</p>\n<p><img src=\"../../../../img/web实时消息推送/13707fee6eb0bf7e8a9a52789f2741cb.gif\" alt=\"img\"></p>\n<p>长轮询相比于短轮询在性能上提升了很多，但依然会产生较多的请求，这是它的一点不完美的地方。</p>\n<h3 id=\"iframe流\"><a href=\"#iframe流\" class=\"headerlink\" title=\"iframe流\"></a>iframe流</h3><p>iframe流就是在页面中插入一个隐藏的`frameLabelStart—frameLabelEnd</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务端直接组装html、js脚本数据向&#96;response&#96;写入就行了</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/iframe\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IframeController</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@GetMapping</span>(path = <span class=\"string\">\"message\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">message</span><span class=\"params\">(HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            response.setHeader(<span class=\"string\">\"Pragma\"</span>, <span class=\"string\">\"no-cache\"</span>);</span><br><span class=\"line\">            response.setDateHeader(<span class=\"string\">\"Expires\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            response.setHeader(<span class=\"string\">\"Cache-Control\"</span>, <span class=\"string\">\"no-cache,no-store\"</span>);</span><br><span class=\"line\">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class=\"line\">            response.getWriter().print(<span class=\"string\">\" &lt;script type=\\\"text/javascript\\\"&gt;\\n\"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"parent.document.getElementById('clock').innerHTML = \\\"\"</span> + count.get() + <span class=\"string\">\"\\\";\"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"parent.document.getElementById('count').innerHTML = \\\"\"</span> + count.get() + <span class=\"string\">\"\\\";\"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"&lt;/script&gt;\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但我个人不推荐，因为它在浏览器上会显示请求未加载完，图标会不停旋转，简直是强迫症杀手。</p>\n<p><img src=\"../../../../img/web实时消息推送/0f22d0ebd18fe3cd8ec91c5652232b37.gif\" alt=\"\"></p>\n<h3 id=\"SSE-我的方式\"><a href=\"#SSE-我的方式\" class=\"headerlink\" title=\"SSE (我的方式)\"></a>SSE (我的方式)</h3><p>很多人可能不知道，服务端向客户端推送消息，其实除了可以用<code>WebSocket</code>这种耳熟能详的机制外，还有一种服务器发送事件(<code>Server-sent events</code>)，简称<code>SSE</code>。</p>\n<p><code>SSE</code>它是基于<code>HTTP</code>协议的，我们知道一般意义上的HTTP协议是无法做到服务端主动向客户端推送消息的，但SSE是个例外，它变换了一种思路。</p>\n<p><img src=\"../../../../img/web实时消息推送/77495aaf0418801529e10ab463deb478.png\" alt=\"\"></p>\n<p>SSE在服务器和客户端之间打开一个单向通道，服务端响应的不再是一次性的数据包而是<code>text/event-stream</code>类型的数据流信息，在有数据变更时从服务器流式传输到客户端。</p>\n<p>整体的实现思路有点类似于在线视频播放，视频流会连续不断的推送到浏览器，你也可以理解成，客户端在完成一次用时很长（网络不畅）的下载。</p>\n<p><img src=\"../../../../img/web实时消息推送/5ef4004c847b2456203e832c46c6c894.png\" alt=\"\"></p>\n<p><code>SSE</code>与<code>WebSocket</code>作用相似，都可以建立服务端与浏览器之间的通信，实现服务端向客户端推送消息，但还是有些许不同：</p>\n<ul>\n<li>SSE 是基于HTTP协议的，它们不需要特殊的协议或服务器实现即可工作；<code>WebSocket</code>需单独服务器来处理协议。</li>\n<li>SSE 单向通信，只能由服务端向客户端单向通信；webSocket全双工通信，即通信的双方可以同时发送和接受信息。</li>\n<li>SSE 实现简单开发成本低，无需引入其他组件；WebSocket传输数据需做二次解析，开发门槛高一些。</li>\n<li>SSE 默认支持断线重连；WebSocket则需要自己实现。</li>\n<li>SSE 只能传送文本消息，二进制数据需要经过编码后传送；WebSocket默认支持传送二进制数据。</li>\n</ul>\n<p><strong>SSE 与 WebSocket 该如何选择？</strong></p>\n<blockquote>\n<p>技术并没有好坏之分，只有哪个更合适</p>\n</blockquote>\n<p>SSE好像一直不被大家所熟知，一部分原因是出现了WebSockets，这个提供了更丰富的协议来执行双向、全双工通信。对于游戏、即时通信以及需要双向近乎实时更新的场景，拥有双向通道更具吸引力。</p>\n<p>但是，在某些情况下，不需要从客户端发送数据。而你只需要一些服务器操作的更新。比如：站内信、未读消息数、状态更新、股票行情、监控数量等场景，<code>SEE</code>不管是从实现的难易和成本上都更加有优势。此外，SSE 具有<code>WebSockets</code>在设计上缺乏的多种功能，例如：<code>自动重新连接</code>、<code>事件ID</code>和<code>发送任意事件</code>的能力。</p>\n<p>前端只需进行一次HTTP请求，带上唯一ID，打开事件流，监听服务端推送的事件就可以了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> source = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> userId = <span class=\"number\">7777</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.EventSource) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 建立连接</span></span><br><span class=\"line\">    source = <span class=\"keyword\">new</span> EventSource(<span class=\"string\">'http://localhost:7777/sse/sub/'</span>+userId);</span><br><span class=\"line\">    setMessageInnerHTML(<span class=\"string\">\"连接用户=\"</span> + userId);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 连接一旦建立，就会触发open事件</span></span><br><span class=\"line\"><span class=\"comment\">     * 另一种写法：source.onopen = function (event) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    source.addEventListener(<span class=\"string\">'open'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        setMessageInnerHTML(<span class=\"string\">\"建立连接。。。\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 客户端收到服务器发来的数据</span></span><br><span class=\"line\"><span class=\"comment\">     * 另一种写法：source.onmessage = function (event) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    source.addEventListener(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        setMessageInnerHTML(e.data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    setMessageInnerHTML(<span class=\"string\">\"你的浏览器不支持SSE\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务端的实现更简单，创建一个&#96;SseEmitter&#96;对象放入&#96;sseEmitterMap&#96;进行管理</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, SseEmitter&gt; sseEmitterMap = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     - 创建连接</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SseEmitter <span class=\"title\">connect</span><span class=\"params\">(String userId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 设置超时时间，0表示不过期。默认30秒</span></span><br><span class=\"line\">            SseEmitter sseEmitter = <span class=\"keyword\">new</span> SseEmitter(<span class=\"number\">0L</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 注册回调</span></span><br><span class=\"line\">            sseEmitter.onCompletion(completionCallBack(userId));</span><br><span class=\"line\">            sseEmitter.onError(errorCallBack(userId));</span><br><span class=\"line\">            sseEmitter.onTimeout(timeoutCallBack(userId));</span><br><span class=\"line\">            sseEmitterMap.put(userId, sseEmitter);</span><br><span class=\"line\">            count.getAndIncrement();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sseEmitter;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">\"创建新的sse连接异常，当前用户：&#123;&#125;\"</span>, userId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     - 给指定用户发送消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(String userId, String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sseEmitterMap.containsKey(userId)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                sseEmitterMap.get(userId).send(message);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">\"用户[&#123;&#125;]推送异常:&#123;&#125;\"</span>, userId, e.getMessage());</span><br><span class=\"line\">                removeUser(userId);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>我们模拟服务端推送消息，看下客户端收到了消息，和我们预期的效果一致。<br><img src=\"../../../../img/web实时消息推送/d8b00310d5105403a486e58533f0d791.gif\" alt=\"\"></p>\n<p><strong>注意：</strong> SSE不支持<code>IE</code>浏览器，对其他主流浏览器兼容性做的还不错。<br><img src=\"../../../../img/web实时消息推送/952a29307642bf8969eed00d52aeb47f.png\" alt=\"\"></p>\n<h3 id=\"MQTT\"><a href=\"#MQTT\" class=\"headerlink\" title=\"MQTT\"></a>MQTT</h3><p>什么是 MQTT协议？</p>\n<p><code>MQTT</code> 全称(Message Queue Telemetry Transport)：一种基于发布/订阅（<code>publish</code>/<code>subscribe</code>）模式的<code>轻量级</code>通讯协议，通过订阅相应的主题来获取消息，是物联网（<code>Internet of Thing</code>）中的一个标准传输协议。</p>\n<p>该协议将消息的发布者（<code>publisher</code>）与订阅者（<code>subscriber</code>）进行分离，因此可以在不可靠的网络环境中，为远程连接的设备提供可靠的消息服务，使用方式与传统的MQ有点类似。</p>\n<p><img src=\"../../../../img/web实时消息推送/20200609165130729.png\" alt=\"\"></p>\n<p><code>TCP</code>协议位于传输层，<code>MQTT</code> 协议位于应用层，<code>MQTT</code> 协议构建于<code>TCP/IP</code>协议上，也就是说只要支持<code>TCP/IP</code>协议栈的地方，都可以使用<code>MQTT</code>协议。</p>\n<p>为什么要用 MQTT协议？</p>\n<p><code>MQTT</code>协议为什么在物联网（IOT）中如此受偏爱？而不是其它协议，比如我们更为熟悉的 <code>HTTP</code>协议呢？</p>\n<ul>\n<li><p>首先<code>HTTP</code>协议它是一种同步协议，客户端请求后需要等待服务器的响应。而在物联网（IOT）环境中，设备会很受制于环境的影响，比如带宽低、网络延迟高、网络通信不稳定等，显然异步消息协议更为适合<code>IOT</code>应用程序。</p>\n</li>\n<li><p><code>HTTP</code>是单向的，如果要获取消息客户端必须发起连接，而在物联网（IOT）应用程序中，设备或传感器往往都是客户端，这意味着它们无法被动地接收来自网络的命令。</p>\n</li>\n<li><p>通常需要将一条命令或者消息，发送到网络上的所有设备上。<code>HTTP</code>要实现这样的功能不但很困难，而且成本极高。</p>\n</li>\n</ul>\n<p>具体的MQTT协议介绍和实践，这里我就不再赘述了，大家可以参考我之前的两篇文章，里边写的也都很详细了。</p>\n<p>MQTT协议的介绍</p>\n<p><a href=\"https://mp.weixin.qq.com/s/udFE6k9pPetIWsa6KeErrA\" target=\"_blank\" rel=\"noopener\">我也没想到 springboot + rabbitmq 做智能家居，会这么简单</a></p>\n<p>MQTT实现消息推送</p>\n<p><a href=\"https://mp.weixin.qq.com/s/U-fUGr9i1MVa4PoVyiDFCg\" target=\"_blank\" rel=\"noopener\">未读消息（小红点），前端 与 RabbitMQ 实时消息推送实践，贼简单~</a></p>\n<h3 id=\"Websocket\"><a href=\"#Websocket\" class=\"headerlink\" title=\"Websocket\"></a>Websocket</h3><p><code>websocket</code>应该是大家都比较熟悉的一种实现消息推送的方式，上边我们在讲SSE的时候也和websocket进行过比较。</p>\n<p>WebSocket是一种在<code>TCP</code>连接上进行全双工通信的协议，建立客户端和服务器之间的通信渠道。浏览器和服务器仅需一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p>\n<p><img src=\"../../../../img/web实时消息推送/79b43eb8ca0a7ebd482dbb0056b5ff97.png\" alt=\"图片源于网络\"></p>\n<p>springboot整合websocket，先引入<code>websocket</code>相关的工具包，和SSE相比额外的开发成本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;spring-boot-starter-websocket&lt;&#x2F;artifactId&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务端使用&#96;@ServerEndpoint&#96;注解标注当前类为一个websocket服务器，客户端可以通过&#96;ws:&#x2F;&#x2F;localhost:7777&#x2F;webSocket&#x2F;10086&#96;来连接到WebSocket服务器端。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> top.sunfy.modules.security.security;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.OnMessage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.OnOpen;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.PathParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"meta\">@ServerEndpoint</span>(<span class=\"string\">\"/websocket/&#123;userId&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSocketServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//与某个客户端的连接会话，需要通过它来给客户端发送数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Session session;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> CopyOnWriteArraySet&lt;WebSocketServer&gt; webSockets = <span class=\"keyword\">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 用来存在线连接数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, Session&gt; sessionPool = <span class=\"keyword\">new</span> HashMap&lt;String, Session&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 链接成功调用的方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@OnOpen</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(Session session, @PathParam(value = <span class=\"string\">\"userId\"</span>)</span> String userId) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.session = session;</span><br><span class=\"line\">            webSockets.add(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            sessionPool.put(userId, session);</span><br><span class=\"line\">            log.info(<span class=\"string\">\"websocket消息: 有新的连接，总数为:\"</span> + webSockets.size());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 收到客户端消息后调用的方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@OnMessage</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"websocket消息: 收到客户端消息:\"</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 此为单点消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendOneMessage</span><span class=\"params\">(String userId, String message)</span> </span>&#123;</span><br><span class=\"line\">        Session session = sessionPool.get(userId);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (session != <span class=\"keyword\">null</span> &amp;&amp; session.isOpen()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                log.info(<span class=\"string\">\"websocket消: 单点消息:\"</span> + message);</span><br><span class=\"line\">                session.getAsyncRemote().sendText(message);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前端初始化打开WebSocket连接，并监听连接状态，接收服务端数据或向服务端发送数据。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ws = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">'ws://localhost:7777/webSocket/10086'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获取连接状态</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'ws连接状态：'</span> + ws.readyState);</span><br><span class=\"line\"><span class=\"comment\">//监听是否连接成功</span></span><br><span class=\"line\">ws.onopen = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'ws连接状态：'</span> + ws.readyState);</span><br><span class=\"line\">    <span class=\"comment\">//连接成功则发送一个数据</span></span><br><span class=\"line\">    ws.send(<span class=\"string\">'test1'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 接听服务器发回的信息并处理展示</span></span><br><span class=\"line\">ws.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'接收到来自服务器的消息：'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">    <span class=\"comment\">//完成通信后关闭WebSocket连接</span></span><br><span class=\"line\">    ws.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 监听连接关闭事件</span></span><br><span class=\"line\">ws.onclose = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 监听整个过程中websocket的状态</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'ws连接状态：'</span> + ws.readyState);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 监听并处理error事件</span></span><br><span class=\"line\">ws.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendMessage</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> content = $(<span class=\"string\">\"#message\"</span>).val();</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: <span class=\"string\">'/socket/publish?userId=10086&amp;message='</span> + content,</span><br><span class=\"line\">        type: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">        data: &#123; <span class=\"string\">\"id\"</span>: <span class=\"string\">\"7777\"</span>, <span class=\"string\">\"content\"</span>: content &#125;,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>页面初始化建立websocket连接，之后就可以进行双向通信了，效果还不错</p>\n<p><img src=\"../../../../img/web实时消息推送/d9630dfefd0177766bcc78ac8f182df3.png\" alt=\"\"></p>\n<p><img src=\"../../../../img/web实时消息推送/c98372bd32fc4ea3651905028649aa17.gif\" alt=\"\"></p>\n<h3 id=\"自定义推送\"><a href=\"#自定义推送\" class=\"headerlink\" title=\"自定义推送\"></a>自定义推送</h3><p>上边我们给我出了6种方案的原理和代码实现，但在实际业务开发过程中，不能盲目的直接拿过来用，还是要结合自身系统业务的特点和实际场景来选择合适的方案。</p>\n<p>推送最直接的方式就是使用第三推送平台，毕竟<strong>钱能解决的需求都不是问题</strong>，无需复杂的开发运维，直接可以使用，省时、省力、省心，像goEasy、极光推送都是很不错的三方服务商。</p>\n<p>一般大型公司都有自研的消息推送平台，像我们本次实现的web站内信只是平台上的一个触点而已，短信、邮件、微信公众号、小程序凡是可以触达到用户的渠道都可以接入进来。</p>\n<p><img src=\"../../../../img/web实时消息推送/205f4841-1ea9-4a96-8f2d-596563d1a1e8.png\" alt=\"图片来源于网络\"></p>\n<p>消息推送系统内部是相当复杂的，诸如消息内容的维护审核、圈定推送人群、触达过滤拦截（推送的规则频次、时段、数量、黑白名单、关键词等等）、推送失败补偿非常多的模块，技术上涉及到大数据量、高并发的场景也很多。所以我们今天的实现方式在这个庞大的系统面前只是小打小闹。</p>\n<h3 id=\"Github地址\"><a href=\"#Github地址\" class=\"headerlink\" title=\"Github地址\"></a>Github地址</h3><p>文中所提到的案例我都一一的做了实现，整理放在了<code>Github</code>上</p>\n<blockquote>\n<p>传送门：<a href=\"https://github.com/chengxy-nds/Springboot-Notebook/tree/master/springboot-realtime-data\" target=\"_blank\" rel=\"noopener\">https://github.com/chengxy-nds/Springboot-Notebook/tree/master/springboot-realtime-data</a></p>\n</blockquote>\n<p>无论你是刚入行、还是已经有几年经验的程序员，相信这份面试提纲都会给你不少助力</p>\n<p><img src=\"../../../../img/web实时消息推送/20201128210231910.png\" alt=\"\"></p>\n","more":"<p>现在要实现一个站内信web消息推送的功能，对，就是下图这个小红点，一个很常用的功能。</p>\n<p><img src=\"../../../../img/web实时消息推送/11888c39774a6de57b989566e678fdf0.png\" alt=\"img\"></p>\n<p>不过他还没想好用什么方式做，这里我帮他整理了一下几种方案，并简单做了实现。</p>\n<p><img src=\"../../../../img/web实时消息推送/b08fbb575337cc8a4e27a1274fb70eff.png\" alt=\"img\"></p>\n<p><a href=\"https://github.com/chengxy-nds/Springboot-Notebook/tree/master/springboot-realtime-data\" target=\"_blank\" rel=\"noopener\">案例下载</a></p>\n<h3 id=\"什么是消息推送（push）\"><a href=\"#什么是消息推送（push）\" class=\"headerlink\" title=\"什么是消息推送（push）\"></a>什么是消息推送（push）</h3><p>推送的场景比较多，比如有人关注我的公众号，这时我就会收到一条推送消息，以此来吸引我点击打开应用。</p>\n<p>消息推送(<code>push</code>)通常是指网站的运营工作等人员，通过某种工具对用户当前网页或移动设备APP进行的主动消息推送。</p>\n<p>消息推送一般又分为<code>web端消息推送</code>和<code>移动端消息推送</code>。</p>\n<p><img src=\"../../../../img/web实时消息推送/d5b8617c37fd489896603d562f8a98c1.png\" alt=\"img\"></p>\n<p>上边的这种属于移动端消息推送，web端消息推送常见的诸如站内信、未读邮件数量、监控报警数量等，应用的也非常广泛。</p>\n<p><img src=\"../../../../img/web实时消息推送/15ead5d6e8b7afcfdccbcec02a181301.png\" alt=\"img\"></p>\n<p>在具体实现之前，咱们再来分析一下前边的需求，其实功能很简单，只要触发某个事件（主动分享了资源或者后台主动推送消息），web页面的通知小红点就会实时的<code>+1</code>就可以了。</p>\n<p>通常在服务端会有若干张消息推送表，用来记录用户触发不同事件所推送不同类型的消息，前端主动查询（拉）或者被动接收（推）用户所有未读的消息数。</p>\n<p><img src=\"../../../../img/web实时消息推送/198443b7c2f609da3bdf5b507bca0918.png\" alt=\"img\"></p>\n<p>消息推送无非是推（<code>push</code>）和拉（<code>pull</code>）两种形式，下边我们逐个了解下。</p>\n<h3 id=\"短轮询\"><a href=\"#短轮询\" class=\"headerlink\" title=\"短轮询\"></a>短轮询</h3><p>轮询(<code>polling</code>)应该是实现消息推送方案中最简单的一种，这里我们暂且将轮询分为<code>短轮询</code>和<code>长轮询</code>。</p>\n<p>短轮询很好理解，指定的时间间隔，由浏览器向服务器发出<code>HTTP</code>请求，服务器实时返回未读消息数据给客户端，浏览器再做渲染显示。</p>\n<p>一个简单的JS定时器就可以搞定，每秒钟请求一次未读消息数接口，返回的数据展示即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 方法请求</span></span><br><span class=\"line\">  messageCount().then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (res.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.messageCount = res.data</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>效果还是可以的，短轮询实现固然简单，缺点也是显而易见，由于推送数据并不会频繁变更，无论后端此时是否有新的消息产生，客户端都会进行请求，势必会对服务端造成很大压力，浪费带宽和服务器资源。</p>\n<p><img src=\"../../../../img/web实时消息推送/b38f9f691b96677bbb27e90a359ca164.gif\" alt=\"img\"></p>\n<h3 id=\"长轮询\"><a href=\"#长轮询\" class=\"headerlink\" title=\"长轮询\"></a>长轮询</h3><p>长轮询是对上边短轮询的一种改进版本，在尽可能减少对服务器资源浪费的同时，保证消息的相对实时性。长轮询在中间件中应用的很广泛，比如<code>Nacos</code>和<code>apollo</code>配置中心，消息队列<code>kafka</code>、<code>RocketMQ</code>中都有用到长轮询。</p>\n<p><a href=\"https://mp.weixin.qq.com/s/94ftESkDoZI9gAGflLiGwg\" target=\"_blank\" rel=\"noopener\">Nacos配置中心交互模型是push还是pull？</a>一文中我详细介绍过<code>Nacos</code>长轮询的实现原理，感兴趣的小伙伴可以瞅瞅。</p>\n<p>这次我使用<code>apollo</code>配置中心实现长轮询的方式，应用了一个类<code>DeferredResult</code>，它是在<code>servelet3.0</code>后经过Spring封装提供的一种异步请求机制，直意就是延迟结果。</p>\n<p><img src=\"../../../../img/web实时消息推送/b1c885fb4ebaf89dddb3f6a57969f2d0.png\" alt=\"img\"></p>\n<p><code>DeferredResult</code>可以允许容器线程快速释放占用的资源，不阻塞请求线程，以此接受更多的请求提升系统的吞吐量，然后启动异步工作线程处理真正的业务逻辑，处理完成调用<code>DeferredResult.setResult(200)</code>提交响应结果。</p>\n<p>下边我们用长轮询来实现消息推送。</p>\n<p>因为一个ID可能会被多个长轮询请求监听，所以我采用了<code>guava</code>包提供的<code>Multimap</code>结构存放长轮询，一个key可以对应多个value。一旦监听到key发生变化，对应的所有长轮询都会响应。前端得到非请求超时的状态码，知晓数据变更，主动查询未读消息数接口，更新页面数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/polling\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PollingController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 存放监听某个Id的长轮询集合</span></span><br><span class=\"line\">    <span class=\"comment\">// 线程同步结构</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Multimap&lt;String, DeferredResult&lt;String&gt;&gt; watchRequests = Multimaps.synchronizedMultimap(HashMultimap.create());</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置监听</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(path = <span class=\"string\">\"watch/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DeferredResult&lt;String&gt; <span class=\"title\">watch</span><span class=\"params\">(@PathVariable String id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 延迟对象设置超时时间</span></span><br><span class=\"line\">        DeferredResult&lt;String&gt; deferredResult = <span class=\"keyword\">new</span> DeferredResult&lt;&gt;(TIME_OUT);</span><br><span class=\"line\">        <span class=\"comment\">// 异步请求完成时移除 key，防止内存溢出</span></span><br><span class=\"line\">        deferredResult.onCompletion(() -&gt; &#123;</span><br><span class=\"line\">            watchRequests.remove(id, deferredResult);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 注册长轮询请求</span></span><br><span class=\"line\">        watchRequests.put(id, deferredResult);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> deferredResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 变更数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(path = <span class=\"string\">\"publish/&#123;id&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">publish</span><span class=\"params\">(@PathVariable String id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 数据变更 取出监听ID的所有长轮询请求，并一一响应处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (watchRequests.containsKey(id)) &#123;</span><br><span class=\"line\">            Collection&lt;DeferredResult&lt;String&gt;&gt; deferredResults = watchRequests.get(id);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (DeferredResult&lt;String&gt; deferredResult : deferredResults) &#123;</span><br><span class=\"line\">                deferredResult.setResult(<span class=\"string\">\"我更新了\"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>当请求超过设置的超时时间，会抛出<code>AsyncRequestTimeoutException</code>异常，这里直接用<code>@ControllerAdvice</code>全局捕获统一返回即可，前端获取约定好的状态码后再次发起长轮询请求，如此往复调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncRequestTimeoutHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ResponseStatus</span>(HttpStatus.NOT_MODIFIED)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(AsyncRequestTimeoutException<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">public</span> <span class=\"title\">String</span> <span class=\"title\">asyncRequestTimeoutHandler</span>(<span class=\"title\">AsyncRequestTimeoutException</span> <span class=\"title\">e</span>) </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"异步请求超时\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"304\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们来测试一下，首先页面发起长轮询请求<code>/polling/watch/10086</code>监听消息更变，请求被挂起，不变更数据直至超时，再次发起了长轮询请求；紧接着手动变更数据<code>/polling/publish/10086</code>，长轮询得到响应，前端处理业务逻辑完成后再次发起请求，如此循环往复。</p>\n<p><img src=\"../../../../img/web实时消息推送/13707fee6eb0bf7e8a9a52789f2741cb.gif\" alt=\"img\"></p>\n<p>长轮询相比于短轮询在性能上提升了很多，但依然会产生较多的请求，这是它的一点不完美的地方。</p>\n<h3 id=\"iframe流\"><a href=\"#iframe流\" class=\"headerlink\" title=\"iframe流\"></a>iframe流</h3><p>iframe流就是在页面中插入一个隐藏的`frameLabelStart—frameLabelEnd</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务端直接组装html、js脚本数据向&#96;response&#96;写入就行了</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/iframe\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IframeController</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@GetMapping</span>(path = <span class=\"string\">\"message\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">message</span><span class=\"params\">(HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            response.setHeader(<span class=\"string\">\"Pragma\"</span>, <span class=\"string\">\"no-cache\"</span>);</span><br><span class=\"line\">            response.setDateHeader(<span class=\"string\">\"Expires\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            response.setHeader(<span class=\"string\">\"Cache-Control\"</span>, <span class=\"string\">\"no-cache,no-store\"</span>);</span><br><span class=\"line\">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class=\"line\">            response.getWriter().print(<span class=\"string\">\" &lt;script type=\\\"text/javascript\\\"&gt;\\n\"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"parent.document.getElementById('clock').innerHTML = \\\"\"</span> + count.get() + <span class=\"string\">\"\\\";\"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"parent.document.getElementById('count').innerHTML = \\\"\"</span> + count.get() + <span class=\"string\">\"\\\";\"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"&lt;/script&gt;\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但我个人不推荐，因为它在浏览器上会显示请求未加载完，图标会不停旋转，简直是强迫症杀手。</p>\n<p><img src=\"../../../../img/web实时消息推送/0f22d0ebd18fe3cd8ec91c5652232b37.gif\" alt=\"\"></p>\n<h3 id=\"SSE-我的方式\"><a href=\"#SSE-我的方式\" class=\"headerlink\" title=\"SSE (我的方式)\"></a>SSE (我的方式)</h3><p>很多人可能不知道，服务端向客户端推送消息，其实除了可以用<code>WebSocket</code>这种耳熟能详的机制外，还有一种服务器发送事件(<code>Server-sent events</code>)，简称<code>SSE</code>。</p>\n<p><code>SSE</code>它是基于<code>HTTP</code>协议的，我们知道一般意义上的HTTP协议是无法做到服务端主动向客户端推送消息的，但SSE是个例外，它变换了一种思路。</p>\n<p><img src=\"../../../../img/web实时消息推送/77495aaf0418801529e10ab463deb478.png\" alt=\"\"></p>\n<p>SSE在服务器和客户端之间打开一个单向通道，服务端响应的不再是一次性的数据包而是<code>text/event-stream</code>类型的数据流信息，在有数据变更时从服务器流式传输到客户端。</p>\n<p>整体的实现思路有点类似于在线视频播放，视频流会连续不断的推送到浏览器，你也可以理解成，客户端在完成一次用时很长（网络不畅）的下载。</p>\n<p><img src=\"../../../../img/web实时消息推送/5ef4004c847b2456203e832c46c6c894.png\" alt=\"\"></p>\n<p><code>SSE</code>与<code>WebSocket</code>作用相似，都可以建立服务端与浏览器之间的通信，实现服务端向客户端推送消息，但还是有些许不同：</p>\n<ul>\n<li>SSE 是基于HTTP协议的，它们不需要特殊的协议或服务器实现即可工作；<code>WebSocket</code>需单独服务器来处理协议。</li>\n<li>SSE 单向通信，只能由服务端向客户端单向通信；webSocket全双工通信，即通信的双方可以同时发送和接受信息。</li>\n<li>SSE 实现简单开发成本低，无需引入其他组件；WebSocket传输数据需做二次解析，开发门槛高一些。</li>\n<li>SSE 默认支持断线重连；WebSocket则需要自己实现。</li>\n<li>SSE 只能传送文本消息，二进制数据需要经过编码后传送；WebSocket默认支持传送二进制数据。</li>\n</ul>\n<p><strong>SSE 与 WebSocket 该如何选择？</strong></p>\n<blockquote>\n<p>技术并没有好坏之分，只有哪个更合适</p>\n</blockquote>\n<p>SSE好像一直不被大家所熟知，一部分原因是出现了WebSockets，这个提供了更丰富的协议来执行双向、全双工通信。对于游戏、即时通信以及需要双向近乎实时更新的场景，拥有双向通道更具吸引力。</p>\n<p>但是，在某些情况下，不需要从客户端发送数据。而你只需要一些服务器操作的更新。比如：站内信、未读消息数、状态更新、股票行情、监控数量等场景，<code>SEE</code>不管是从实现的难易和成本上都更加有优势。此外，SSE 具有<code>WebSockets</code>在设计上缺乏的多种功能，例如：<code>自动重新连接</code>、<code>事件ID</code>和<code>发送任意事件</code>的能力。</p>\n<p>前端只需进行一次HTTP请求，带上唯一ID，打开事件流，监听服务端推送的事件就可以了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> source = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> userId = <span class=\"number\">7777</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.EventSource) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 建立连接</span></span><br><span class=\"line\">    source = <span class=\"keyword\">new</span> EventSource(<span class=\"string\">'http://localhost:7777/sse/sub/'</span>+userId);</span><br><span class=\"line\">    setMessageInnerHTML(<span class=\"string\">\"连接用户=\"</span> + userId);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 连接一旦建立，就会触发open事件</span></span><br><span class=\"line\"><span class=\"comment\">     * 另一种写法：source.onopen = function (event) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    source.addEventListener(<span class=\"string\">'open'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        setMessageInnerHTML(<span class=\"string\">\"建立连接。。。\"</span>);</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 客户端收到服务器发来的数据</span></span><br><span class=\"line\"><span class=\"comment\">     * 另一种写法：source.onmessage = function (event) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    source.addEventListener(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        setMessageInnerHTML(e.data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    setMessageInnerHTML(<span class=\"string\">\"你的浏览器不支持SSE\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务端的实现更简单，创建一个&#96;SseEmitter&#96;对象放入&#96;sseEmitterMap&#96;进行管理</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, SseEmitter&gt; sseEmitterMap = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     - 创建连接</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SseEmitter <span class=\"title\">connect</span><span class=\"params\">(String userId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 设置超时时间，0表示不过期。默认30秒</span></span><br><span class=\"line\">            SseEmitter sseEmitter = <span class=\"keyword\">new</span> SseEmitter(<span class=\"number\">0L</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 注册回调</span></span><br><span class=\"line\">            sseEmitter.onCompletion(completionCallBack(userId));</span><br><span class=\"line\">            sseEmitter.onError(errorCallBack(userId));</span><br><span class=\"line\">            sseEmitter.onTimeout(timeoutCallBack(userId));</span><br><span class=\"line\">            sseEmitterMap.put(userId, sseEmitter);</span><br><span class=\"line\">            count.getAndIncrement();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sseEmitter;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">\"创建新的sse连接异常，当前用户：&#123;&#125;\"</span>, userId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     - 给指定用户发送消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(String userId, String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sseEmitterMap.containsKey(userId)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                sseEmitterMap.get(userId).send(message);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">\"用户[&#123;&#125;]推送异常:&#123;&#125;\"</span>, userId, e.getMessage());</span><br><span class=\"line\">                removeUser(userId);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>我们模拟服务端推送消息，看下客户端收到了消息，和我们预期的效果一致。<br><img src=\"../../../../img/web实时消息推送/d8b00310d5105403a486e58533f0d791.gif\" alt=\"\"></p>\n<p><strong>注意：</strong> SSE不支持<code>IE</code>浏览器，对其他主流浏览器兼容性做的还不错。<br><img src=\"../../../../img/web实时消息推送/952a29307642bf8969eed00d52aeb47f.png\" alt=\"\"></p>\n<h3 id=\"MQTT\"><a href=\"#MQTT\" class=\"headerlink\" title=\"MQTT\"></a>MQTT</h3><p>什么是 MQTT协议？</p>\n<p><code>MQTT</code> 全称(Message Queue Telemetry Transport)：一种基于发布/订阅（<code>publish</code>/<code>subscribe</code>）模式的<code>轻量级</code>通讯协议，通过订阅相应的主题来获取消息，是物联网（<code>Internet of Thing</code>）中的一个标准传输协议。</p>\n<p>该协议将消息的发布者（<code>publisher</code>）与订阅者（<code>subscriber</code>）进行分离，因此可以在不可靠的网络环境中，为远程连接的设备提供可靠的消息服务，使用方式与传统的MQ有点类似。</p>\n<p><img src=\"../../../../img/web实时消息推送/20200609165130729.png\" alt=\"\"></p>\n<p><code>TCP</code>协议位于传输层，<code>MQTT</code> 协议位于应用层，<code>MQTT</code> 协议构建于<code>TCP/IP</code>协议上，也就是说只要支持<code>TCP/IP</code>协议栈的地方，都可以使用<code>MQTT</code>协议。</p>\n<p>为什么要用 MQTT协议？</p>\n<p><code>MQTT</code>协议为什么在物联网（IOT）中如此受偏爱？而不是其它协议，比如我们更为熟悉的 <code>HTTP</code>协议呢？</p>\n<ul>\n<li><p>首先<code>HTTP</code>协议它是一种同步协议，客户端请求后需要等待服务器的响应。而在物联网（IOT）环境中，设备会很受制于环境的影响，比如带宽低、网络延迟高、网络通信不稳定等，显然异步消息协议更为适合<code>IOT</code>应用程序。</p>\n</li>\n<li><p><code>HTTP</code>是单向的，如果要获取消息客户端必须发起连接，而在物联网（IOT）应用程序中，设备或传感器往往都是客户端，这意味着它们无法被动地接收来自网络的命令。</p>\n</li>\n<li><p>通常需要将一条命令或者消息，发送到网络上的所有设备上。<code>HTTP</code>要实现这样的功能不但很困难，而且成本极高。</p>\n</li>\n</ul>\n<p>具体的MQTT协议介绍和实践，这里我就不再赘述了，大家可以参考我之前的两篇文章，里边写的也都很详细了。</p>\n<p>MQTT协议的介绍</p>\n<p><a href=\"https://mp.weixin.qq.com/s/udFE6k9pPetIWsa6KeErrA\" target=\"_blank\" rel=\"noopener\">我也没想到 springboot + rabbitmq 做智能家居，会这么简单</a></p>\n<p>MQTT实现消息推送</p>\n<p><a href=\"https://mp.weixin.qq.com/s/U-fUGr9i1MVa4PoVyiDFCg\" target=\"_blank\" rel=\"noopener\">未读消息（小红点），前端 与 RabbitMQ 实时消息推送实践，贼简单~</a></p>\n<h3 id=\"Websocket\"><a href=\"#Websocket\" class=\"headerlink\" title=\"Websocket\"></a>Websocket</h3><p><code>websocket</code>应该是大家都比较熟悉的一种实现消息推送的方式，上边我们在讲SSE的时候也和websocket进行过比较。</p>\n<p>WebSocket是一种在<code>TCP</code>连接上进行全双工通信的协议，建立客户端和服务器之间的通信渠道。浏览器和服务器仅需一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p>\n<p><img src=\"../../../../img/web实时消息推送/79b43eb8ca0a7ebd482dbb0056b5ff97.png\" alt=\"图片源于网络\"></p>\n<p>springboot整合websocket，先引入<code>websocket</code>相关的工具包，和SSE相比额外的开发成本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;spring-boot-starter-websocket&lt;&#x2F;artifactId&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务端使用&#96;@ServerEndpoint&#96;注解标注当前类为一个websocket服务器，客户端可以通过&#96;ws:&#x2F;&#x2F;localhost:7777&#x2F;webSocket&#x2F;10086&#96;来连接到WebSocket服务器端。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> top.sunfy.modules.security.security;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.OnMessage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.OnOpen;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.PathParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"meta\">@ServerEndpoint</span>(<span class=\"string\">\"/websocket/&#123;userId&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSocketServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//与某个客户端的连接会话，需要通过它来给客户端发送数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Session session;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> CopyOnWriteArraySet&lt;WebSocketServer&gt; webSockets = <span class=\"keyword\">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 用来存在线连接数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, Session&gt; sessionPool = <span class=\"keyword\">new</span> HashMap&lt;String, Session&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 链接成功调用的方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@OnOpen</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(Session session, @PathParam(value = <span class=\"string\">\"userId\"</span>)</span> String userId) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.session = session;</span><br><span class=\"line\">            webSockets.add(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            sessionPool.put(userId, session);</span><br><span class=\"line\">            log.info(<span class=\"string\">\"websocket消息: 有新的连接，总数为:\"</span> + webSockets.size());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 收到客户端消息后调用的方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@OnMessage</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"websocket消息: 收到客户端消息:\"</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 此为单点消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendOneMessage</span><span class=\"params\">(String userId, String message)</span> </span>&#123;</span><br><span class=\"line\">        Session session = sessionPool.get(userId);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (session != <span class=\"keyword\">null</span> &amp;&amp; session.isOpen()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                log.info(<span class=\"string\">\"websocket消: 单点消息:\"</span> + message);</span><br><span class=\"line\">                session.getAsyncRemote().sendText(message);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前端初始化打开WebSocket连接，并监听连接状态，接收服务端数据或向服务端发送数据。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ws = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">'ws://localhost:7777/webSocket/10086'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获取连接状态</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'ws连接状态：'</span> + ws.readyState);</span><br><span class=\"line\"><span class=\"comment\">//监听是否连接成功</span></span><br><span class=\"line\">ws.onopen = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'ws连接状态：'</span> + ws.readyState);</span><br><span class=\"line\">    <span class=\"comment\">//连接成功则发送一个数据</span></span><br><span class=\"line\">    ws.send(<span class=\"string\">'test1'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 接听服务器发回的信息并处理展示</span></span><br><span class=\"line\">ws.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'接收到来自服务器的消息：'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">    <span class=\"comment\">//完成通信后关闭WebSocket连接</span></span><br><span class=\"line\">    ws.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 监听连接关闭事件</span></span><br><span class=\"line\">ws.onclose = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 监听整个过程中websocket的状态</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'ws连接状态：'</span> + ws.readyState);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 监听并处理error事件</span></span><br><span class=\"line\">ws.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendMessage</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> content = $(<span class=\"string\">\"#message\"</span>).val();</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: <span class=\"string\">'/socket/publish?userId=10086&amp;message='</span> + content,</span><br><span class=\"line\">        type: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">        data: &#123; <span class=\"string\">\"id\"</span>: <span class=\"string\">\"7777\"</span>, <span class=\"string\">\"content\"</span>: content &#125;,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>页面初始化建立websocket连接，之后就可以进行双向通信了，效果还不错</p>\n<p><img src=\"../../../../img/web实时消息推送/d9630dfefd0177766bcc78ac8f182df3.png\" alt=\"\"></p>\n<p><img src=\"../../../../img/web实时消息推送/c98372bd32fc4ea3651905028649aa17.gif\" alt=\"\"></p>\n<h3 id=\"自定义推送\"><a href=\"#自定义推送\" class=\"headerlink\" title=\"自定义推送\"></a>自定义推送</h3><p>上边我们给我出了6种方案的原理和代码实现，但在实际业务开发过程中，不能盲目的直接拿过来用，还是要结合自身系统业务的特点和实际场景来选择合适的方案。</p>\n<p>推送最直接的方式就是使用第三推送平台，毕竟<strong>钱能解决的需求都不是问题</strong>，无需复杂的开发运维，直接可以使用，省时、省力、省心，像goEasy、极光推送都是很不错的三方服务商。</p>\n<p>一般大型公司都有自研的消息推送平台，像我们本次实现的web站内信只是平台上的一个触点而已，短信、邮件、微信公众号、小程序凡是可以触达到用户的渠道都可以接入进来。</p>\n<p><img src=\"../../../../img/web实时消息推送/205f4841-1ea9-4a96-8f2d-596563d1a1e8.png\" alt=\"图片来源于网络\"></p>\n<p>消息推送系统内部是相当复杂的，诸如消息内容的维护审核、圈定推送人群、触达过滤拦截（推送的规则频次、时段、数量、黑白名单、关键词等等）、推送失败补偿非常多的模块，技术上涉及到大数据量、高并发的场景也很多。所以我们今天的实现方式在这个庞大的系统面前只是小打小闹。</p>\n<h3 id=\"Github地址\"><a href=\"#Github地址\" class=\"headerlink\" title=\"Github地址\"></a>Github地址</h3><p>文中所提到的案例我都一一的做了实现，整理放在了<code>Github</code>上</p>\n<blockquote>\n<p>传送门：<a href=\"https://github.com/chengxy-nds/Springboot-Notebook/tree/master/springboot-realtime-data\" target=\"_blank\" rel=\"noopener\">https://github.com/chengxy-nds/Springboot-Notebook/tree/master/springboot-realtime-data</a></p>\n</blockquote>\n<p>无论你是刚入行、还是已经有几年经验的程序员，相信这份面试提纲都会给你不少助力</p>\n<p><img src=\"../../../../img/web实时消息推送/20201128210231910.png\" alt=\"\"></p>\n","next":{"title":"SQLSERVER数据库日期函数","path":"api/articles/resource-DB-SQLServer-日期函数.json","image":"/img/header_img/DB/Datefunction.png","num_read":934,"num_like":875,"num_collection":494,"num_comments":187},"prev":{"title":"GET 和 POST请求的本质区别","path":"api/articles/resource-java-Base-GET-和-POST请求的本质区别.json","image":"/img/header_img/java/get和post请求区别.png","num_read":1415,"num_like":1036,"num_collection":875,"num_comments":110},"categories":[{"name":"前端","path":"api/categories/前端.json","pathContent":"api/categories/前端","description":"包含vue、npm、html、Angular、js等相关","cover":"https://sunfy9.gitee.io/project/photo/project/desk.jpg"}],"tags":[{"name":"web","path":"api/tags/web.json","pathContent":"api/tags/web","description":"[web]暂未设置说明","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"}]}