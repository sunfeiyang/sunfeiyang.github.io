{"title":"js实现模糊查询的几种方法","num_read":838,"num_like":452,"num_collection":415,"num_comments":211,"slug":"resource-desk-js-js实现模糊查询","date":"2021-10-04T16:00:00.000Z","img":"/img/header_img/desk/vue.gif","_id":"clhrbp2cm005uo5lg0cwxge1v","project":"desk","subtitle":"模糊查询的几种方法","site":{"data":{}},"updated":"2022-01-12T05:33:46.000Z","author":"Sunfy","comments":true,"path":"api/articles/resource-desk-js-js实现模糊查询.json","webPath":"2021/10/05/resource-desk-js-js实现模糊查询/","permalink":"https://sunfy9.gitee.io/2021/10/05/resource-desk-js-js%E5%AE%9E%E7%8E%B0%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/","excerpt":null,"covers":null,"keywords":"sunfy, hexo-theme-snail","content":"<p>今天在做项目的时候，遇到一个需求是对列表进行模糊查询。对于模糊查询，一般都是传关键字给后端，由后端来做。但是有时候一些轻量级的列表前端来做可以减少ajax请求，在一定程度上提高用户体验。我目前的情况恰好是后台已经把全部数据给到前端了，所以就想用js对数据进行一个模糊查询。</p>\n<p>那么问题来了，要怎么进行模糊查询呢？头脑里一闪而过，字符串的indexof方法和正则表达式，其实还可以用其他的方法，比如字符串的match方法和split方法。既然有这么多种方法，那么该用哪种比较好呢？接下来我将对每一种方法进行简单的介绍。</p>\n<h5 id=\"1-indexof-方法\"><a href=\"#1-indexof-方法\" class=\"headerlink\" title=\"1. indexof 方法\"></a>1. indexof 方法</h5><blockquote>\n<p>语法：stringObject.indexOf(searchvalue, fromindex)</p>\n<p>参数：<strong>searchvalue</strong> 必需。规定需检索的字符串值。 <strong>fromindex</strong> 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。</p>\n<p>说明：该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。如果没有找到，将返回 -1。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用indexof方法实现模糊查询</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;Array&#125;  list     进行查询的数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;String&#125; keyWord  查询的关键词</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;Array&#125;           查询的结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fuzzyQuery</span><span class=\"params\">(list, keyWord)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">list</span>.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">list</span>[i].indexOf(keyWord) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      arr.push(<span class=\"keyword\">list</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-split-方法\"><a href=\"#2-split-方法\" class=\"headerlink\" title=\"2. split 方法\"></a>2. split 方法</h5><blockquote>\n<p>语法：stringObject.split(separator, howmany)<sunfy-line></p>\n<p>参数：<strong>separator</strong> 必需。字符串或正则表达式，从该参数指定的地方分割 stringObject。<strong>howmany</strong> 可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</p>\n<p>说明：该方法通过在 separator 指定的边界处将字符串 stringObject 分割成子串并返回子串数组。返回的数组中的字串不包括 separator 自身。如果 stringObject 中不存在 separator，将返回一个只包含stringObject的数组。故可以根据返回数组的长度来判断是否存在子字符串 separator 。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用spilt方法实现模糊查询</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;Array&#125;  list     进行查询的数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;String&#125; keyWord  查询的关键词</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;Array&#125;           查询的结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fuzzyQuery</span><span class=\"params\">(list, keyWord)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">list</span>.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">list</span>[i].split(keyWord).length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      arr.push(<span class=\"keyword\">list</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-match-方法\"><a href=\"#3-match-方法\" class=\"headerlink\" title=\"3. match 方法\"></a>3. match 方法</h5><blockquote>\n<p>语法：stringObject.match(searchvalue) 或 stringObject.match(regexp)</p>\n<p>参数：<strong>searchvalue</strong> 必需。规定要检索的字符串值。<strong>regexp</strong> 必需。规定要匹配的模式的 RegExp 对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。</p>\n<p>说明：该方法将在字符串 stringObject 内检索指定的值，或找到一个或多个正则表达式的匹配。如果没有找到任何匹配的文本，将返回 null 。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用match方法实现模糊查询</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;Array&#125;  list     进行查询的数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;String&#125; keyWord  查询的关键词</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;Array&#125;           查询的结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fuzzyQuery</span><span class=\"params\">(list, keyWord)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">list</span>.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">list</span>[i].match(keyWord) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      arr.push(<span class=\"keyword\">list</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-test方法（正则匹配）\"><a href=\"#4-test方法（正则匹配）\" class=\"headerlink\" title=\"4. test方法（正则匹配）\"></a>4. test方法（正则匹配）</h5><blockquote>\n<p>语法：RegExpObject.test(string)</p>\n<p>参数：<strong>string</strong> 必需。要检测的字符串。</p>\n<p>说明：该方法用于检测一个字符串是否匹配某个模式。如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用test方法实现模糊查询</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;Array&#125;  list     原数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;String&#125; keyWord  查询的关键词</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;Array&#125;           查询的结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fuzzyQuery</span><span class=\"params\">(list, keyWord)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> reg =  <span class=\"keyword\">new</span> RegExp(keyWord);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">list</span>.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (reg.test(<span class=\"keyword\">list</span>[i])) &#123;</span><br><span class=\"line\">      arr.push(<span class=\"keyword\">list</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h2><p>看了上面的简单介绍之后，我相信大家会发现其实四种方法在使用上都差不多，无聊的我萌生了对这四种方法进行性能测试的想法。以下为测试用例和结果。</p>\n<blockquote>\n<p>测试条件：一个长度为100的数组，每个方法测试50次，取平均值。<br> indexof 方法耗费时间： <strong>0.048ms</strong><br> split 方法耗费时间： <strong>0.037ms</strong><br> match 方法耗费时间： <strong>0.178ms</strong><br> test 方法耗费时间： <strong>0.039ms</strong></p>\n</blockquote>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ol>\n<li>从上面测试结果可以看出在几百几千甚至几万条数据量的情况下，前端去处理都是没问题的，相比发送一个 ajax 请求去后台来说，前端还是具有很大优势的，能节省不少时间。</li>\n<li>相比其他方法，<strong>match</strong> 方法性能最差，消耗的时间差不多是其他方法的3-4倍，虽说这一点点时间相比发送ajax来说，也算提高了很多既然我们在一开始就是为了提高用户体验，那么我们也应该追求极致啦，所以 <strong>match</strong> 选手落败。</li>\n<li>除了 <strong>match</strong> 方法，其他三个方法在性能上差不多。不过在这里有一点需要提出的就是， <strong>test</strong> 方法因为使用到了正则表达式，所以能够实现的功能会比较强大，写出来的代码也更加简洁。打个比方，在不区分大小写的模糊搜索条件下， <strong>test</strong> 方法只需在正则表达式中添加修饰符 i 即可实现不区分大小写，而 <strong>indexof</strong> 方法和 <strong>split</strong> 方法则要通过多次的方法调用和逻辑运算符才能实现效果。</li>\n</ol>\n","more":"<p>今天在做项目的时候，遇到一个需求是对列表进行模糊查询。对于模糊查询，一般都是传关键字给后端，由后端来做。但是有时候一些轻量级的列表前端来做可以减少ajax请求，在一定程度上提高用户体验。我目前的情况恰好是后台已经把全部数据给到前端了，所以就想用js对数据进行一个模糊查询。</p>\n<p>那么问题来了，要怎么进行模糊查询呢？头脑里一闪而过，字符串的indexof方法和正则表达式，其实还可以用其他的方法，比如字符串的match方法和split方法。既然有这么多种方法，那么该用哪种比较好呢？接下来我将对每一种方法进行简单的介绍。</p>\n<h5 id=\"1-indexof-方法\"><a href=\"#1-indexof-方法\" class=\"headerlink\" title=\"1. indexof 方法\"></a>1. indexof 方法</h5><blockquote>\n<p>语法：stringObject.indexOf(searchvalue, fromindex)</p>\n<p>参数：<strong>searchvalue</strong> 必需。规定需检索的字符串值。 <strong>fromindex</strong> 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。</p>\n<p>说明：该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。如果没有找到，将返回 -1。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用indexof方法实现模糊查询</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;Array&#125;  list     进行查询的数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;String&#125; keyWord  查询的关键词</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;Array&#125;           查询的结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fuzzyQuery</span><span class=\"params\">(list, keyWord)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">list</span>.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">list</span>[i].indexOf(keyWord) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      arr.push(<span class=\"keyword\">list</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-split-方法\"><a href=\"#2-split-方法\" class=\"headerlink\" title=\"2. split 方法\"></a>2. split 方法</h5><blockquote>\n<p>语法：stringObject.split(separator, howmany)<sunfy-line></p>\n<p>参数：<strong>separator</strong> 必需。字符串或正则表达式，从该参数指定的地方分割 stringObject。<strong>howmany</strong> 可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。</p>\n<p>说明：该方法通过在 separator 指定的边界处将字符串 stringObject 分割成子串并返回子串数组。返回的数组中的字串不包括 separator 自身。如果 stringObject 中不存在 separator，将返回一个只包含stringObject的数组。故可以根据返回数组的长度来判断是否存在子字符串 separator 。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用spilt方法实现模糊查询</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;Array&#125;  list     进行查询的数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;String&#125; keyWord  查询的关键词</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;Array&#125;           查询的结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fuzzyQuery</span><span class=\"params\">(list, keyWord)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">list</span>.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">list</span>[i].split(keyWord).length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      arr.push(<span class=\"keyword\">list</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-match-方法\"><a href=\"#3-match-方法\" class=\"headerlink\" title=\"3. match 方法\"></a>3. match 方法</h5><blockquote>\n<p>语法：stringObject.match(searchvalue) 或 stringObject.match(regexp)</p>\n<p>参数：<strong>searchvalue</strong> 必需。规定要检索的字符串值。<strong>regexp</strong> 必需。规定要匹配的模式的 RegExp 对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象。</p>\n<p>说明：该方法将在字符串 stringObject 内检索指定的值，或找到一个或多个正则表达式的匹配。如果没有找到任何匹配的文本，将返回 null 。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用match方法实现模糊查询</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;Array&#125;  list     进行查询的数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;String&#125; keyWord  查询的关键词</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;Array&#125;           查询的结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fuzzyQuery</span><span class=\"params\">(list, keyWord)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">list</span>.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">list</span>[i].match(keyWord) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      arr.push(<span class=\"keyword\">list</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-test方法（正则匹配）\"><a href=\"#4-test方法（正则匹配）\" class=\"headerlink\" title=\"4. test方法（正则匹配）\"></a>4. test方法（正则匹配）</h5><blockquote>\n<p>语法：RegExpObject.test(string)</p>\n<p>参数：<strong>string</strong> 必需。要检测的字符串。</p>\n<p>说明：该方法用于检测一个字符串是否匹配某个模式。如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用test方法实现模糊查询</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;Array&#125;  list     原数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;String&#125; keyWord  查询的关键词</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;Array&#125;           查询的结果</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fuzzyQuery</span><span class=\"params\">(list, keyWord)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> reg =  <span class=\"keyword\">new</span> RegExp(keyWord);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">list</span>.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (reg.test(<span class=\"keyword\">list</span>[i])) &#123;</span><br><span class=\"line\">      arr.push(<span class=\"keyword\">list</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h2><p>看了上面的简单介绍之后，我相信大家会发现其实四种方法在使用上都差不多，无聊的我萌生了对这四种方法进行性能测试的想法。以下为测试用例和结果。</p>\n<blockquote>\n<p>测试条件：一个长度为100的数组，每个方法测试50次，取平均值。<br> indexof 方法耗费时间： <strong>0.048ms</strong><br> split 方法耗费时间： <strong>0.037ms</strong><br> match 方法耗费时间： <strong>0.178ms</strong><br> test 方法耗费时间： <strong>0.039ms</strong></p>\n</blockquote>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ol>\n<li>从上面测试结果可以看出在几百几千甚至几万条数据量的情况下，前端去处理都是没问题的，相比发送一个 ajax 请求去后台来说，前端还是具有很大优势的，能节省不少时间。</li>\n<li>相比其他方法，<strong>match</strong> 方法性能最差，消耗的时间差不多是其他方法的3-4倍，虽说这一点点时间相比发送ajax来说，也算提高了很多既然我们在一开始就是为了提高用户体验，那么我们也应该追求极致啦，所以 <strong>match</strong> 选手落败。</li>\n<li>除了 <strong>match</strong> 方法，其他三个方法在性能上差不多。不过在这里有一点需要提出的就是， <strong>test</strong> 方法因为使用到了正则表达式，所以能够实现的功能会比较强大，写出来的代码也更加简洁。打个比方，在不区分大小写的模糊搜索条件下， <strong>test</strong> 方法只需在正则表达式中添加修饰符 i 即可实现不区分大小写，而 <strong>indexof</strong> 方法和 <strong>split</strong> 方法则要通过多次的方法调用和逻辑运算符才能实现效果。</li>\n</ol>\n","next":{"title":"Spring启动过程源码解析","path":"api/articles/resource-Spring-Spring-Spring启动过程源码解析.json","image":"/img/header_img/spring/process.png","num_read":1778,"num_like":795,"num_collection":815,"num_comments":177},"prev":{"title":"SpringBoot自动装配原理","path":"api/articles/resource-Spring-SpringBoot-SpringBoot自动装配原理.json","image":"/img/header_img/spring/springBootAuto.png","num_read":607,"num_like":850,"num_collection":65,"num_comments":105},"categories":[{"name":"前端","path":"api/categories/前端.json","pathContent":"api/categories/前端","description":"包含vue、npm、html、Angular、js等相关","cover":"https://sunfy9.gitee.io/project/photo/project/desk.jpg"}],"tags":[{"name":"js","path":"api/tags/js.json","pathContent":"api/tags/js","description":"[js]暂未设置说明","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"}]}