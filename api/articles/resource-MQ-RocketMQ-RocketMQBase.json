{"title":"RocketMQ基本概念和安装测试","num_read":1388,"num_like":268,"num_collection":284,"num_comments":151,"slug":"resource-MQ-RocketMQ-RocketMQBase","date":"2022-01-17T16:00:00.000Z","img":"/img/header_img/MQ/RocketMQ.png","format":"gallery","_id":"clhrbp2fk00dvo5lgfok42wij","project":"MQ","subtitle":"MQ功能比较完备，扩展性佳","site":{"data":{}},"updated":"2022-09-20T02:02:56.231Z","author":"Sunfy","comments":true,"path":"api/articles/resource-MQ-RocketMQ-RocketMQBase.json","webPath":"2022/01/18/resource-MQ-RocketMQ-RocketMQBase/","permalink":"https://sunfy9.gitee.io/2022/01/18/resource-MQ-RocketMQ-RocketMQBase/","excerpt":null,"covers":["../../../../img/RocketMQBase/rocketmq_architecture_1.png","../../../../img/RocketMQBase/rocketmq_architecture_2.png","../../../../img/RocketMQBase/rocketmq_architecture_3.png","../../../../img/RocketMQBase/image-20220228165232414.png","../../../../img/RocketMQBase/image-20220228165629873.png","../../../../img/RocketMQBase/image-20220228165815145.png","../../../../img/RocketMQBase/image-20220228170409619.png","../../../../img/RocketMQBase/image-20220228170423468.png","../../../../img/RocketMQBase/image-20220228170442267.png","../../../../img/RocketMQBase/image-20220228171208642.png","../../../../img/RocketMQBase/image-20220228171841658.png"],"keywords":"sunfy, hexo-theme-snail","content":"<p><a href=\"/pages/detail/detail?id=api/articles/resource-MQ-rabbitMQ-RabbitMQBase.json\">MQ优劣相关内容</a></p>\n<h1 id=\"RocketMQ介绍\"><a href=\"#RocketMQ介绍\" class=\"headerlink\" title=\"RocketMQ介绍\"></a>RocketMQ介绍</h1><p>RocketMQ是阿里巴巴开源的一个消息中间件，在阿里内部历经了双十一等很多高并发场景的考验，能够处理亿万级别的消息。2016年开源后捐赠给Apache，现在是Apache的一个顶级项目。</p>\n<p>目前RocketMQ在阿里云上有一个购买即可用的商业版本，商业版本集成了阿里内部一些更深层次的功能及运维定制。我们这里学习的是Apache的开源版本。开源版本相对于阿里云上的商业版本，功能上略有缺失，但是大体上功能是一样的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RocketMQ的官网地址：</span><br><span class=\"line\">http:&#x2F;&#x2F;rocketmq.apache.org ，</span><br><span class=\"line\">github地址是 https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;rocketmq</span><br><span class=\"line\">本blog基于4.7.1版本来进行学习。</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"1-消息模型（Message-Model）\"><a href=\"#1-消息模型（Message-Model）\" class=\"headerlink\" title=\"1 消息模型（Message Model）\"></a>1 消息模型（Message Model）</h3><p>RocketMQ主要由 Producer、Broker、Consumer 三部分组成，其中Producer 负责生产消息，Consumer 负责消费消息，Broker 负责存储消息。Broker 在实际部署过程中对应一台服务器，每个 Broker 可以存储多个Topic的消息，每个Topic的消息也可以分片存储于不同的 Broker。Message Queue 用于存储消息的物理地址，每个Topic中的消息地址存储于多个 Message Queue 中。ConsumerGroup 由多个Consumer 实例构成。</p>\n<h3 id=\"2-消息生产者（Producer）\"><a href=\"#2-消息生产者（Producer）\" class=\"headerlink\" title=\"2 消息生产者（Producer）\"></a>2 消息生产者（Producer）</h3><p>负责生产消息，一般由业务系统负责生产消息。一个消息生产者会把业务应用系统里产生的消息发送到broker服务器。RocketMQ提供多种发送方式，同步发送、异步发送、顺序发送、单向发送。同步和异步方式均需要Broker返回确认信息，单向发送不需要。</p>\n<h3 id=\"3-消息消费者（Consumer）\"><a href=\"#3-消息消费者（Consumer）\" class=\"headerlink\" title=\"3 消息消费者（Consumer）\"></a>3 消息消费者（Consumer）</h3><p>负责消费消息，一般是后台系统负责异步消费。一个消息消费者会从Broker服务器拉取消息、并将其提供给应用程序。从用户应用的角度而言提供了两种消费形式：拉取式消费、推动式消费。</p>\n<h3 id=\"4-主题（Topic）\"><a href=\"#4-主题（Topic）\" class=\"headerlink\" title=\"4 主题（Topic）\"></a>4 主题（Topic）</h3><p>表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行消息订阅的基本单位。</p>\n<h3 id=\"5-代理服务器（Broker-Server）\"><a href=\"#5-代理服务器（Broker-Server）\" class=\"headerlink\" title=\"5 代理服务器（Broker Server）\"></a>5 代理服务器（Broker Server）</h3><p>消息中转角色，负责存储消息、转发消息。代理服务器在RocketMQ系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等。</p>\n<h3 id=\"6-名字服务（Name-Server）\"><a href=\"#6-名字服务（Name-Server）\" class=\"headerlink\" title=\"6 名字服务（Name Server）\"></a>6 名字服务（Name Server）</h3><p>名称服务充当路由消息的提供者。生产者或消费者能够通过名字服务查找各主题相应的Broker IP列表。多个Namesrv实例组成集群，但相互独立，没有信息交换。</p>\n<h3 id=\"7-拉取式消费（Pull-Consumer）\"><a href=\"#7-拉取式消费（Pull-Consumer）\" class=\"headerlink\" title=\"7 拉取式消费（Pull Consumer）\"></a>7 拉取式消费（Pull Consumer）</h3><p>Consumer消费的一种类型，应用通常主动调用Consumer的拉消息方法从Broker服务器拉消息、主动权由应用控制。一旦获取了批量消息，应用就会启动消费过程。</p>\n<h3 id=\"8-推动式消费（Push-Consumer）\"><a href=\"#8-推动式消费（Push-Consumer）\" class=\"headerlink\" title=\"8 推动式消费（Push Consumer）\"></a>8 推动式消费（Push Consumer）<sunfy-line></h3><p>Consumer消费的一种类型，该模式下Broker收到数据后会主动推送给消费端，该消费模式一般实时性较高。</p>\n<h3 id=\"9-生产者组（Producer-Group）\"><a href=\"#9-生产者组（Producer-Group）\" class=\"headerlink\" title=\"9 生产者组（Producer Group）\"></a>9 生产者组（Producer Group）</h3><p>同一类Producer的集合，这类Producer发送同一类消息且发送逻辑一致。如果发送的是事务消息且原始生产者在发送之后崩溃，则Broker服务器会联系同一生产者组的其他生产者实例以提交或回溯消费。</p>\n<h3 id=\"10-消费者组（Consumer-Group）\"><a href=\"#10-消费者组（Consumer-Group）\" class=\"headerlink\" title=\"10 消费者组（Consumer Group）\"></a>10 消费者组（Consumer Group）</h3><p>同一类Consumer的集合，这类Consumer通常消费同一类消息且消费逻辑一致。消费者组使得在消息消费方面，实现负载均衡和容错的目标变得非常容易。要注意的是，消费者组的消费者实例必须订阅完全相同的Topic。RocketMQ 支持两种消息模式：集群消费（Clustering）和广播消费（Broadcasting）。</p>\n<h3 id=\"11-集群消费（Clustering）\"><a href=\"#11-集群消费（Clustering）\" class=\"headerlink\" title=\"11 集群消费（Clustering）\"></a>11 集群消费（Clustering）</h3><p>集群消费模式下,相同Consumer Group的每个Consumer实例平均分摊消息。</p>\n<h3 id=\"12-广播消费（Broadcasting）\"><a href=\"#12-广播消费（Broadcasting）\" class=\"headerlink\" title=\"12 广播消费（Broadcasting）\"></a>12 广播消费（Broadcasting）</h3><p>广播消费模式下，相同Consumer Group的每个Consumer实例都接收全量的消息。</p>\n<h3 id=\"13-普通顺序消息（Normal-Ordered-Message）\"><a href=\"#13-普通顺序消息（Normal-Ordered-Message）\" class=\"headerlink\" title=\"13 普通顺序消息（Normal Ordered Message）\"></a>13 普通顺序消息（Normal Ordered Message）</h3><p>普通顺序消费模式下，消费者通过同一个消息队列（ Topic 分区，称作 Message Queue） 收到的消息是有顺序的，不同消息队列收到的消息则可能是无顺序的。</p>\n<h3 id=\"14-严格顺序消息（Strictly-Ordered-Message）\"><a href=\"#14-严格顺序消息（Strictly-Ordered-Message）\" class=\"headerlink\" title=\"14 严格顺序消息（Strictly Ordered Message）\"></a>14 严格顺序消息（Strictly Ordered Message）</h3><p>严格顺序消息模式下，消费者收到的所有消息均是有顺序的。</p>\n<h3 id=\"15-消息（Message）\"><a href=\"#15-消息（Message）\" class=\"headerlink\" title=\"15 消息（Message）\"></a>15 消息（Message）</h3><p>消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。RocketMQ中每个消息拥有唯一的Message ID，且可以携带具有业务标识的Key。系统提供了通过Message ID和Key查询消息的功能。</p>\n<h3 id=\"16-标签（Tag）\"><a href=\"#16-标签（Tag）\" class=\"headerlink\" title=\"16 标签（Tag）\"></a>16 标签（Tag）</h3><p>为消息设置的标志，用于同一主题下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化RocketMQ提供的查询系统。消费者可以根据Tag实现对不同子主题的不同消费逻辑，实现更好的扩展性。</p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><h3 id=\"1-订阅与发布\"><a href=\"#1-订阅与发布\" class=\"headerlink\" title=\"1 订阅与发布\"></a>1 订阅与发布</h3><p>消息的发布是指某个生产者向某个topic发送消息；消息的订阅是指某个消费者关注了某个topic中带有某些tag的消息，进而从该topic消费数据。</p>\n<h3 id=\"2-消息顺序\"><a href=\"#2-消息顺序\" class=\"headerlink\" title=\"2 消息顺序\"></a>2 消息顺序</h3><p>消息有序指的是一类消息消费时，能按照发送的顺序来消费。例如：一个订单产生了三条消息分别是订单创建、订单付款、订单完成。消费时要按照这个顺序消费才能有意义，但是同时订单之间是可以并行消费的。RocketMQ可以严格的保证消息有序。</p>\n<p>顺序消息分为全局顺序消息与分区顺序消息，全局顺序是指某个Topic下的所有消息都要保证顺序；部分顺序消息只要保证每一组消息被顺序消费即可。</p>\n<ul>\n<li>全局顺序 对于指定的一个 Topic，所有消息按照严格的先入先出（FIFO）的顺序进行发布和消费。 适用场景：性能要求不高，所有的消息严格按照 FIFO 原则进行消息发布和消费的场景</li>\n<li>分区顺序 对于指定的一个 Topic，所有消息根据 sharding key 进行区块分区。 同一个分区内的消息按照严格的 FIFO 顺序进行发布和消费。 Sharding key 是顺序消息中用来区分不同分区的关键字段，和普通消息的 Key 是完全不同的概念。 适用场景：性能要求高，以 sharding key 作为分区字段，在同一个区块中严格的按照 FIFO 原则进行消息发布和消费的场景。</li>\n</ul>\n<h3 id=\"3-消息过滤\"><a href=\"#3-消息过滤\" class=\"headerlink\" title=\"3 消息过滤\"></a>3 消息过滤</h3><p>RocketMQ的消费者可以根据Tag进行消息过滤，也支持自定义属性过滤。消息过滤目前是在Broker端实现的，优点是减少了对于Consumer无用消息的网络传输，缺点是增加了Broker的负担、而且实现相对复杂。</p>\n<h3 id=\"4-消息可靠性\"><a href=\"#4-消息可靠性\" class=\"headerlink\" title=\"4 消息可靠性\"></a>4 消息可靠性</h3><p>RocketMQ支持消息的高可靠，影响消息可靠性的几种情况：</p>\n<p>​    1)Broker非正常关闭<br>​    2)Broker异常Crash<br>​    3)OS Crash<br>​    4)机器掉电，但是能立即恢复供电情况<br>​    5)机器无法开机（可能是cpu、主板、内存等关键设备损坏）<br>​    6)磁盘设备损坏</p>\n<p>1)、2)、3)、4) 四种情况都属于硬件资源可立即恢复情况，RocketMQ在这四种情况下能保证消息不丢，或者丢失少量数据（依赖刷盘方式是同步还是异步）。</p>\n<p>5)、6)属于单点故障，且无法恢复，一旦发生，在此单点上的消息全部丢失。RocketMQ在这两种情况下，通过异步复制，可保证99%的消息不丢，但是仍然会有极少量的消息可能丢失。通过同步双写技术可以完全避免单点，同步双写势必会影响性能，适合对消息可靠性要求极高的场合，例如与Money相关的应用。注：RocketMQ从3.0版本开始支持同步双写。</p>\n<h3 id=\"5-至少一次\"><a href=\"#5-至少一次\" class=\"headerlink\" title=\"5 至少一次\"></a>5 至少一次</h3><p>至少一次(At least Once)指每个消息必须投递一次。Consumer先Pull消息到本地，消费完成后，才向服务器返回ack，如果没有消费一定不会ack消息，所以RocketMQ可以很好的支持此特性。</p>\n<h3 id=\"6-回溯消费\"><a href=\"#6-回溯消费\" class=\"headerlink\" title=\"6 回溯消费\"></a>6 回溯消费</h3><p>回溯消费是指Consumer已经消费成功的消息，由于业务上需求需要重新消费，要支持此功能，Broker在向Consumer投递成功消息后，消息仍然需要保留。并且重新消费一般是按照时间维度，例如由于Consumer系统故障，恢复后需要重新消费1小时前的数据，那么Broker要提供一种机制，可以按照时间维度来回退消费进度。RocketMQ支持按照时间回溯消费，时间维度精确到毫秒。</p>\n<h3 id=\"7-事务消息\"><a href=\"#7-事务消息\" class=\"headerlink\" title=\"7 事务消息\"></a>7 事务消息</h3><p>RocketMQ事务消息（Transactional Message）是指应用本地事务和发送消息操作可以被定义到全局事务中，要么同时成功，要么同时失败。RocketMQ的事务消息提供类似 X/Open XA 的分布事务功能，通过事务消息能达到分布式事务的最终一致。</p>\n<h3 id=\"8-定时消息\"><a href=\"#8-定时消息\" class=\"headerlink\" title=\"8 定时消息\"></a>8 定时消息</h3><p>定时消息（延迟队列）是指消息发送到broker后，不会立即被消费，等待特定时间投递给真正的topic。 broker有配置项messageDelayLevel，默认值为“1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h”，18个level。可以配置自定义messageDelayLevel。注意，messageDelayLevel是broker的属性，不属于某个topic。发消息时，设置delayLevel等级即可：msg.setDelayLevel(level)。level有以下三种情况：</p>\n<ul>\n<li>level == 0，消息为非延迟消息</li>\n<li>1&lt;=level&lt;=maxLevel，消息延迟特定时间，例如level==1，延迟1s</li>\n<li>level &gt; maxLevel，则level== maxLevel，例如level==20，延迟2h</li>\n</ul>\n<p>定时消息会暂存在名为SCHEDULE_TOPIC_XXXX的topic中，并根据delayTimeLevel存入特定的queue，queueId = delayTimeLevel – 1，即一个queue只存相同延迟的消息，保证具有相同发送延迟的消息能够顺序消费。broker会调度地消费SCHEDULE_TOPIC_XXXX，将消息写入真实的topic。</p>\n<p>需要注意的是，定时消息会在第一次写入和调度写入真实topic时都会计数，因此发送数量、tps都会变高。</p>\n<h3 id=\"9-消息重试\"><a href=\"#9-消息重试\" class=\"headerlink\" title=\"9 消息重试\"></a>9 消息重试</h3><p>Consumer消费消息失败后，要提供一种重试机制，令消息再消费一次。Consumer消费消息失败通常可以认为有以下几种情况：</p>\n<ul>\n<li>由于消息本身的原因，例如反序列化失败，消息数据本身无法处理（例如话费充值，当前消息的手机号被注销，无法充值）等。这种错误通常需要跳过这条消息，再消费其它消息，而这条失败的消息即使立刻重试消费，99%也不成功，所以最好提供一种定时重试机制，即过10秒后再重试。</li>\n<li>由于依赖的下游应用服务不可用，例如db连接不可用，外系统网络不可达等。遇到这种错误，即使跳过当前失败的消息，消费其他消息同样也会报错。这种情况建议应用sleep 30s，再消费下一条消息，这样可以减轻Broker重试消息的压力。</li>\n</ul>\n<p>RocketMQ会为每个消费组都设置一个Topic名称为“%RETRY%+consumerGroup”的重试队列（这里需要注意的是，这个Topic的重试队列是针对消费组，而不是针对每个Topic设置的），用于暂时保存因为各种异常而导致Consumer端无法消费的消息。考虑到异常恢复起来需要一些时间，会为重试队列设置多个重试级别，每个重试级别都有与之对应的重新投递延时，重试次数越多投递延时就越大。RocketMQ对于重试消息的处理是先保存至Topic名称为“SCHEDULE_TOPIC_XXXX”的延迟队列中，后台定时任务按照对应的时间进行Delay后重新保存至“%RETRY%+consumerGroup”的重试队列中。</p>\n<h3 id=\"10-消息重投\"><a href=\"#10-消息重投\" class=\"headerlink\" title=\"10 消息重投\"></a>10 消息重投</h3><p>生产者在发送消息时，同步消息失败会重投，异步消息有重试，oneway没有任何保证。消息重投保证消息尽可能发送成功、不丢失，但可能会造成消息重复，消息重复在RocketMQ中是无法避免的问题。消息重复在一般情况下不会发生，当出现消息量大、网络抖动，消息重复就会是大概率事件。另外，生产者主动重发、consumer负载变化也会导致重复消息。如下方法可以设置消息重试策略：</p>\n<ul>\n<li>retryTimesWhenSendFailed:同步发送失败重投次数，默认为2，因此生产者会最多尝试发送retryTimesWhenSendFailed + 1次。不会选择上次失败的broker，尝试向其他broker发送，最大程度保证消息不丢。超过重投次数，抛出异常，由客户端保证消息不丢。当出现RemotingException、MQClientException和部分MQBrokerException时会重投。</li>\n<li>retryTimesWhenSendAsyncFailed:异步发送失败重试次数，异步重试不会选择其他broker，仅在同一个broker上做重试，不保证消息不丢。</li>\n<li>retryAnotherBrokerWhenNotStoreOK:消息刷盘（主或备）超时或slave不可用（返回状态非SEND_OK），是否尝试发送到其他broker，默认false。十分重要消息可以开启。</li>\n</ul>\n<h3 id=\"11-流量控制\"><a href=\"#11-流量控制\" class=\"headerlink\" title=\"11 流量控制\"></a>11 流量控制</h3><p>生产者流控，因为broker处理能力达到瓶颈；消费者流控，因为消费能力达到瓶颈。</p>\n<p>生产者流控：</p>\n<ul>\n<li>commitLog文件被锁时间超过osPageCacheBusyTimeOutMills时，参数默认为1000ms，返回流控。</li>\n<li>如果开启transientStorePoolEnable == true，且broker为异步刷盘的主机，且transientStorePool中资源不足，拒绝当前send请求，返回流控。</li>\n<li>broker每隔10ms检查send请求队列头部请求的等待时间，如果超过waitTimeMillsInSendQueue，默认200ms，拒绝当前send请求，返回流控。</li>\n<li>broker通过拒绝send 请求方式实现流量控制。</li>\n</ul>\n<p>注意，生产者流控，不会尝试消息重投。</p>\n<p>消费者流控：</p>\n<ul>\n<li>消费者本地缓存消息数超过pullThresholdForQueue时，默认1000。</li>\n<li>消费者本地缓存消息大小超过pullThresholdSizeForQueue时，默认100MB。</li>\n<li>消费者本地缓存消息跨度超过consumeConcurrentlyMaxSpan时，默认2000。</li>\n</ul>\n<p>消费者流控的结果是降低拉取频率。</p>\n<h3 id=\"12-死信队列\"><a href=\"#12-死信队列\" class=\"headerlink\" title=\"12 死信队列\"></a>12 死信队列</h3><p>死信队列用于处理无法被正常消费的消息。当一条消息初次消费失败，消息队列会自动进行消息重试；达到最大重试次数后，若消费依然失败，则表明消费者在正常情况下无法正确地消费该消息，此时，消息队列 不会立刻将消息丢弃，而是将其发送到该消费者对应的特殊队列中。</p>\n<p>RocketMQ将这种正常情况下无法被消费的消息称为死信消息（Dead-Letter Message），将存储死信消息的特殊队列称为死信队列（Dead-Letter Queue）。在RocketMQ中，可以通过使用console控制台对死信队列中的消息进行重发来使得消费者实例再次进行消费。</p>\n<h2 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h2><h3 id=\"1-技术架构\"><a href=\"#1-技术架构\" class=\"headerlink\" title=\"1 技术架构\"></a>1 技术架构</h3><p><img src=\"../../../../img/RocketMQBase/rocketmq_architecture_1.png\" alt=\"img\"></p>\n<p>RocketMQ架构上主要分为四部分，如上图所示:</p>\n<ul>\n<li>Producer：消息发布的角色，支持分布式集群方式部署。Producer通过MQ的负载均衡模块选择相应的Broker集群队列进行消息投递，投递的过程支持快速失败并且低延迟。</li>\n<li>Consumer：消息消费的角色，支持分布式集群方式部署。支持以push推，pull拉两种模式对消息进行消费。同时也支持集群方式和广播方式的消费，它提供实时消息订阅机制，可以满足大多数用户的需求。</li>\n<li>NameServer：NameServer是一个非常简单的Topic路由注册中心，其角色类似Dubbo中的zookeeper，支持Broker的动态注册与发现。主要包括两个功能：Broker管理，NameServer接受Broker集群的注册信息并且保存下来作为路由信息的基本数据。然后提供心跳检测机制，检查Broker是否还存活；路由信息管理，每个NameServer将保存关于Broker集群的整个路由信息和用于客户端查询的队列信息。然后Producer和Conumser通过NameServer就可以知道整个Broker集群的路由信息，从而进行消息的投递和消费。NameServer通常也是集群的方式部署，各实例间相互不进行信息通讯。Broker是向每一台NameServer注册自己的路由信息，所以每一个NameServer实例上面都保存一份完整的路由信息。当某个NameServer因某种原因下线了，Broker仍然可以向其它NameServer同步其路由信息，Producer和Consumer仍然可以动态感知Broker的路由的信息。</li>\n<li>BrokerServer：Broker主要负责消息的存储、投递和查询以及服务高可用保证，为了实现这些功能，Broker包含了以下几个重要子模块。<ol>\n<li>Remoting Module：整个Broker的实体，负责处理来自Client端的请求。</li>\n<li>Client Manager：负责管理客户端(Producer/Consumer)和维护Consumer的Topic订阅信息。</li>\n<li>Store Service：提供方便简单的API接口处理消息存储到物理硬盘和查询功能。</li>\n<li>HA Service：高可用服务，提供Master Broker 和 Slave Broker之间的数据同步功能。</li>\n<li>Index Service：根据特定的Message key对投递到Broker的消息进行索引服务，以提供消息的快速查询。</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"../../../../img/RocketMQBase/rocketmq_architecture_2.png\" alt=\"img\"></p>\n<h3 id=\"2-部署架构\"><a href=\"#2-部署架构\" class=\"headerlink\" title=\"2 部署架构\"></a>2 部署架构</h3><p><img src=\"../../../../img/RocketMQBase/rocketmq_architecture_3.png\" alt=\"img\"></p>\n<h3 id=\"RocketMQ-网络部署特点\"><a href=\"#RocketMQ-网络部署特点\" class=\"headerlink\" title=\"RocketMQ 网络部署特点\"></a>RocketMQ 网络部署特点</h3><ul>\n<li>NameServer是一个几乎无状态节点，可集群部署，节点之间无任何信息同步。</li>\n<li>Broker部署相对复杂，Broker分为Master与Slave，一个Master可以对应多个Slave，但是一个Slave只能对应一个Master，Master与Slave 的对应关系通过指定相同的BrokerName，不同的BrokerId 来定义，BrokerId为0表示Master，非0表示Slave。Master也可以部署多个。每个Broker与NameServer集群中的所有节点建立长连接，定时注册Topic信息到所有NameServer。 注意：当前RocketMQ版本在部署架构上支持一Master多Slave，但只有BrokerId=1的从服务器才会参与消息的读负载。</li>\n<li>Producer与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer获取Topic路由信息，并向提供Topic 服务的Master建立长连接，且定时向Master发送心跳。Producer完全无状态，可集群部署。</li>\n<li>Consumer与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer获取Topic路由信息，并向提供Topic服务的Master、Slave建立长连接，且定时向Master、Slave发送心跳。Consumer既可以从Master订阅消息，也可以从Slave订阅消息，消费者在向Master拉取消息时，Master服务器会根据拉取偏移量与最大偏移量的距离（判断是否读老消息，产生读I/O），以及从服务器是否可读等因素建议下一次是从Master还是Slave拉取。</li>\n</ul>\n<p>结合部署架构图，描述集群工作流程：</p>\n<ul>\n<li>启动NameServer，NameServer起来后监听端口，等待Broker、Producer、Consumer连上来，相当于一个路由控制中心。</li>\n<li>Broker启动，跟所有的NameServer保持长连接，定时发送心跳包。心跳包中包含当前Broker信息(IP+端口等)以及存储所有Topic信息。注册成功后，NameServer集群中就有Topic跟Broker的映射关系。</li>\n<li>收发消息前，先创建Topic，创建Topic时需要指定该Topic要存储在哪些Broker上，也可以在发送消息时自动创建Topic。</li>\n<li>Producer发送消息，启动时先跟NameServer集群中的其中一台建立长连接，并从NameServer中获取当前发送的Topic存在哪些Broker上，轮询从队列列表中选择一个队列，然后与队列所在的Broker建立长连接从而向Broker发消息。</li>\n<li>Consumer跟Producer类似，跟其中一台NameServer建立长连接，获取当前订阅Topic存在哪些Broker上，然后直接跟Broker建立连接通道，开始消费消息。</li>\n</ul>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p>RocketMQ的安装非常简单，就是上传解压就可以了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tRocketMQ运行版本下载地址： https:&#x2F;&#x2F;www.apache.org&#x2F;dyn&#x2F;closer.cgi?path&#x3D;rocketmq&#x2F;4.7.1&#x2F;rocketmq-all-4.7.1-bin-release.zip</span><br><span class=\"line\"></span><br><span class=\"line\">​\tRocketMQ源码版本下载地址： https:&#x2F;&#x2F;www.apache.org&#x2F;dyn&#x2F;closer.cgi?path&#x3D;rocketmq&#x2F;4.7.1&#x2F;rocketmq-all-4.7.1-source-release.zip</span><br></pre></td></tr></table></figure>\n<p>解压下载后的文件</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>RocketMQ由以下这几个组件组成</p>\n<ul>\n<li>NameServer : 提供轻量级的Broker路由服务。</li>\n<li>Broker：实际处理消息存储、转发等服务的核心组件。</li>\n<li>Producer：消息生产者集群。通常是业务系统中的一个功能模块。</li>\n<li>Consumer：消息消费者集群。通常也是业务系统中的一个功能模块。</li>\n</ul>\n<p>启动MQ只要要确保本机由java运行环境，本文就不对jdk的安装做过多说明，重点介绍RocketMQ。</p>\n<p>配置环境变量。使用 vi ~/.bash_profile编辑文件，在下面加入以下内容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> ROCKETMQ_HOME=/app/rocketmq/rocketmq-all-4.7.1-bin-release</span><br><span class=\"line\">PATH=<span class=\"variable\">$ROCKETMQ_HOME</span>/bin:<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HOME</span>/.<span class=\"built_in\">local</span>/bin:<span class=\"variable\">$HOME</span>/bin</span><br></pre></td></tr></table></figure>\n<p><img src=\"../../../../img/RocketMQBase/image-20220228165232414.png\" alt=\"image-20220228165232414\"></p>\n<p>执行source ~/.bash_profile让环境变量生效</p>\n<p>​    这样RocketMQ就安装完成了。我们把他运行起来。</p>\n<p>这个ROCKETMQ_HOME的环境变量是必须要单独配置的，如果不配置的话，启动NameSever和Broker都会报错。</p>\n<p>这个环境变量的作用是用来加载$ROCKETMQ_HOME/conf下的除broker.conf以外的几个配置文件。所以实际情况中，可以不按这个配置，但是一定要能找到配置文件。</p>\n<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><p>启动NameServer、Broker之前根据本机实际情况，判断本机的内存是否满足启动RocketMQ的内存要求，如果不满足先调整参数后再进行启动。</p>\n<p>NameServer默认参数设置（bin/<a href=\"http://xn--runserver-z89na9857bcqmtlfda85rmzcf95l5zb.sh\" target=\"_blank\" rel=\"noopener\">runserver.sh</a>）</p>\n<p><img src=\"../../../../img/RocketMQBase/image-20220228165629873.png\" alt=\"image-20220228165629873\"></p>\n<p>NameServer启动命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup sh bin/mqadminsrv &amp;</span><br></pre></td></tr></table></figure>\n<p>Broker默认参数设置（bin/<a href=\"http://xn--Brokerrunbroker-wy8y53qb44gl6dtn1h9p4b.sh\" target=\"_blank\" rel=\"noopener\">runbroker.sh</a>）</p>\n<p>NameServer启动命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup sh mqbroker -n localhost:9876 autoCreateTopicEnable=<span class=\"literal\">true</span> &amp;</span><br></pre></td></tr></table></figure>\n<p>broker默认设置为8G，可以根据实际机器情况调整</p>\n<p>在启动之前都将对应的参数进行调整如下</p>\n<p><img src=\"../../../../img/RocketMQBase/image-20220228165815145.png\" alt=\"image-20220228165815145\"></p>\n<p>启动成功后都可以在控制台看到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The broker[worker1, 192.168.232.128:10911] boot success. serializeType&#x3D;JSON</span><br></pre></td></tr></table></figure>\n<p><img src=\"../../../../img/RocketMQBase/image-20220228170409619.png\" alt=\"image-20220228170409619\"></p>\n<h1 id=\"命令行快速验证\"><a href=\"#命令行快速验证\" class=\"headerlink\" title=\"命令行快速验证\"></a>命令行快速验证</h1><p>执行如下命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br></pre></td></tr></table></figure>\n<p>我们可以看到发送消息的日志：</p>\n<p><img src=\"../../../../img/RocketMQBase/image-20220228170423468.png\" alt=\"image-20220228170423468\"></p>\n<p>这日志中，上面部分就是我们发送的消息的内容。后面两句标识消息生产者正常关闭。</p>\n<p>然后启动消息消费者接收消息：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/tools.sh  org.apache.rocketmq.example.quickstart.Consumer</span><br></pre></td></tr></table></figure>\n<p>启动后，可以看到消费到的消息。</p>\n<p><img src=\"../../../../img/RocketMQBase/image-20220228170442267.png\" alt=\"image-20220228170442267\"></p>\n<p>日志中MessageExt后的整个内容就是一条完整的RocketMQ消息。对这个消息的结构有个大概的了解</p>\n<p>其中比较关键的属性有：brokerName，queueId，msgId，topic，cluster，tags，body，transactionId。</p>\n<p>而这个Consume指令并不会结束，他会继续挂起，等待消费其他的消息。我们可以使用CTRL+C停止该进程。</p>\n<h1 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a>停止</h1><p>要关闭RocketMQ服务可以通过mqshutdown脚本直接关闭</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.关闭NameServer</span></span><br><span class=\"line\">sh bin/mqshutdown namesrv</span><br><span class=\"line\"><span class=\"comment\"># 2.关闭Broker</span></span><br><span class=\"line\">sh bin/mqshutdown broker</span><br></pre></td></tr></table></figure>\n<h1 id=\"图形化页面\"><a href=\"#图形化页面\" class=\"headerlink\" title=\"图形化页面\"></a>图形化页面</h1><p>项目源码地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;rocketmq-externals.git</span><br></pre></td></tr></table></figure>\n<p>将项目检出，然后配置地址启动即可，项目的端口根据自己需求自定义</p>\n<p><img src=\"../../../../img/RocketMQBase/image-20220228171208642.png\" alt=\"image-20220228171208642\"></p>\n<p>启动之后便可在浏览器访问图像界面</p>\n<p><img src=\"../../../../img/RocketMQBase/image-20220228171841658.png\" alt=\"image-20220228171841658\"></p>\n","more":"<p><a href=\"/pages/detail/detail?id=api/articles/resource-MQ-rabbitMQ-RabbitMQBase.json\">MQ优劣相关内容</a></p>\n<h1 id=\"RocketMQ介绍\"><a href=\"#RocketMQ介绍\" class=\"headerlink\" title=\"RocketMQ介绍\"></a>RocketMQ介绍</h1><p>RocketMQ是阿里巴巴开源的一个消息中间件，在阿里内部历经了双十一等很多高并发场景的考验，能够处理亿万级别的消息。2016年开源后捐赠给Apache，现在是Apache的一个顶级项目。</p>\n<p>目前RocketMQ在阿里云上有一个购买即可用的商业版本，商业版本集成了阿里内部一些更深层次的功能及运维定制。我们这里学习的是Apache的开源版本。开源版本相对于阿里云上的商业版本，功能上略有缺失，但是大体上功能是一样的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RocketMQ的官网地址：</span><br><span class=\"line\">http:&#x2F;&#x2F;rocketmq.apache.org ，</span><br><span class=\"line\">github地址是 https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;rocketmq</span><br><span class=\"line\">本blog基于4.7.1版本来进行学习。</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"1-消息模型（Message-Model）\"><a href=\"#1-消息模型（Message-Model）\" class=\"headerlink\" title=\"1 消息模型（Message Model）\"></a>1 消息模型（Message Model）</h3><p>RocketMQ主要由 Producer、Broker、Consumer 三部分组成，其中Producer 负责生产消息，Consumer 负责消费消息，Broker 负责存储消息。Broker 在实际部署过程中对应一台服务器，每个 Broker 可以存储多个Topic的消息，每个Topic的消息也可以分片存储于不同的 Broker。Message Queue 用于存储消息的物理地址，每个Topic中的消息地址存储于多个 Message Queue 中。ConsumerGroup 由多个Consumer 实例构成。</p>\n<h3 id=\"2-消息生产者（Producer）\"><a href=\"#2-消息生产者（Producer）\" class=\"headerlink\" title=\"2 消息生产者（Producer）\"></a>2 消息生产者（Producer）</h3><p>负责生产消息，一般由业务系统负责生产消息。一个消息生产者会把业务应用系统里产生的消息发送到broker服务器。RocketMQ提供多种发送方式，同步发送、异步发送、顺序发送、单向发送。同步和异步方式均需要Broker返回确认信息，单向发送不需要。</p>\n<h3 id=\"3-消息消费者（Consumer）\"><a href=\"#3-消息消费者（Consumer）\" class=\"headerlink\" title=\"3 消息消费者（Consumer）\"></a>3 消息消费者（Consumer）</h3><p>负责消费消息，一般是后台系统负责异步消费。一个消息消费者会从Broker服务器拉取消息、并将其提供给应用程序。从用户应用的角度而言提供了两种消费形式：拉取式消费、推动式消费。</p>\n<h3 id=\"4-主题（Topic）\"><a href=\"#4-主题（Topic）\" class=\"headerlink\" title=\"4 主题（Topic）\"></a>4 主题（Topic）</h3><p>表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行消息订阅的基本单位。</p>\n<h3 id=\"5-代理服务器（Broker-Server）\"><a href=\"#5-代理服务器（Broker-Server）\" class=\"headerlink\" title=\"5 代理服务器（Broker Server）\"></a>5 代理服务器（Broker Server）</h3><p>消息中转角色，负责存储消息、转发消息。代理服务器在RocketMQ系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等。</p>\n<h3 id=\"6-名字服务（Name-Server）\"><a href=\"#6-名字服务（Name-Server）\" class=\"headerlink\" title=\"6 名字服务（Name Server）\"></a>6 名字服务（Name Server）</h3><p>名称服务充当路由消息的提供者。生产者或消费者能够通过名字服务查找各主题相应的Broker IP列表。多个Namesrv实例组成集群，但相互独立，没有信息交换。</p>\n<h3 id=\"7-拉取式消费（Pull-Consumer）\"><a href=\"#7-拉取式消费（Pull-Consumer）\" class=\"headerlink\" title=\"7 拉取式消费（Pull Consumer）\"></a>7 拉取式消费（Pull Consumer）</h3><p>Consumer消费的一种类型，应用通常主动调用Consumer的拉消息方法从Broker服务器拉消息、主动权由应用控制。一旦获取了批量消息，应用就会启动消费过程。</p>\n<h3 id=\"8-推动式消费（Push-Consumer）\"><a href=\"#8-推动式消费（Push-Consumer）\" class=\"headerlink\" title=\"8 推动式消费（Push Consumer）\"></a>8 推动式消费（Push Consumer）<sunfy-line></h3><p>Consumer消费的一种类型，该模式下Broker收到数据后会主动推送给消费端，该消费模式一般实时性较高。</p>\n<h3 id=\"9-生产者组（Producer-Group）\"><a href=\"#9-生产者组（Producer-Group）\" class=\"headerlink\" title=\"9 生产者组（Producer Group）\"></a>9 生产者组（Producer Group）</h3><p>同一类Producer的集合，这类Producer发送同一类消息且发送逻辑一致。如果发送的是事务消息且原始生产者在发送之后崩溃，则Broker服务器会联系同一生产者组的其他生产者实例以提交或回溯消费。</p>\n<h3 id=\"10-消费者组（Consumer-Group）\"><a href=\"#10-消费者组（Consumer-Group）\" class=\"headerlink\" title=\"10 消费者组（Consumer Group）\"></a>10 消费者组（Consumer Group）</h3><p>同一类Consumer的集合，这类Consumer通常消费同一类消息且消费逻辑一致。消费者组使得在消息消费方面，实现负载均衡和容错的目标变得非常容易。要注意的是，消费者组的消费者实例必须订阅完全相同的Topic。RocketMQ 支持两种消息模式：集群消费（Clustering）和广播消费（Broadcasting）。</p>\n<h3 id=\"11-集群消费（Clustering）\"><a href=\"#11-集群消费（Clustering）\" class=\"headerlink\" title=\"11 集群消费（Clustering）\"></a>11 集群消费（Clustering）</h3><p>集群消费模式下,相同Consumer Group的每个Consumer实例平均分摊消息。</p>\n<h3 id=\"12-广播消费（Broadcasting）\"><a href=\"#12-广播消费（Broadcasting）\" class=\"headerlink\" title=\"12 广播消费（Broadcasting）\"></a>12 广播消费（Broadcasting）</h3><p>广播消费模式下，相同Consumer Group的每个Consumer实例都接收全量的消息。</p>\n<h3 id=\"13-普通顺序消息（Normal-Ordered-Message）\"><a href=\"#13-普通顺序消息（Normal-Ordered-Message）\" class=\"headerlink\" title=\"13 普通顺序消息（Normal Ordered Message）\"></a>13 普通顺序消息（Normal Ordered Message）</h3><p>普通顺序消费模式下，消费者通过同一个消息队列（ Topic 分区，称作 Message Queue） 收到的消息是有顺序的，不同消息队列收到的消息则可能是无顺序的。</p>\n<h3 id=\"14-严格顺序消息（Strictly-Ordered-Message）\"><a href=\"#14-严格顺序消息（Strictly-Ordered-Message）\" class=\"headerlink\" title=\"14 严格顺序消息（Strictly Ordered Message）\"></a>14 严格顺序消息（Strictly Ordered Message）</h3><p>严格顺序消息模式下，消费者收到的所有消息均是有顺序的。</p>\n<h3 id=\"15-消息（Message）\"><a href=\"#15-消息（Message）\" class=\"headerlink\" title=\"15 消息（Message）\"></a>15 消息（Message）</h3><p>消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。RocketMQ中每个消息拥有唯一的Message ID，且可以携带具有业务标识的Key。系统提供了通过Message ID和Key查询消息的功能。</p>\n<h3 id=\"16-标签（Tag）\"><a href=\"#16-标签（Tag）\" class=\"headerlink\" title=\"16 标签（Tag）\"></a>16 标签（Tag）</h3><p>为消息设置的标志，用于同一主题下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化RocketMQ提供的查询系统。消费者可以根据Tag实现对不同子主题的不同消费逻辑，实现更好的扩展性。</p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><h3 id=\"1-订阅与发布\"><a href=\"#1-订阅与发布\" class=\"headerlink\" title=\"1 订阅与发布\"></a>1 订阅与发布</h3><p>消息的发布是指某个生产者向某个topic发送消息；消息的订阅是指某个消费者关注了某个topic中带有某些tag的消息，进而从该topic消费数据。</p>\n<h3 id=\"2-消息顺序\"><a href=\"#2-消息顺序\" class=\"headerlink\" title=\"2 消息顺序\"></a>2 消息顺序</h3><p>消息有序指的是一类消息消费时，能按照发送的顺序来消费。例如：一个订单产生了三条消息分别是订单创建、订单付款、订单完成。消费时要按照这个顺序消费才能有意义，但是同时订单之间是可以并行消费的。RocketMQ可以严格的保证消息有序。</p>\n<p>顺序消息分为全局顺序消息与分区顺序消息，全局顺序是指某个Topic下的所有消息都要保证顺序；部分顺序消息只要保证每一组消息被顺序消费即可。</p>\n<ul>\n<li>全局顺序 对于指定的一个 Topic，所有消息按照严格的先入先出（FIFO）的顺序进行发布和消费。 适用场景：性能要求不高，所有的消息严格按照 FIFO 原则进行消息发布和消费的场景</li>\n<li>分区顺序 对于指定的一个 Topic，所有消息根据 sharding key 进行区块分区。 同一个分区内的消息按照严格的 FIFO 顺序进行发布和消费。 Sharding key 是顺序消息中用来区分不同分区的关键字段，和普通消息的 Key 是完全不同的概念。 适用场景：性能要求高，以 sharding key 作为分区字段，在同一个区块中严格的按照 FIFO 原则进行消息发布和消费的场景。</li>\n</ul>\n<h3 id=\"3-消息过滤\"><a href=\"#3-消息过滤\" class=\"headerlink\" title=\"3 消息过滤\"></a>3 消息过滤</h3><p>RocketMQ的消费者可以根据Tag进行消息过滤，也支持自定义属性过滤。消息过滤目前是在Broker端实现的，优点是减少了对于Consumer无用消息的网络传输，缺点是增加了Broker的负担、而且实现相对复杂。</p>\n<h3 id=\"4-消息可靠性\"><a href=\"#4-消息可靠性\" class=\"headerlink\" title=\"4 消息可靠性\"></a>4 消息可靠性</h3><p>RocketMQ支持消息的高可靠，影响消息可靠性的几种情况：</p>\n<p>​    1)Broker非正常关闭<br>​    2)Broker异常Crash<br>​    3)OS Crash<br>​    4)机器掉电，但是能立即恢复供电情况<br>​    5)机器无法开机（可能是cpu、主板、内存等关键设备损坏）<br>​    6)磁盘设备损坏</p>\n<p>1)、2)、3)、4) 四种情况都属于硬件资源可立即恢复情况，RocketMQ在这四种情况下能保证消息不丢，或者丢失少量数据（依赖刷盘方式是同步还是异步）。</p>\n<p>5)、6)属于单点故障，且无法恢复，一旦发生，在此单点上的消息全部丢失。RocketMQ在这两种情况下，通过异步复制，可保证99%的消息不丢，但是仍然会有极少量的消息可能丢失。通过同步双写技术可以完全避免单点，同步双写势必会影响性能，适合对消息可靠性要求极高的场合，例如与Money相关的应用。注：RocketMQ从3.0版本开始支持同步双写。</p>\n<h3 id=\"5-至少一次\"><a href=\"#5-至少一次\" class=\"headerlink\" title=\"5 至少一次\"></a>5 至少一次</h3><p>至少一次(At least Once)指每个消息必须投递一次。Consumer先Pull消息到本地，消费完成后，才向服务器返回ack，如果没有消费一定不会ack消息，所以RocketMQ可以很好的支持此特性。</p>\n<h3 id=\"6-回溯消费\"><a href=\"#6-回溯消费\" class=\"headerlink\" title=\"6 回溯消费\"></a>6 回溯消费</h3><p>回溯消费是指Consumer已经消费成功的消息，由于业务上需求需要重新消费，要支持此功能，Broker在向Consumer投递成功消息后，消息仍然需要保留。并且重新消费一般是按照时间维度，例如由于Consumer系统故障，恢复后需要重新消费1小时前的数据，那么Broker要提供一种机制，可以按照时间维度来回退消费进度。RocketMQ支持按照时间回溯消费，时间维度精确到毫秒。</p>\n<h3 id=\"7-事务消息\"><a href=\"#7-事务消息\" class=\"headerlink\" title=\"7 事务消息\"></a>7 事务消息</h3><p>RocketMQ事务消息（Transactional Message）是指应用本地事务和发送消息操作可以被定义到全局事务中，要么同时成功，要么同时失败。RocketMQ的事务消息提供类似 X/Open XA 的分布事务功能，通过事务消息能达到分布式事务的最终一致。</p>\n<h3 id=\"8-定时消息\"><a href=\"#8-定时消息\" class=\"headerlink\" title=\"8 定时消息\"></a>8 定时消息</h3><p>定时消息（延迟队列）是指消息发送到broker后，不会立即被消费，等待特定时间投递给真正的topic。 broker有配置项messageDelayLevel，默认值为“1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h”，18个level。可以配置自定义messageDelayLevel。注意，messageDelayLevel是broker的属性，不属于某个topic。发消息时，设置delayLevel等级即可：msg.setDelayLevel(level)。level有以下三种情况：</p>\n<ul>\n<li>level == 0，消息为非延迟消息</li>\n<li>1&lt;=level&lt;=maxLevel，消息延迟特定时间，例如level==1，延迟1s</li>\n<li>level &gt; maxLevel，则level== maxLevel，例如level==20，延迟2h</li>\n</ul>\n<p>定时消息会暂存在名为SCHEDULE_TOPIC_XXXX的topic中，并根据delayTimeLevel存入特定的queue，queueId = delayTimeLevel – 1，即一个queue只存相同延迟的消息，保证具有相同发送延迟的消息能够顺序消费。broker会调度地消费SCHEDULE_TOPIC_XXXX，将消息写入真实的topic。</p>\n<p>需要注意的是，定时消息会在第一次写入和调度写入真实topic时都会计数，因此发送数量、tps都会变高。</p>\n<h3 id=\"9-消息重试\"><a href=\"#9-消息重试\" class=\"headerlink\" title=\"9 消息重试\"></a>9 消息重试</h3><p>Consumer消费消息失败后，要提供一种重试机制，令消息再消费一次。Consumer消费消息失败通常可以认为有以下几种情况：</p>\n<ul>\n<li>由于消息本身的原因，例如反序列化失败，消息数据本身无法处理（例如话费充值，当前消息的手机号被注销，无法充值）等。这种错误通常需要跳过这条消息，再消费其它消息，而这条失败的消息即使立刻重试消费，99%也不成功，所以最好提供一种定时重试机制，即过10秒后再重试。</li>\n<li>由于依赖的下游应用服务不可用，例如db连接不可用，外系统网络不可达等。遇到这种错误，即使跳过当前失败的消息，消费其他消息同样也会报错。这种情况建议应用sleep 30s，再消费下一条消息，这样可以减轻Broker重试消息的压力。</li>\n</ul>\n<p>RocketMQ会为每个消费组都设置一个Topic名称为“%RETRY%+consumerGroup”的重试队列（这里需要注意的是，这个Topic的重试队列是针对消费组，而不是针对每个Topic设置的），用于暂时保存因为各种异常而导致Consumer端无法消费的消息。考虑到异常恢复起来需要一些时间，会为重试队列设置多个重试级别，每个重试级别都有与之对应的重新投递延时，重试次数越多投递延时就越大。RocketMQ对于重试消息的处理是先保存至Topic名称为“SCHEDULE_TOPIC_XXXX”的延迟队列中，后台定时任务按照对应的时间进行Delay后重新保存至“%RETRY%+consumerGroup”的重试队列中。</p>\n<h3 id=\"10-消息重投\"><a href=\"#10-消息重投\" class=\"headerlink\" title=\"10 消息重投\"></a>10 消息重投</h3><p>生产者在发送消息时，同步消息失败会重投，异步消息有重试，oneway没有任何保证。消息重投保证消息尽可能发送成功、不丢失，但可能会造成消息重复，消息重复在RocketMQ中是无法避免的问题。消息重复在一般情况下不会发生，当出现消息量大、网络抖动，消息重复就会是大概率事件。另外，生产者主动重发、consumer负载变化也会导致重复消息。如下方法可以设置消息重试策略：</p>\n<ul>\n<li>retryTimesWhenSendFailed:同步发送失败重投次数，默认为2，因此生产者会最多尝试发送retryTimesWhenSendFailed + 1次。不会选择上次失败的broker，尝试向其他broker发送，最大程度保证消息不丢。超过重投次数，抛出异常，由客户端保证消息不丢。当出现RemotingException、MQClientException和部分MQBrokerException时会重投。</li>\n<li>retryTimesWhenSendAsyncFailed:异步发送失败重试次数，异步重试不会选择其他broker，仅在同一个broker上做重试，不保证消息不丢。</li>\n<li>retryAnotherBrokerWhenNotStoreOK:消息刷盘（主或备）超时或slave不可用（返回状态非SEND_OK），是否尝试发送到其他broker，默认false。十分重要消息可以开启。</li>\n</ul>\n<h3 id=\"11-流量控制\"><a href=\"#11-流量控制\" class=\"headerlink\" title=\"11 流量控制\"></a>11 流量控制</h3><p>生产者流控，因为broker处理能力达到瓶颈；消费者流控，因为消费能力达到瓶颈。</p>\n<p>生产者流控：</p>\n<ul>\n<li>commitLog文件被锁时间超过osPageCacheBusyTimeOutMills时，参数默认为1000ms，返回流控。</li>\n<li>如果开启transientStorePoolEnable == true，且broker为异步刷盘的主机，且transientStorePool中资源不足，拒绝当前send请求，返回流控。</li>\n<li>broker每隔10ms检查send请求队列头部请求的等待时间，如果超过waitTimeMillsInSendQueue，默认200ms，拒绝当前send请求，返回流控。</li>\n<li>broker通过拒绝send 请求方式实现流量控制。</li>\n</ul>\n<p>注意，生产者流控，不会尝试消息重投。</p>\n<p>消费者流控：</p>\n<ul>\n<li>消费者本地缓存消息数超过pullThresholdForQueue时，默认1000。</li>\n<li>消费者本地缓存消息大小超过pullThresholdSizeForQueue时，默认100MB。</li>\n<li>消费者本地缓存消息跨度超过consumeConcurrentlyMaxSpan时，默认2000。</li>\n</ul>\n<p>消费者流控的结果是降低拉取频率。</p>\n<h3 id=\"12-死信队列\"><a href=\"#12-死信队列\" class=\"headerlink\" title=\"12 死信队列\"></a>12 死信队列</h3><p>死信队列用于处理无法被正常消费的消息。当一条消息初次消费失败，消息队列会自动进行消息重试；达到最大重试次数后，若消费依然失败，则表明消费者在正常情况下无法正确地消费该消息，此时，消息队列 不会立刻将消息丢弃，而是将其发送到该消费者对应的特殊队列中。</p>\n<p>RocketMQ将这种正常情况下无法被消费的消息称为死信消息（Dead-Letter Message），将存储死信消息的特殊队列称为死信队列（Dead-Letter Queue）。在RocketMQ中，可以通过使用console控制台对死信队列中的消息进行重发来使得消费者实例再次进行消费。</p>\n<h2 id=\"架构设计\"><a href=\"#架构设计\" class=\"headerlink\" title=\"架构设计\"></a>架构设计</h2><h3 id=\"1-技术架构\"><a href=\"#1-技术架构\" class=\"headerlink\" title=\"1 技术架构\"></a>1 技术架构</h3><p><img src=\"../../../../img/RocketMQBase/rocketmq_architecture_1.png\" alt=\"img\"></p>\n<p>RocketMQ架构上主要分为四部分，如上图所示:</p>\n<ul>\n<li>Producer：消息发布的角色，支持分布式集群方式部署。Producer通过MQ的负载均衡模块选择相应的Broker集群队列进行消息投递，投递的过程支持快速失败并且低延迟。</li>\n<li>Consumer：消息消费的角色，支持分布式集群方式部署。支持以push推，pull拉两种模式对消息进行消费。同时也支持集群方式和广播方式的消费，它提供实时消息订阅机制，可以满足大多数用户的需求。</li>\n<li>NameServer：NameServer是一个非常简单的Topic路由注册中心，其角色类似Dubbo中的zookeeper，支持Broker的动态注册与发现。主要包括两个功能：Broker管理，NameServer接受Broker集群的注册信息并且保存下来作为路由信息的基本数据。然后提供心跳检测机制，检查Broker是否还存活；路由信息管理，每个NameServer将保存关于Broker集群的整个路由信息和用于客户端查询的队列信息。然后Producer和Conumser通过NameServer就可以知道整个Broker集群的路由信息，从而进行消息的投递和消费。NameServer通常也是集群的方式部署，各实例间相互不进行信息通讯。Broker是向每一台NameServer注册自己的路由信息，所以每一个NameServer实例上面都保存一份完整的路由信息。当某个NameServer因某种原因下线了，Broker仍然可以向其它NameServer同步其路由信息，Producer和Consumer仍然可以动态感知Broker的路由的信息。</li>\n<li>BrokerServer：Broker主要负责消息的存储、投递和查询以及服务高可用保证，为了实现这些功能，Broker包含了以下几个重要子模块。<ol>\n<li>Remoting Module：整个Broker的实体，负责处理来自Client端的请求。</li>\n<li>Client Manager：负责管理客户端(Producer/Consumer)和维护Consumer的Topic订阅信息。</li>\n<li>Store Service：提供方便简单的API接口处理消息存储到物理硬盘和查询功能。</li>\n<li>HA Service：高可用服务，提供Master Broker 和 Slave Broker之间的数据同步功能。</li>\n<li>Index Service：根据特定的Message key对投递到Broker的消息进行索引服务，以提供消息的快速查询。</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"../../../../img/RocketMQBase/rocketmq_architecture_2.png\" alt=\"img\"></p>\n<h3 id=\"2-部署架构\"><a href=\"#2-部署架构\" class=\"headerlink\" title=\"2 部署架构\"></a>2 部署架构</h3><p><img src=\"../../../../img/RocketMQBase/rocketmq_architecture_3.png\" alt=\"img\"></p>\n<h3 id=\"RocketMQ-网络部署特点\"><a href=\"#RocketMQ-网络部署特点\" class=\"headerlink\" title=\"RocketMQ 网络部署特点\"></a>RocketMQ 网络部署特点</h3><ul>\n<li>NameServer是一个几乎无状态节点，可集群部署，节点之间无任何信息同步。</li>\n<li>Broker部署相对复杂，Broker分为Master与Slave，一个Master可以对应多个Slave，但是一个Slave只能对应一个Master，Master与Slave 的对应关系通过指定相同的BrokerName，不同的BrokerId 来定义，BrokerId为0表示Master，非0表示Slave。Master也可以部署多个。每个Broker与NameServer集群中的所有节点建立长连接，定时注册Topic信息到所有NameServer。 注意：当前RocketMQ版本在部署架构上支持一Master多Slave，但只有BrokerId=1的从服务器才会参与消息的读负载。</li>\n<li>Producer与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer获取Topic路由信息，并向提供Topic 服务的Master建立长连接，且定时向Master发送心跳。Producer完全无状态，可集群部署。</li>\n<li>Consumer与NameServer集群中的其中一个节点（随机选择）建立长连接，定期从NameServer获取Topic路由信息，并向提供Topic服务的Master、Slave建立长连接，且定时向Master、Slave发送心跳。Consumer既可以从Master订阅消息，也可以从Slave订阅消息，消费者在向Master拉取消息时，Master服务器会根据拉取偏移量与最大偏移量的距离（判断是否读老消息，产生读I/O），以及从服务器是否可读等因素建议下一次是从Master还是Slave拉取。</li>\n</ul>\n<p>结合部署架构图，描述集群工作流程：</p>\n<ul>\n<li>启动NameServer，NameServer起来后监听端口，等待Broker、Producer、Consumer连上来，相当于一个路由控制中心。</li>\n<li>Broker启动，跟所有的NameServer保持长连接，定时发送心跳包。心跳包中包含当前Broker信息(IP+端口等)以及存储所有Topic信息。注册成功后，NameServer集群中就有Topic跟Broker的映射关系。</li>\n<li>收发消息前，先创建Topic，创建Topic时需要指定该Topic要存储在哪些Broker上，也可以在发送消息时自动创建Topic。</li>\n<li>Producer发送消息，启动时先跟NameServer集群中的其中一台建立长连接，并从NameServer中获取当前发送的Topic存在哪些Broker上，轮询从队列列表中选择一个队列，然后与队列所在的Broker建立长连接从而向Broker发消息。</li>\n<li>Consumer跟Producer类似，跟其中一台NameServer建立长连接，获取当前订阅Topic存在哪些Broker上，然后直接跟Broker建立连接通道，开始消费消息。</li>\n</ul>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p>RocketMQ的安装非常简单，就是上传解压就可以了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tRocketMQ运行版本下载地址： https:&#x2F;&#x2F;www.apache.org&#x2F;dyn&#x2F;closer.cgi?path&#x3D;rocketmq&#x2F;4.7.1&#x2F;rocketmq-all-4.7.1-bin-release.zip</span><br><span class=\"line\"></span><br><span class=\"line\">​\tRocketMQ源码版本下载地址： https:&#x2F;&#x2F;www.apache.org&#x2F;dyn&#x2F;closer.cgi?path&#x3D;rocketmq&#x2F;4.7.1&#x2F;rocketmq-all-4.7.1-source-release.zip</span><br></pre></td></tr></table></figure>\n<p>解压下载后的文件</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>RocketMQ由以下这几个组件组成</p>\n<ul>\n<li>NameServer : 提供轻量级的Broker路由服务。</li>\n<li>Broker：实际处理消息存储、转发等服务的核心组件。</li>\n<li>Producer：消息生产者集群。通常是业务系统中的一个功能模块。</li>\n<li>Consumer：消息消费者集群。通常也是业务系统中的一个功能模块。</li>\n</ul>\n<p>启动MQ只要要确保本机由java运行环境，本文就不对jdk的安装做过多说明，重点介绍RocketMQ。</p>\n<p>配置环境变量。使用 vi ~/.bash_profile编辑文件，在下面加入以下内容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> ROCKETMQ_HOME=/app/rocketmq/rocketmq-all-4.7.1-bin-release</span><br><span class=\"line\">PATH=<span class=\"variable\">$ROCKETMQ_HOME</span>/bin:<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HOME</span>/.<span class=\"built_in\">local</span>/bin:<span class=\"variable\">$HOME</span>/bin</span><br></pre></td></tr></table></figure>\n<p><img src=\"../../../../img/RocketMQBase/image-20220228165232414.png\" alt=\"image-20220228165232414\"></p>\n<p>执行source ~/.bash_profile让环境变量生效</p>\n<p>​    这样RocketMQ就安装完成了。我们把他运行起来。</p>\n<p>这个ROCKETMQ_HOME的环境变量是必须要单独配置的，如果不配置的话，启动NameSever和Broker都会报错。</p>\n<p>这个环境变量的作用是用来加载$ROCKETMQ_HOME/conf下的除broker.conf以外的几个配置文件。所以实际情况中，可以不按这个配置，但是一定要能找到配置文件。</p>\n<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><p>启动NameServer、Broker之前根据本机实际情况，判断本机的内存是否满足启动RocketMQ的内存要求，如果不满足先调整参数后再进行启动。</p>\n<p>NameServer默认参数设置（bin/<a href=\"http://xn--runserver-z89na9857bcqmtlfda85rmzcf95l5zb.sh\" target=\"_blank\" rel=\"noopener\">runserver.sh</a>）</p>\n<p><img src=\"../../../../img/RocketMQBase/image-20220228165629873.png\" alt=\"image-20220228165629873\"></p>\n<p>NameServer启动命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup sh bin/mqadminsrv &amp;</span><br></pre></td></tr></table></figure>\n<p>Broker默认参数设置（bin/<a href=\"http://xn--Brokerrunbroker-wy8y53qb44gl6dtn1h9p4b.sh\" target=\"_blank\" rel=\"noopener\">runbroker.sh</a>）</p>\n<p>NameServer启动命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup sh mqbroker -n localhost:9876 autoCreateTopicEnable=<span class=\"literal\">true</span> &amp;</span><br></pre></td></tr></table></figure>\n<p>broker默认设置为8G，可以根据实际机器情况调整</p>\n<p>在启动之前都将对应的参数进行调整如下</p>\n<p><img src=\"../../../../img/RocketMQBase/image-20220228165815145.png\" alt=\"image-20220228165815145\"></p>\n<p>启动成功后都可以在控制台看到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The broker[worker1, 192.168.232.128:10911] boot success. serializeType&#x3D;JSON</span><br></pre></td></tr></table></figure>\n<p><img src=\"../../../../img/RocketMQBase/image-20220228170409619.png\" alt=\"image-20220228170409619\"></p>\n<h1 id=\"命令行快速验证\"><a href=\"#命令行快速验证\" class=\"headerlink\" title=\"命令行快速验证\"></a>命令行快速验证</h1><p>执行如下命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br></pre></td></tr></table></figure>\n<p>我们可以看到发送消息的日志：</p>\n<p><img src=\"../../../../img/RocketMQBase/image-20220228170423468.png\" alt=\"image-20220228170423468\"></p>\n<p>这日志中，上面部分就是我们发送的消息的内容。后面两句标识消息生产者正常关闭。</p>\n<p>然后启动消息消费者接收消息：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/tools.sh  org.apache.rocketmq.example.quickstart.Consumer</span><br></pre></td></tr></table></figure>\n<p>启动后，可以看到消费到的消息。</p>\n<p><img src=\"../../../../img/RocketMQBase/image-20220228170442267.png\" alt=\"image-20220228170442267\"></p>\n<p>日志中MessageExt后的整个内容就是一条完整的RocketMQ消息。对这个消息的结构有个大概的了解</p>\n<p>其中比较关键的属性有：brokerName，queueId，msgId，topic，cluster，tags，body，transactionId。</p>\n<p>而这个Consume指令并不会结束，他会继续挂起，等待消费其他的消息。我们可以使用CTRL+C停止该进程。</p>\n<h1 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a>停止</h1><p>要关闭RocketMQ服务可以通过mqshutdown脚本直接关闭</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.关闭NameServer</span></span><br><span class=\"line\">sh bin/mqshutdown namesrv</span><br><span class=\"line\"><span class=\"comment\"># 2.关闭Broker</span></span><br><span class=\"line\">sh bin/mqshutdown broker</span><br></pre></td></tr></table></figure>\n<h1 id=\"图形化页面\"><a href=\"#图形化页面\" class=\"headerlink\" title=\"图形化页面\"></a>图形化页面</h1><p>项目源码地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;rocketmq-externals.git</span><br></pre></td></tr></table></figure>\n<p>将项目检出，然后配置地址启动即可，项目的端口根据自己需求自定义</p>\n<p><img src=\"../../../../img/RocketMQBase/image-20220228171208642.png\" alt=\"image-20220228171208642\"></p>\n<p>启动之后便可在浏览器访问图像界面</p>\n<p><img src=\"../../../../img/RocketMQBase/image-20220228171841658.png\" alt=\"image-20220228171841658\"></p>\n","next":{"title":"IDEA导入eclipse项目","path":"api/articles/resource-tools-IDEA-IDEA-eclipse.json","image":"/img/header_img/tools/idea/importEclipse.png","num_read":1752,"num_like":578,"num_collection":53,"num_comments":76},"prev":{"title":"LRU缓存算法的实现","path":"api/articles/resource-java-algorithm-LRU.json","image":"/img/header_img/algorithm/LRU.png","num_read":291,"num_like":83,"num_collection":668,"num_comments":89},"categories":[{"name":"MQ消息队列","path":"api/categories/MQ消息队列.json","pathContent":"api/categories/MQ消息队列","description":"解决应用解耦，异步消息，流量削峰等问题，实现高性能，高可用，可伸缩和最终一致性架构","cover":"https://sunfy9.gitee.io/project/photo/project/mq.PNG"}],"tags":[{"name":"MQ","path":"api/tags/MQ.json","pathContent":"api/tags/MQ","description":"[MQ]暂未设置说明","cover":"https://sunfy9.gitee.io/img/header_img/sunfy-default.png"}]}