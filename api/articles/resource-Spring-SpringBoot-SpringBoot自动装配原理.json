{"title":"SpringBoot自动装配原理","num_read":1695,"num_like":961,"num_collection":840,"num_comments":53,"slug":"resource-Spring-SpringBoot-SpringBoot自动装配原理","date":"2021-10-05T16:00:00.000Z","img":"/img/header_img/spring/springBootAuto.png","format":"max","_id":"clhrbp2fq00flo5lg9sgy264r","project":"Spring","type":"banner","subtitle":"@Import + @Configuration + Spring spi","hot":"read","site":{"data":{}},"updated":"2022-09-20T02:21:30.097Z","author":"Sunfy","comments":true,"path":"api/articles/resource-Spring-SpringBoot-SpringBoot自动装配原理.json","webPath":"2021/10/06/resource-Spring-SpringBoot-SpringBoot自动装配原理/","permalink":"https://sunfy9.gitee.io/2021/10/06/resource-Spring-SpringBoot-SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86/","excerpt":"配置文件到底能写什么？怎么写？自动配置原理；配置文件属性参照","covers":["../../../../img/SpringBoot自动装配原理/image-20210809172533498.png","../../../../img/SpringBoot自动装配原理/image-20210118114003369.png","../../../../img/SpringBoot自动装配原理/image-20210118210142763.png","../../../../img/SpringBoot自动装配原理/image-20210118114603645.png","../../../../img/SpringBoot自动装配原理/image-20210118115041776.png"],"keywords":"sunfy, hexo-theme-snail","content":"<p>配置文件到底能写什么？怎么写？自动配置原理；</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties\" target=\"_blank\" rel=\"noopener\">配置文件属性参照</a><a id=\"more\"></a></p>\n<h2 id=\"SpringBoot自动装配\"><a href=\"#SpringBoot自动装配\" class=\"headerlink\" title=\"SpringBoot自动装配\"></a>SpringBoot自动装配</h2><p>@Import + @Configuration + Spring spi </p>\n<p>自动配置类由各个starter提供，使用@Configuration + @Bean定义配置类，放到META-INF/spring.factories下 使用Spring spi扫描META-INF/spring.factories下的配置类 使用@Import导入自动配置类</p>\n<p><img src=\"../../../../img/SpringBoot自动装配原理/image-20210809172533498.png\" alt=\"image-20210809172533498\"></p>\n<ul>\n<li><p>源码查看入口 <sunfy-line></p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SpringBootApplication</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>@SpringBootApplication</code>: Spring Boot应用标注在某个类上说明这个类是Spring Boot的主配置类，Spring Boot需要运行这个类的main方法来启动Spring Boot应用；</p>\n</li>\n<li><p><code>@EnableAutoConfiguration</code> 开启自动配置功能；自动扫描所有的配置类，扫描到并满足条件才会生效</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(AutoConfigurationImportSelector<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> @<span class=\"title\">interface</span> <span class=\"title\">EnableAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>@Import(AutoConfigurationImportSelector.class)</code> SpringBoot实现自动配置的关键类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现接口DeferredImportSelector（一个ImportSelector的变种，不会执行ImportSelector）</span></span><br><span class=\"line\"><span class=\"comment\">// 解析@Import(AutoConfigurationImportSelector.class)注解时，调用getAutoConfigurationEntry</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutoConfigurationImportSelector</span> <span class=\"keyword\">implements</span> <span class=\"title\">DeferredImportSelector</span>, <span class=\"title\">BeanClassLoaderAware</span>,</span></span><br><span class=\"line\"><span class=\"class\">\t\t<span class=\"title\">ResourceLoaderAware</span>, <span class=\"title\">BeanFactoryAware</span>, <span class=\"title\">EnvironmentAware</span>, <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// sunfy-AutoConf 自动配置重要入口</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>AutoConfigurationImportSelector</code> 实现接口 <code>DeferredImportSelector</code>，判断是否重写<code>getImportGroup</code>方法，如果没有重写<code>selectImports</code>返回一个数组，将数组中的完整类名注册为bean</p>\n</li>\n<li>重写<code>getImportGroup</code>方法，返回一个自定义的实现了<code>DeferredImportSelector.Group</code>的类</li>\n</ul>\n</li>\n<li><p>SpringBoot通过重写，返回自定义的<code>DeferredImportSelector.Group</code>的类</p>\n</li>\n<li><p>process中获取所有的配置并根据实际引入进行过滤</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(AnnotationMetadata annotationMetadata, DeferredImportSelector deferredImportSelector)</span> </span>&#123;</span><br><span class=\"line\">    Assert.state(deferredImportSelector <span class=\"keyword\">instanceof</span> AutoConfigurationImportSelector,</span><br><span class=\"line\">                 () -&gt; String.format(<span class=\"string\">\"Only %s implementations are supported, got %s\"</span>,</span><br><span class=\"line\">                                     AutoConfigurationImportSelector<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getSimpleName</span>(),</span></span><br><span class=\"line\"><span class=\"class\">                                     <span class=\"title\">deferredImportSelector</span>.<span class=\"title\">getClass</span>().<span class=\"title\">getName</span>()))</span>;</span><br><span class=\"line\">    AutoConfigurationEntry autoConfigurationEntry = ((AutoConfigurationImportSelector) deferredImportSelector)</span><br><span class=\"line\">        <span class=\"comment\">// sunfy-autoConf 获取所有的有效自动配置类</span></span><br><span class=\"line\">        .getAutoConfigurationEntry(annotationMetadata);</span><br><span class=\"line\">    <span class=\"comment\">// selectImports 方法中获取到的配置</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.autoConfigurationEntries.add(autoConfigurationEntry);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String importClassName : autoConfigurationEntry.getConfigurations()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.entries.putIfAbsent(importClassName, annotationMetadata);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> <code>getAutoConfigurationEntry</code>获取所有有效自动配置类，进入方法</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sunfy-autoConf 获取所有的有效自动配置类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> AutoConfigurationEntry <span class=\"title\">getAutoConfigurationEntry</span><span class=\"params\">(AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EMPTY_ENTRY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class=\"line\">    <span class=\"comment\">// sunfy-autoconf 获取所有的配置类1XX个</span></span><br><span class=\"line\">    List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class=\"line\">    configurations = removeDuplicates(configurations);</span><br><span class=\"line\">    Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class=\"line\">    checkExcludedClasses(configurations, exclusions);</span><br><span class=\"line\">    configurations.removeAll(exclusions);</span><br><span class=\"line\">    <span class=\"comment\">// sunfy-AutoConf 根据pom依赖中添加starter过滤出来的有效配置类</span></span><br><span class=\"line\">    configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class=\"line\">    fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AutoConfigurationEntry(configurations, exclusions);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> <code>getCandidateConfigurations</code>中获取到SpringBoot项目中所有的Stater配置，总共有<code>1xx</code>多个</p>\n<p> <img src=\"../../../../img/SpringBoot自动装配原理/image-20210118114003369.png\" alt=\"image-20210118114003369\"></p>\n<p> 进入<code>getCandidateConfigurations</code>方法中</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title\">getCandidateConfigurations</span><span class=\"params\">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// sunfy-autoconf 加载所有配置文件，jar中可能都存在，都进行读取</span></span><br><span class=\"line\">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class=\"line\">                                                                         getBeanClassLoader());</span><br><span class=\"line\">    Assert.notEmpty(configurations, <span class=\"string\">\"No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> configurations;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>loadFactoryNames</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">loadFactoryNames</span><span class=\"params\">(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 要获取的自动配置类的全限定名</span></span><br><span class=\"line\">    String factoryTypeName = factoryType.getName();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"../../../../img/SpringBoot自动装配原理/image-20210118210142763.png\" alt=\"image-20210118210142763\"></p>\n<p>   <code>loadSpringFactories</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class=\"meta\">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 此时会尝试从缓存中进行获取，因为在SpringBoot启动时就会加载其他配置文件，因为加载所有的配置文件是一个很耗时耗内存的过程，在第一次加载完成后会放在cache中，方便后续获取</span></span><br><span class=\"line\">      MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// public static final String FACTORIES_RESOURCE_LOCATION = \"META-INF/spring.factories\";</span></span><br><span class=\"line\">          <span class=\"comment\">// 不难看出都会到对应的jar包中读取META-INF/spring.factories文件中的内容</span></span><br><span class=\"line\">          Enumeration&lt;URL&gt; urls = (classLoader != <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">                                   classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class=\"line\">                                   ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class=\"line\">          result = <span class=\"keyword\">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class=\"line\">          <span class=\"keyword\">while</span> (urls.hasMoreElements()) &#123;</span><br><span class=\"line\">              URL url = urls.nextElement();</span><br><span class=\"line\">              UrlResource resource = <span class=\"keyword\">new</span> UrlResource(url);</span><br><span class=\"line\">              Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class=\"line\">                  String factoryTypeName = ((String) entry.getKey()).trim();</span><br><span class=\"line\">                  <span class=\"keyword\">for</span> (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class=\"line\">                      result.add(factoryTypeName, factoryImplementationName.trim());</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 将获取到的内容放入到缓存中</span></span><br><span class=\"line\">          cache.put(classLoader, result);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unable to load factories from location [\"</span> + FACTORIES_RESOURCE_LOCATION + <span class=\"string\">\"]\"</span>, ex);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>  <img src=\"../../../../img/SpringBoot自动装配原理/image-20210118114603645.png\" alt=\"image-20210118114603645\"></p>\n<p>   遍历每个jar包下的每个<code>META-INF/spring.factories</code>文件内容</p>\n<p>   ​       <img src=\"../../../../img/SpringBoot自动装配原理/image-20210118115041776.png\" alt=\"image-20210118115041776\"></p>\n<ol>\n<li><p><code>getConfigurationClassFilter().filter(configurations)</code>根据<code>pom</code>依赖中添加starter过滤出来的有效配置类</p>\n<p>至此所有的自动配置就全部获取到了</p>\n</li>\n</ol>\n","more":"</p>\n<h2 id=\"SpringBoot自动装配\"><a href=\"#SpringBoot自动装配\" class=\"headerlink\" title=\"SpringBoot自动装配\"></a>SpringBoot自动装配</h2><p>@Import + @Configuration + Spring spi </p>\n<p>自动配置类由各个starter提供，使用@Configuration + @Bean定义配置类，放到META-INF/spring.factories下 使用Spring spi扫描META-INF/spring.factories下的配置类 使用@Import导入自动配置类</p>\n<p><img src=\"../../../../img/SpringBoot自动装配原理/image-20210809172533498.png\" alt=\"image-20210809172533498\"></p>\n<ul>\n<li><p>源码查看入口 <sunfy-line></p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SpringBootApplication</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>@SpringBootApplication</code>: Spring Boot应用标注在某个类上说明这个类是Spring Boot的主配置类，Spring Boot需要运行这个类的main方法来启动Spring Boot应用；</p>\n</li>\n<li><p><code>@EnableAutoConfiguration</code> 开启自动配置功能；自动扫描所有的配置类，扫描到并满足条件才会生效</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(AutoConfigurationImportSelector<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> @<span class=\"title\">interface</span> <span class=\"title\">EnableAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>@Import(AutoConfigurationImportSelector.class)</code> SpringBoot实现自动配置的关键类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现接口DeferredImportSelector（一个ImportSelector的变种，不会执行ImportSelector）</span></span><br><span class=\"line\"><span class=\"comment\">// 解析@Import(AutoConfigurationImportSelector.class)注解时，调用getAutoConfigurationEntry</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutoConfigurationImportSelector</span> <span class=\"keyword\">implements</span> <span class=\"title\">DeferredImportSelector</span>, <span class=\"title\">BeanClassLoaderAware</span>,</span></span><br><span class=\"line\"><span class=\"class\">\t\t<span class=\"title\">ResourceLoaderAware</span>, <span class=\"title\">BeanFactoryAware</span>, <span class=\"title\">EnvironmentAware</span>, <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// sunfy-AutoConf 自动配置重要入口</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>AutoConfigurationImportSelector</code> 实现接口 <code>DeferredImportSelector</code>，判断是否重写<code>getImportGroup</code>方法，如果没有重写<code>selectImports</code>返回一个数组，将数组中的完整类名注册为bean</p>\n</li>\n<li>重写<code>getImportGroup</code>方法，返回一个自定义的实现了<code>DeferredImportSelector.Group</code>的类</li>\n</ul>\n</li>\n<li><p>SpringBoot通过重写，返回自定义的<code>DeferredImportSelector.Group</code>的类</p>\n</li>\n<li><p>process中获取所有的配置并根据实际引入进行过滤</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(AnnotationMetadata annotationMetadata, DeferredImportSelector deferredImportSelector)</span> </span>&#123;</span><br><span class=\"line\">    Assert.state(deferredImportSelector <span class=\"keyword\">instanceof</span> AutoConfigurationImportSelector,</span><br><span class=\"line\">                 () -&gt; String.format(<span class=\"string\">\"Only %s implementations are supported, got %s\"</span>,</span><br><span class=\"line\">                                     AutoConfigurationImportSelector<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getSimpleName</span>(),</span></span><br><span class=\"line\"><span class=\"class\">                                     <span class=\"title\">deferredImportSelector</span>.<span class=\"title\">getClass</span>().<span class=\"title\">getName</span>()))</span>;</span><br><span class=\"line\">    AutoConfigurationEntry autoConfigurationEntry = ((AutoConfigurationImportSelector) deferredImportSelector)</span><br><span class=\"line\">        <span class=\"comment\">// sunfy-autoConf 获取所有的有效自动配置类</span></span><br><span class=\"line\">        .getAutoConfigurationEntry(annotationMetadata);</span><br><span class=\"line\">    <span class=\"comment\">// selectImports 方法中获取到的配置</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.autoConfigurationEntries.add(autoConfigurationEntry);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String importClassName : autoConfigurationEntry.getConfigurations()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.entries.putIfAbsent(importClassName, annotationMetadata);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> <code>getAutoConfigurationEntry</code>获取所有有效自动配置类，进入方法</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sunfy-autoConf 获取所有的有效自动配置类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> AutoConfigurationEntry <span class=\"title\">getAutoConfigurationEntry</span><span class=\"params\">(AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EMPTY_ENTRY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class=\"line\">    <span class=\"comment\">// sunfy-autoconf 获取所有的配置类1XX个</span></span><br><span class=\"line\">    List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class=\"line\">    configurations = removeDuplicates(configurations);</span><br><span class=\"line\">    Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class=\"line\">    checkExcludedClasses(configurations, exclusions);</span><br><span class=\"line\">    configurations.removeAll(exclusions);</span><br><span class=\"line\">    <span class=\"comment\">// sunfy-AutoConf 根据pom依赖中添加starter过滤出来的有效配置类</span></span><br><span class=\"line\">    configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class=\"line\">    fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AutoConfigurationEntry(configurations, exclusions);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> <code>getCandidateConfigurations</code>中获取到SpringBoot项目中所有的Stater配置，总共有<code>1xx</code>多个</p>\n<p> <img src=\"../../../../img/SpringBoot自动装配原理/image-20210118114003369.png\" alt=\"image-20210118114003369\"></p>\n<p> 进入<code>getCandidateConfigurations</code>方法中</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title\">getCandidateConfigurations</span><span class=\"params\">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// sunfy-autoconf 加载所有配置文件，jar中可能都存在，都进行读取</span></span><br><span class=\"line\">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class=\"line\">                                                                         getBeanClassLoader());</span><br><span class=\"line\">    Assert.notEmpty(configurations, <span class=\"string\">\"No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> configurations;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>loadFactoryNames</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">loadFactoryNames</span><span class=\"params\">(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 要获取的自动配置类的全限定名</span></span><br><span class=\"line\">    String factoryTypeName = factoryType.getName();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"../../../../img/SpringBoot自动装配原理/image-20210118210142763.png\" alt=\"image-20210118210142763\"></p>\n<p>   <code>loadSpringFactories</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class=\"meta\">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 此时会尝试从缓存中进行获取，因为在SpringBoot启动时就会加载其他配置文件，因为加载所有的配置文件是一个很耗时耗内存的过程，在第一次加载完成后会放在cache中，方便后续获取</span></span><br><span class=\"line\">      MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// public static final String FACTORIES_RESOURCE_LOCATION = \"META-INF/spring.factories\";</span></span><br><span class=\"line\">          <span class=\"comment\">// 不难看出都会到对应的jar包中读取META-INF/spring.factories文件中的内容</span></span><br><span class=\"line\">          Enumeration&lt;URL&gt; urls = (classLoader != <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">                                   classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class=\"line\">                                   ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class=\"line\">          result = <span class=\"keyword\">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class=\"line\">          <span class=\"keyword\">while</span> (urls.hasMoreElements()) &#123;</span><br><span class=\"line\">              URL url = urls.nextElement();</span><br><span class=\"line\">              UrlResource resource = <span class=\"keyword\">new</span> UrlResource(url);</span><br><span class=\"line\">              Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class=\"line\">                  String factoryTypeName = ((String) entry.getKey()).trim();</span><br><span class=\"line\">                  <span class=\"keyword\">for</span> (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class=\"line\">                      result.add(factoryTypeName, factoryImplementationName.trim());</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 将获取到的内容放入到缓存中</span></span><br><span class=\"line\">          cache.put(classLoader, result);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unable to load factories from location [\"</span> + FACTORIES_RESOURCE_LOCATION + <span class=\"string\">\"]\"</span>, ex);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>  <img src=\"../../../../img/SpringBoot自动装配原理/image-20210118114603645.png\" alt=\"image-20210118114603645\"></p>\n<p>   遍历每个jar包下的每个<code>META-INF/spring.factories</code>文件内容</p>\n<p>   ​       <img src=\"../../../../img/SpringBoot自动装配原理/image-20210118115041776.png\" alt=\"image-20210118115041776\"></p>\n<ol>\n<li><p><code>getConfigurationClassFilter().filter(configurations)</code>根据<code>pom</code>依赖中添加starter过滤出来的有效配置类</p>\n<p>至此所有的自动配置就全部获取到了</p>\n</li>\n</ol>","next":{"title":"js实现模糊查询的几种方法","path":"api/articles/resource-desk-js-js实现模糊查询.json","image":"/img/header_img/desk/vue.gif","num_read":1193,"num_like":420,"num_collection":146,"num_comments":110},"prev":{"title":"SpringAOP底层原理","path":"api/articles/resource-Spring-Spring-SpringAOP底层原理.json","image":"/img/header_img/spring/aop.png","num_read":1767,"num_like":136,"num_collection":581,"num_comments":186},"categories":[{"name":"Spring全家桶","path":"api/categories/Spring全家桶.json","pathContent":"api/categories/Spring全家桶","description":"更快、更容易、更安全","cover":"https://sunfy9.gitee.io/project/photo/project/spring.png"}],"tags":[{"name":"SpringBoot","path":"api/tags/SpringBoot.json","pathContent":"api/tags/SpringBoot","description":"更快、更容易、更安全","cover":"https://sunfy9.gitee.io/project/photo/project/spring.png"}]}