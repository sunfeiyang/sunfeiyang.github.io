{"title":"Spring推断构造方法","num_read":1242,"num_like":919,"num_collection":625,"num_comments":217,"slug":"resource-Spring-Spring-Spring推断构造方法","date":"2021-05-23T16:00:00.000Z","img":"/img/header_img/spring/constructor.png","_id":"clhrbp2ft00gvo5lg5iylcu53","top":true,"project":"Spring","subtitle":"一个构造方法|多个构造方法","hot":"like","site":{"data":{}},"updated":"2022-09-20T02:17:03.666Z","author":"Sunfy","comments":true,"path":"api/articles/resource-Spring-Spring-Spring推断构造方法.json","webPath":"2021/05/24/resource-Spring-Spring-Spring推断构造方法/","permalink":"https://sunfy9.gitee.io/2021/05/24/resource-Spring-Spring-Spring%E6%8E%A8%E6%96%AD%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/","excerpt":null,"covers":["../../../../img/Spring推断构造方法/image-20211216102033567.png","../../../../img/Spring推断构造方法/image-20211216110714192.png"],"keywords":"sunfy, hexo-theme-snail","content":"<h1 id=\"Spring推断构造方法\"><a href=\"#Spring推断构造方法\" class=\"headerlink\" title=\"Spring推断构造方法\"></a>Spring推断构造方法</h1><p><img src=\"../../../../img/Spring推断构造方法/image-20211216102033567.png\" alt=\"image-20211216102033567\"></p>\n<p><img src=\"../../../../img/Spring推断构造方法/image-20211216110714192.png\" alt=\"image-20211216110714192\"></p>\n<p>Spring中的一个bean，需要实例化得到一个对象，而实例化就需要用到构造方法。</p>\n<h1 id=\"一个构造方法\"><a href=\"#一个构造方法\" class=\"headerlink\" title=\"一个构造方法\"></a>一个构造方法</h1><p>一般情况下，一个类只有一个构造方法：</p>\n<ul>\n<li>要么是无参的构造方法</li>\n<li>要么是有参的构造方法<sunfy-line></li>\n</ul>\n<p>如果只有<strong>一个无参</strong>的构造方法，那么实例化就只能使用这个构造方法了。 如果只有<strong>一个有参</strong>的构造方法，那么实例化时能使用这个构造方法吗？要分情况讨论：</p>\n<ul>\n<li>使用AnnotationConfigApplicationContext，会使用这个构造方法进行实例化，那么Spring会根据构造方法的参数信息去寻找bean，然后传给构造方法</li>\n<li>使用ClassPathXmlApplicationContext，表示使用XML的方式来使用bean，要么在XML中指定构造方法的参数值(手动指定)，要么配置<strong>autowire=constructor</strong>让Spring<strong>自动</strong>去寻找bean做为构造方法参数值。</li>\n</ul>\n<p>上面是只有一个构造方法的情况，那么如果有多个构造方法呢？</p>\n<h1 id=\"多个构造方法\"><a href=\"#多个构造方法\" class=\"headerlink\" title=\"多个构造方法\"></a>多个构造方法</h1><p>又分为两种情况，多个构造方法中存不存在无参的构造方法。</p>\n<p>分析：一个类存在多个构造方法，那么Spring进行实例化之前，该如何去确定到底用哪个构造方法呢？</p>\n<ul>\n<li>如果开发者指定了想要使用的构造方法，那么就用这个构造方法</li>\n<li>如果开发者没有指定想要使用的构造方法，则看开发者有没有让Spring自动去选择构造方法</li>\n<li>如果开发者也没有让Spring自动去选择构造方法，则Spring利用无参构造方法，如果没有无参构造方法，则报错</li>\n</ul>\n<p>针对第一点，开发者可以通过什么方式来指定使用哪个构造方法呢？</p>\n<ul>\n<li>xml中的<constructor-arg>标签，这个标签表示构造方法参数，所以可以根据这个确定想要使用的构造方法的参数个数，从而确定想要使用的构造方法</li>\n<li>通过@Autowired注解，@Autowired注解可以写在构造方法上，所以哪个构造方法上写了@Autowired注解，表示开发者想使用哪个构造方法，当然，它和第一个方式的不同点是，通过xml的方式，我们直接指定了构造方法的参数值，而通过@Autowired注解的方式，需要Spring通过byType+byName的方式去找到符合条件的bean作为构造方法的参数值</li>\n</ul>\n<p>再来看第二点，如果开发者没有指定想要使用的构造方法，则看开发者有没有让Spring自动去选择构造方法，对于这一点，只能用在ClassPathXmlApplicationContext，因为通过AnnotationConfigApplicationContext没有办法去指定某个bean可以自动去选择构造方法，而通过ClassPathXmlApplicationContext可以在xml中指定某个bean的autowire为constructor，虽然这个属性表示通过构造方法自动注入，所以需要自动的去选择一个构造方法进行自动注入，因为是构造方法，所以顺便是进行实例化。</p>\n<p>当然，还有一种情况，就是多个构造方法上写了@Autowired注解，那么此时Spring会报错。 但是，因为@Autowired还有一个属性required，默认为ture，所以一个类中，只有能一个构造方法标注了@Autowired或@Autowired（required=true），有多个会报错。但是可以有多个@Autowired（required=false）,这种情况下，需要Spring从这些构造方法中去自动选择一个构造方法。</p>\n<h2 id=\"源码思路\"><a href=\"#源码思路\" class=\"headerlink\" title=\"源码思路\"></a>源码思路</h2><ul>\n<li>AbstractAutowireCapableBeanFactory类中的createBeanInstance()方法会去创建一个Bean实例</li>\n<li>根据BeanDefinition加载类得到Class对象</li>\n<li>如果BeanDefinition绑定了一个Supplier，那就调用Supplier的get方法得到一个对象并直接返回</li>\n<li>如果BeanDefinition中存在<strong>factoryMethodName</strong>，那么就<strong>调用该工厂方法</strong>得到一个bean对象并返回</li>\n<li>如果BeanDefinition已经自动构造过了，那就调用autowireConstructor()自动构造一个对象</li>\n<li>调用SmartInstantiationAwareBeanPostProcessor的determineCandidateConstructors()方法得到哪些构造方法是可以用的</li>\n<li>如果存在可用得构造方法，或者当前BeanDefinition的autowired是AUTOWIRE_CONSTRUCTOR，或者BeanDefinition中指定了构造方法参数值，或者创建Bean的时候指定了构造方法参数值，那么就调用<strong>autowireConstructor()</strong>方法自动构造一个对象</li>\n<li>最后，如果不是上述情况，就根据无参的构造方法实例化一个对象</li>\n</ul>\n<h3 id=\"autowireConstructor\"><a href=\"#autowireConstructor\" class=\"headerlink\" title=\"autowireConstructor()\"></a><strong>autowireConstructor()</strong></h3><ul>\n<li>先检查是否指定了具体的构造方法和构造方法参数值，或者在BeanDefinition中缓存了具体的构造方法或构造方法参数值，如果存在那么则直接使用该构造方法进行实例化</li>\n<li>如果没有确定的构造方法或构造方法参数值，那么<ul>\n<li>如果没有确定的构造方法，那么则找出类中所有的构造方法</li>\n<li>如果只有一个无参的构造方法，那么直接使用无参的构造方法进行实例化</li>\n<li>如果有多个可用的构造方法或者当前Bean需要自动通过构造方法注入</li>\n<li>根据所指定的构造方法参数值，确定所需要的最少的构造方法参数值的个数</li>\n<li>对所有的构造方法进行排序，参数个数多的在前面</li>\n<li>遍历每个构造方法</li>\n<li>如果不是调用getBean方法时所指定的构造方法参数值，那么则根据构造方法参数类型找值</li>\n<li>如果时调用getBean方法时所指定的构造方法参数值，就直接利用这些值</li>\n<li>如果根据当前构造方法找到了对应的构造方法参数值，那么这个构造方法就是可用的，但是不一定这个构造方法就是最佳的，所以这里会涉及到是否有多个构造方法匹配了同样的值，这个时候就会用值和构造方法类型进行匹配程度的打分，找到一个最匹配的</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"为什么分越少优先级越高？\"><a href=\"#为什么分越少优先级越高？\" class=\"headerlink\" title=\"为什么分越少优先级越高？\"></a>为什么分越少优先级越高？</h2><p>主要是计算找到的bean和构造方法参数类型匹配程度有多高。</p>\n<p>假设bean的类型为A，A的父类是B，B的父类是C，同时A实现了接口D 如果构造方法的参数类型为A，那么完全匹配，得分为0 如果构造方法的参数类型为B，那么得分为2 如果构造方法的参数类型为C，那么得分为4 如果构造方法的参数类型为D，那么得分为1</p>\n<p>可以直接使用如下代码进行测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object[] objects = <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">new</span> A()&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\">System.out.println(MethodInvoker.getTypeDifferenceWeight(<span class=\"keyword\">new</span> Class[]&#123;A<span class=\"class\">.<span class=\"keyword\">class</span>&#125;, <span class=\"title\">objects</span>))</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\">System.out.println(MethodInvoker.getTypeDifferenceWeight(<span class=\"keyword\">new</span> Class[]&#123;B<span class=\"class\">.<span class=\"keyword\">class</span>&#125;, <span class=\"title\">objects</span>))</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\">System.out.println(MethodInvoker.getTypeDifferenceWeight(<span class=\"keyword\">new</span> Class[]&#123;C<span class=\"class\">.<span class=\"keyword\">class</span>&#125;, <span class=\"title\">objects</span>))</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">System.out.println(MethodInvoker.getTypeDifferenceWeight(<span class=\"keyword\">new</span> Class[]&#123;D<span class=\"class\">.<span class=\"keyword\">class</span>&#125;, <span class=\"title\">objects</span>))</span>;</span><br></pre></td></tr></table></figure>\n<p>所以，我们可以发现，越匹配分数越低。</p>\n<h2 id=\"Bean的情况\"><a href=\"#Bean的情况\" class=\"headerlink\" title=\"@Bean的情况\"></a>@Bean的情况</h2><p>首先，Spring会把@Bean修饰的方法解析成BeanDefinition：</p>\n<ul>\n<li>如果方法是static的，那么解析出来的BeanDefinition中：<ul>\n<li>factoryBeanName为AppConfig所对应的beanName，比如”appConfig”</li>\n<li>factoryMethodName为对应的方法名，比如”aService”</li>\n<li>factoryClass为AppConfig.class</li>\n</ul>\n</li>\n<li>如果方法不是static的，那么解析出来的BeanDefinition中：<ul>\n<li>factoryBeanName为null</li>\n<li>factoryMethodName为对应的方法名，比如”aService”</li>\n<li>factoryClass也为AppConfig.class</li>\n</ul>\n</li>\n</ul>\n<p>在由@Bean生成的BeanDefinition中，有一个重要的属性isFactoryMethodUnique，表示factoryMethod是不是唯一的，在普通情况下@Bean生成的BeanDefinition的isFactoryMethodUnique为true，但是如果出现了方法重载，那么就是特殊的情况，比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AService <span class=\"title\">aService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AService();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AService <span class=\"title\">aService</span><span class=\"params\">(BService bService)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AService();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然有两个@Bean，但是肯定只会生成一个aService的Bean，那么Spring在处理@Bean时，也只会生成一个aService的BeanDefinition，比如Spring先解析到第一个@Bean，会生成一个BeanDefinition，此时isFactoryMethodUnique为true，但是解析到第二个@Bean时，会判断出来beanDefinitionMap中已经存在一个aService的BeanDefinition了，那么会把之前的这个BeanDefinition的isFactoryMethodUnique修改为false，并且不会生成新的BeanDefinition了。</p>\n<p>并且后续在根据BeanDefinition创建Bean时，会根据isFactoryMethodUnique来操作，如果为true，那就表示当前BeanDefinition只对应了一个方法，那也就是只能用这个方法来创建Bean了，但是如果isFactoryMethodUnique为false，那就表示当前BeanDefition对应了多个方法，需要和推断构造方法的逻辑一样，去选择用哪个方法来创建Bean。</p>\n","more":"<h1 id=\"Spring推断构造方法\"><a href=\"#Spring推断构造方法\" class=\"headerlink\" title=\"Spring推断构造方法\"></a>Spring推断构造方法</h1><p><img src=\"../../../../img/Spring推断构造方法/image-20211216102033567.png\" alt=\"image-20211216102033567\"></p>\n<p><img src=\"../../../../img/Spring推断构造方法/image-20211216110714192.png\" alt=\"image-20211216110714192\"></p>\n<p>Spring中的一个bean，需要实例化得到一个对象，而实例化就需要用到构造方法。</p>\n<h1 id=\"一个构造方法\"><a href=\"#一个构造方法\" class=\"headerlink\" title=\"一个构造方法\"></a>一个构造方法</h1><p>一般情况下，一个类只有一个构造方法：</p>\n<ul>\n<li>要么是无参的构造方法</li>\n<li>要么是有参的构造方法<sunfy-line></li>\n</ul>\n<p>如果只有<strong>一个无参</strong>的构造方法，那么实例化就只能使用这个构造方法了。 如果只有<strong>一个有参</strong>的构造方法，那么实例化时能使用这个构造方法吗？要分情况讨论：</p>\n<ul>\n<li>使用AnnotationConfigApplicationContext，会使用这个构造方法进行实例化，那么Spring会根据构造方法的参数信息去寻找bean，然后传给构造方法</li>\n<li>使用ClassPathXmlApplicationContext，表示使用XML的方式来使用bean，要么在XML中指定构造方法的参数值(手动指定)，要么配置<strong>autowire=constructor</strong>让Spring<strong>自动</strong>去寻找bean做为构造方法参数值。</li>\n</ul>\n<p>上面是只有一个构造方法的情况，那么如果有多个构造方法呢？</p>\n<h1 id=\"多个构造方法\"><a href=\"#多个构造方法\" class=\"headerlink\" title=\"多个构造方法\"></a>多个构造方法</h1><p>又分为两种情况，多个构造方法中存不存在无参的构造方法。</p>\n<p>分析：一个类存在多个构造方法，那么Spring进行实例化之前，该如何去确定到底用哪个构造方法呢？</p>\n<ul>\n<li>如果开发者指定了想要使用的构造方法，那么就用这个构造方法</li>\n<li>如果开发者没有指定想要使用的构造方法，则看开发者有没有让Spring自动去选择构造方法</li>\n<li>如果开发者也没有让Spring自动去选择构造方法，则Spring利用无参构造方法，如果没有无参构造方法，则报错</li>\n</ul>\n<p>针对第一点，开发者可以通过什么方式来指定使用哪个构造方法呢？</p>\n<ul>\n<li>xml中的<constructor-arg>标签，这个标签表示构造方法参数，所以可以根据这个确定想要使用的构造方法的参数个数，从而确定想要使用的构造方法</li>\n<li>通过@Autowired注解，@Autowired注解可以写在构造方法上，所以哪个构造方法上写了@Autowired注解，表示开发者想使用哪个构造方法，当然，它和第一个方式的不同点是，通过xml的方式，我们直接指定了构造方法的参数值，而通过@Autowired注解的方式，需要Spring通过byType+byName的方式去找到符合条件的bean作为构造方法的参数值</li>\n</ul>\n<p>再来看第二点，如果开发者没有指定想要使用的构造方法，则看开发者有没有让Spring自动去选择构造方法，对于这一点，只能用在ClassPathXmlApplicationContext，因为通过AnnotationConfigApplicationContext没有办法去指定某个bean可以自动去选择构造方法，而通过ClassPathXmlApplicationContext可以在xml中指定某个bean的autowire为constructor，虽然这个属性表示通过构造方法自动注入，所以需要自动的去选择一个构造方法进行自动注入，因为是构造方法，所以顺便是进行实例化。</p>\n<p>当然，还有一种情况，就是多个构造方法上写了@Autowired注解，那么此时Spring会报错。 但是，因为@Autowired还有一个属性required，默认为ture，所以一个类中，只有能一个构造方法标注了@Autowired或@Autowired（required=true），有多个会报错。但是可以有多个@Autowired（required=false）,这种情况下，需要Spring从这些构造方法中去自动选择一个构造方法。</p>\n<h2 id=\"源码思路\"><a href=\"#源码思路\" class=\"headerlink\" title=\"源码思路\"></a>源码思路</h2><ul>\n<li>AbstractAutowireCapableBeanFactory类中的createBeanInstance()方法会去创建一个Bean实例</li>\n<li>根据BeanDefinition加载类得到Class对象</li>\n<li>如果BeanDefinition绑定了一个Supplier，那就调用Supplier的get方法得到一个对象并直接返回</li>\n<li>如果BeanDefinition中存在<strong>factoryMethodName</strong>，那么就<strong>调用该工厂方法</strong>得到一个bean对象并返回</li>\n<li>如果BeanDefinition已经自动构造过了，那就调用autowireConstructor()自动构造一个对象</li>\n<li>调用SmartInstantiationAwareBeanPostProcessor的determineCandidateConstructors()方法得到哪些构造方法是可以用的</li>\n<li>如果存在可用得构造方法，或者当前BeanDefinition的autowired是AUTOWIRE_CONSTRUCTOR，或者BeanDefinition中指定了构造方法参数值，或者创建Bean的时候指定了构造方法参数值，那么就调用<strong>autowireConstructor()</strong>方法自动构造一个对象</li>\n<li>最后，如果不是上述情况，就根据无参的构造方法实例化一个对象</li>\n</ul>\n<h3 id=\"autowireConstructor\"><a href=\"#autowireConstructor\" class=\"headerlink\" title=\"autowireConstructor()\"></a><strong>autowireConstructor()</strong></h3><ul>\n<li>先检查是否指定了具体的构造方法和构造方法参数值，或者在BeanDefinition中缓存了具体的构造方法或构造方法参数值，如果存在那么则直接使用该构造方法进行实例化</li>\n<li>如果没有确定的构造方法或构造方法参数值，那么<ul>\n<li>如果没有确定的构造方法，那么则找出类中所有的构造方法</li>\n<li>如果只有一个无参的构造方法，那么直接使用无参的构造方法进行实例化</li>\n<li>如果有多个可用的构造方法或者当前Bean需要自动通过构造方法注入</li>\n<li>根据所指定的构造方法参数值，确定所需要的最少的构造方法参数值的个数</li>\n<li>对所有的构造方法进行排序，参数个数多的在前面</li>\n<li>遍历每个构造方法</li>\n<li>如果不是调用getBean方法时所指定的构造方法参数值，那么则根据构造方法参数类型找值</li>\n<li>如果时调用getBean方法时所指定的构造方法参数值，就直接利用这些值</li>\n<li>如果根据当前构造方法找到了对应的构造方法参数值，那么这个构造方法就是可用的，但是不一定这个构造方法就是最佳的，所以这里会涉及到是否有多个构造方法匹配了同样的值，这个时候就会用值和构造方法类型进行匹配程度的打分，找到一个最匹配的</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"为什么分越少优先级越高？\"><a href=\"#为什么分越少优先级越高？\" class=\"headerlink\" title=\"为什么分越少优先级越高？\"></a>为什么分越少优先级越高？</h2><p>主要是计算找到的bean和构造方法参数类型匹配程度有多高。</p>\n<p>假设bean的类型为A，A的父类是B，B的父类是C，同时A实现了接口D 如果构造方法的参数类型为A，那么完全匹配，得分为0 如果构造方法的参数类型为B，那么得分为2 如果构造方法的参数类型为C，那么得分为4 如果构造方法的参数类型为D，那么得分为1</p>\n<p>可以直接使用如下代码进行测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object[] objects = <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">new</span> A()&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\">System.out.println(MethodInvoker.getTypeDifferenceWeight(<span class=\"keyword\">new</span> Class[]&#123;A<span class=\"class\">.<span class=\"keyword\">class</span>&#125;, <span class=\"title\">objects</span>))</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\">System.out.println(MethodInvoker.getTypeDifferenceWeight(<span class=\"keyword\">new</span> Class[]&#123;B<span class=\"class\">.<span class=\"keyword\">class</span>&#125;, <span class=\"title\">objects</span>))</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\">System.out.println(MethodInvoker.getTypeDifferenceWeight(<span class=\"keyword\">new</span> Class[]&#123;C<span class=\"class\">.<span class=\"keyword\">class</span>&#125;, <span class=\"title\">objects</span>))</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">System.out.println(MethodInvoker.getTypeDifferenceWeight(<span class=\"keyword\">new</span> Class[]&#123;D<span class=\"class\">.<span class=\"keyword\">class</span>&#125;, <span class=\"title\">objects</span>))</span>;</span><br></pre></td></tr></table></figure>\n<p>所以，我们可以发现，越匹配分数越低。</p>\n<h2 id=\"Bean的情况\"><a href=\"#Bean的情况\" class=\"headerlink\" title=\"@Bean的情况\"></a>@Bean的情况</h2><p>首先，Spring会把@Bean修饰的方法解析成BeanDefinition：</p>\n<ul>\n<li>如果方法是static的，那么解析出来的BeanDefinition中：<ul>\n<li>factoryBeanName为AppConfig所对应的beanName，比如”appConfig”</li>\n<li>factoryMethodName为对应的方法名，比如”aService”</li>\n<li>factoryClass为AppConfig.class</li>\n</ul>\n</li>\n<li>如果方法不是static的，那么解析出来的BeanDefinition中：<ul>\n<li>factoryBeanName为null</li>\n<li>factoryMethodName为对应的方法名，比如”aService”</li>\n<li>factoryClass也为AppConfig.class</li>\n</ul>\n</li>\n</ul>\n<p>在由@Bean生成的BeanDefinition中，有一个重要的属性isFactoryMethodUnique，表示factoryMethod是不是唯一的，在普通情况下@Bean生成的BeanDefinition的isFactoryMethodUnique为true，但是如果出现了方法重载，那么就是特殊的情况，比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AService <span class=\"title\">aService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AService();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> AService <span class=\"title\">aService</span><span class=\"params\">(BService bService)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AService();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然有两个@Bean，但是肯定只会生成一个aService的Bean，那么Spring在处理@Bean时，也只会生成一个aService的BeanDefinition，比如Spring先解析到第一个@Bean，会生成一个BeanDefinition，此时isFactoryMethodUnique为true，但是解析到第二个@Bean时，会判断出来beanDefinitionMap中已经存在一个aService的BeanDefinition了，那么会把之前的这个BeanDefinition的isFactoryMethodUnique修改为false，并且不会生成新的BeanDefinition了。</p>\n<p>并且后续在根据BeanDefinition创建Bean时，会根据isFactoryMethodUnique来操作，如果为true，那就表示当前BeanDefinition只对应了一个方法，那也就是只能用这个方法来创建Bean了，但是如果isFactoryMethodUnique为false，那就表示当前BeanDefition对应了多个方法，需要和推断构造方法的逻辑一样，去选择用哪个方法来创建Bean。</p>\n","next":{"title":"Docker 修改MySQL配置","path":"api/articles/resource-RPC-Docker-dockerEditMySQL.json","image":"/img/header_img/docker/docker.jpg","num_read":453,"num_like":1054,"num_collection":339,"num_comments":110},"prev":{"title":"docker-compose 启动容器","path":"api/articles/resource-RPC-Docker-docker-compose-base.json","image":"/img/header_img/docker/docker.jpg","num_read":1867,"num_like":804,"num_collection":576,"num_comments":157},"categories":[{"name":"Spring全家桶","path":"api/categories/Spring全家桶.json","pathContent":"api/categories/Spring全家桶","description":"更快、更容易、更安全","cover":"https://sunfy9.gitee.io/project/photo/project/spring.png"}],"tags":[{"name":"Spring","path":"api/tags/Spring.json","pathContent":"api/tags/Spring","description":"更快、更容易、更安全","cover":"https://sunfy9.gitee.io/project/photo/project/spring.png"}]}