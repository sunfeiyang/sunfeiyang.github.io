{"title":"java设计模式之观察者模式","num_read":1877,"num_like":282,"num_collection":738,"num_comments":119,"slug":"resource-designpattern-behavior-observer","date":"2020-07-09T16:00:00.000Z","img":"/img/header_img/Design/Observer.PNG","_id":"clhrbp2b3003to5lgd67469rk","hot":"comments","site":{"data":{}},"updated":"2022-09-20T01:32:19.814Z","comments":true,"path":"api/articles/resource-designpattern-behavior-observer.json","webPath":"2020/07/10/resource-designpattern-behavior-observer/","permalink":"https://sunfy9.gitee.io/2020/07/10/resource-designpattern-behavior-observer/","excerpt":null,"covers":["../../../../img/observer/image-20200925163924556.png"],"keywords":"sunfy, hexo-theme-snail","content":"<p>Java设计模式, 眼观六路，耳听八方，观察者很忙，随时监控着关注对象的一举一动。观察者模式解决了基于一对多对象结构关系间的互动问题，使观察者（多方买家）专主动为被动，被观察者（单方商家）转被动为主动，此情此景，需动静结合，先后有序，以【一方动多方静】取代【多方动一方静】的模式，大大的提高了沟通效率。<!--header--></p>\n<p>先来看个图:</p>\n<p><img src=\"../../../../img/observer/image-20200925163924556.png\" alt=\"image-20200925163924556\"></p>\n<p>观察者模式的中的三个基本部分: 事件源 / 事件 / 时间监听器<sunfy-line></p>\n<h3 id=\"定义事件接口\"><a href=\"#定义事件接口\" class=\"headerlink\" title=\"定义事件接口\"></a>定义事件接口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EventSource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Description</span>: 测试事件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Param</span>: </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>: </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Author</span>: sunfy</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Date</span>: 2020/9/25 上午9:15</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">event</span><span class=\"params\">(String arg)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件接口实现\"><a href=\"#事件接口实现\" class=\"headerlink\" title=\"事件接口实现\"></a>事件接口实现</h3><ol>\n<li>初始化监听器容器</li>\n<li>增加监听器</li>\n<li>移除监听器</li>\n<li>发布事件</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventSourceImpl</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 监听器容器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;EventSource&gt; eventSources = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 增加监听器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addListener</span><span class=\"params\">(EventSource event)</span></span>&#123;</span><br><span class=\"line\">        eventSources.add(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 移除监听器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeListener</span><span class=\"params\">(EventSource event)</span> </span>&#123;</span><br><span class=\"line\">        eventSources.remove(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发布事件</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyEvent</span><span class=\"params\">(String things)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (EventSource e : eventSources) &#123;</span><br><span class=\"line\">            e.event(things);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件监听器A\"><a href=\"#事件监听器A\" class=\"headerlink\" title=\"事件监听器A\"></a>事件监听器A</h3><p>事件监听器需要实现接口并重新对应的方法,这样就可以在事件发布时,监听器根据自己的需求去自定义执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListenerA</span> <span class=\"keyword\">implements</span> <span class=\"title\">EventSource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">event</span><span class=\"params\">(String arg)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"监听器A事件触发 arg = \"</span> + arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件监听器B\"><a href=\"#事件监听器B\" class=\"headerlink\" title=\"事件监听器B\"></a>事件监听器B</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListenerB</span> <span class=\"keyword\">implements</span> <span class=\"title\">EventSource</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">event</span><span class=\"params\">(String arg)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"事件监听器B触发 arg = \"</span> + arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventTestMain</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EventSourceImpl eventSource = <span class=\"keyword\">new</span> EventSourceImpl();</span><br><span class=\"line\">        ListenerA a = <span class=\"keyword\">new</span> ListenerA();</span><br><span class=\"line\">        ListenerB b = <span class=\"keyword\">new</span> ListenerB();</span><br><span class=\"line\">        eventSource.addListener(a);</span><br><span class=\"line\">        eventSource.addListener(b);</span><br><span class=\"line\"></span><br><span class=\"line\">        eventSource.notifyEvent(<span class=\"string\">\"发布事件A\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        eventSource.removeListener(b);</span><br><span class=\"line\"></span><br><span class=\"line\">        eventSource.notifyEvent(<span class=\"string\">\"发布事件B\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Spring中的使用\"><a href=\"#Spring中的使用\" class=\"headerlink\" title=\"Spring中的使用\"></a>Spring中的使用</h3><p>持续更新…</p>\n","more":"<p>Java设计模式, 眼观六路，耳听八方，观察者很忙，随时监控着关注对象的一举一动。观察者模式解决了基于一对多对象结构关系间的互动问题，使观察者（多方买家）专主动为被动，被观察者（单方商家）转被动为主动，此情此景，需动静结合，先后有序，以【一方动多方静】取代【多方动一方静】的模式，大大的提高了沟通效率。<!--header--></p>\n<p>先来看个图:</p>\n<p><img src=\"../../../../img/observer/image-20200925163924556.png\" alt=\"image-20200925163924556\"></p>\n<p>观察者模式的中的三个基本部分: 事件源 / 事件 / 时间监听器<sunfy-line></p>\n<h3 id=\"定义事件接口\"><a href=\"#定义事件接口\" class=\"headerlink\" title=\"定义事件接口\"></a>定义事件接口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EventSource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Description</span>: 测试事件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Param</span>: </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>: </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Author</span>: sunfy</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Date</span>: 2020/9/25 上午9:15</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">event</span><span class=\"params\">(String arg)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件接口实现\"><a href=\"#事件接口实现\" class=\"headerlink\" title=\"事件接口实现\"></a>事件接口实现</h3><ol>\n<li>初始化监听器容器</li>\n<li>增加监听器</li>\n<li>移除监听器</li>\n<li>发布事件</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventSourceImpl</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 监听器容器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;EventSource&gt; eventSources = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 增加监听器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addListener</span><span class=\"params\">(EventSource event)</span></span>&#123;</span><br><span class=\"line\">        eventSources.add(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 移除监听器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeListener</span><span class=\"params\">(EventSource event)</span> </span>&#123;</span><br><span class=\"line\">        eventSources.remove(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发布事件</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyEvent</span><span class=\"params\">(String things)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (EventSource e : eventSources) &#123;</span><br><span class=\"line\">            e.event(things);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件监听器A\"><a href=\"#事件监听器A\" class=\"headerlink\" title=\"事件监听器A\"></a>事件监听器A</h3><p>事件监听器需要实现接口并重新对应的方法,这样就可以在事件发布时,监听器根据自己的需求去自定义执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListenerA</span> <span class=\"keyword\">implements</span> <span class=\"title\">EventSource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">event</span><span class=\"params\">(String arg)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"监听器A事件触发 arg = \"</span> + arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件监听器B\"><a href=\"#事件监听器B\" class=\"headerlink\" title=\"事件监听器B\"></a>事件监听器B</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListenerB</span> <span class=\"keyword\">implements</span> <span class=\"title\">EventSource</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">event</span><span class=\"params\">(String arg)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"事件监听器B触发 arg = \"</span> + arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventTestMain</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        EventSourceImpl eventSource = <span class=\"keyword\">new</span> EventSourceImpl();</span><br><span class=\"line\">        ListenerA a = <span class=\"keyword\">new</span> ListenerA();</span><br><span class=\"line\">        ListenerB b = <span class=\"keyword\">new</span> ListenerB();</span><br><span class=\"line\">        eventSource.addListener(a);</span><br><span class=\"line\">        eventSource.addListener(b);</span><br><span class=\"line\"></span><br><span class=\"line\">        eventSource.notifyEvent(<span class=\"string\">\"发布事件A\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        eventSource.removeListener(b);</span><br><span class=\"line\"></span><br><span class=\"line\">        eventSource.notifyEvent(<span class=\"string\">\"发布事件B\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Spring中的使用\"><a href=\"#Spring中的使用\" class=\"headerlink\" title=\"Spring中的使用\"></a>Spring中的使用</h3><p>持续更新…</p>\n","next":{"title":"MongoDB 通过配置文件启动","path":"api/articles/resource-DB-MongoDB-MongoDB-config.json","image":"/img/header_img/DB/mongodb.jpg","num_read":1676,"num_like":968,"num_collection":116,"num_comments":160},"prev":{"title":"一个项目push到多个远程Git仓库","path":"api/articles/resource-tools-git-maven-gitPush.json","image":"/img/header_img/tools/git.jpg","num_read":78,"num_like":501,"num_collection":476,"num_comments":156},"categories":[{"name":"设计模式","path":"api/categories/设计模式.json","pathContent":"api/categories/设计模式","description":"简单快捷、解决方案","cover":"https://sunfy9.gitee.io/project/photo/project/design.jpg"}],"tags":[]}